
003Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cf8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001ebc  08001ebc  00011ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f0c  08001f0c  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  08001f0c  08001f0c  00011f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f14  08001f14  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f14  08001f14  00011f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f18  08001f18  00011f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08001f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000174  08002090  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08002090  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e63  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000136b  00000000  00000000  00025007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000518  00000000  00000000  00026378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000460  00000000  00000000  00026890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210b7  00000000  00000000  00026cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f45  00000000  00000000  00047da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5d80  00000000  00000000  0004ecec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00114a6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001230  00000000  00000000  00114abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000174 	.word	0x20000174
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001ea4 	.word	0x08001ea4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000178 	.word	0x20000178
 8000200:	08001ea4 	.word	0x08001ea4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <set_direction>:
			generate_apple();
		}
	}
}

void set_direction(enum dir new_direction) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	switch (new_direction) {
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d842      	bhi.n	800059e <set_direction+0x96>
 8000518:	a201      	add	r2, pc, #4	; (adr r2, 8000520 <set_direction+0x18>)
 800051a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051e:	bf00      	nop
 8000520:	08000579 	.word	0x08000579
 8000524:	08000561 	.word	0x08000561
 8000528:	08000531 	.word	0x08000531
 800052c:	08000549 	.word	0x08000549
	case UP: {
		if (prev != DOWN) {
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <set_direction+0xa4>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b03      	cmp	r3, #3
 8000536:	d02b      	beq.n	8000590 <set_direction+0x88>
			prev = direction;
 8000538:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <set_direction+0xa8>)
 800053a:	781a      	ldrb	r2, [r3, #0]
 800053c:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <set_direction+0xa4>)
 800053e:	701a      	strb	r2, [r3, #0]
			direction = new_direction;
 8000540:	4a1b      	ldr	r2, [pc, #108]	; (80005b0 <set_direction+0xa8>)
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	7013      	strb	r3, [r2, #0]
		}
		break;
 8000546:	e023      	b.n	8000590 <set_direction+0x88>
	}
	case DOWN: {
		if (prev != UP) {
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <set_direction+0xa4>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d021      	beq.n	8000594 <set_direction+0x8c>
			prev = direction;
 8000550:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <set_direction+0xa8>)
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <set_direction+0xa4>)
 8000556:	701a      	strb	r2, [r3, #0]
			direction = new_direction;
 8000558:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <set_direction+0xa8>)
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	7013      	strb	r3, [r2, #0]
		}
		break;
 800055e:	e019      	b.n	8000594 <set_direction+0x8c>
	}
	case LEFT: {
		if (prev != RIGHT) {
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <set_direction+0xa4>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d017      	beq.n	8000598 <set_direction+0x90>
			prev = direction;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <set_direction+0xa8>)
 800056a:	781a      	ldrb	r2, [r3, #0]
 800056c:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <set_direction+0xa4>)
 800056e:	701a      	strb	r2, [r3, #0]
			direction = new_direction;
 8000570:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <set_direction+0xa8>)
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	7013      	strb	r3, [r2, #0]
		}
		break;
 8000576:	e00f      	b.n	8000598 <set_direction+0x90>
	}
	case RIGHT: {
		if (prev != LEFT) {
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <set_direction+0xa4>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d00d      	beq.n	800059c <set_direction+0x94>
			prev = direction;
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <set_direction+0xa8>)
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <set_direction+0xa4>)
 8000586:	701a      	strb	r2, [r3, #0]
			direction = new_direction;
 8000588:	4a09      	ldr	r2, [pc, #36]	; (80005b0 <set_direction+0xa8>)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	7013      	strb	r3, [r2, #0]
		}
		break;
 800058e:	e005      	b.n	800059c <set_direction+0x94>
		break;
 8000590:	bf00      	nop
 8000592:	e004      	b.n	800059e <set_direction+0x96>
		break;
 8000594:	bf00      	nop
 8000596:	e002      	b.n	800059e <set_direction+0x96>
		break;
 8000598:	bf00      	nop
 800059a:	e000      	b.n	800059e <set_direction+0x96>
		break;
 800059c:	bf00      	nop
	}
	}
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000105 	.word	0x20000105
 80005b0:	20000106 	.word	0x20000106

080005b4 <move_snake>:

/* Move snake according to the direction.
 */
// TODO: if snake is ###@, it cannot turn left, but it is not game over...
void move_snake() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	// в массиве snake надо подвинуть все элементы на 1 назад, а на первое место поставить последний в зависимости от dir
	for (int i = snake_length - 1; i > 0; --i) {
 80005ba:	4b45      	ldr	r3, [pc, #276]	; (80006d0 <move_snake+0x11c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	e017      	b.n	80005f4 <move_snake+0x40>
		snake[i][0] = snake[i - 1][0];
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3b01      	subs	r3, #1
 80005c8:	4a42      	ldr	r2, [pc, #264]	; (80006d4 <move_snake+0x120>)
 80005ca:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 80005ce:	4a41      	ldr	r2, [pc, #260]	; (80006d4 <move_snake+0x120>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		snake[i][1] = snake[i - 1][1];
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	3b01      	subs	r3, #1
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <move_snake+0x120>)
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	4413      	add	r3, r2
 80005e0:	7859      	ldrb	r1, [r3, #1]
 80005e2:	4a3c      	ldr	r2, [pc, #240]	; (80006d4 <move_snake+0x120>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	4413      	add	r3, r2
 80005ea:	460a      	mov	r2, r1
 80005ec:	705a      	strb	r2, [r3, #1]
	for (int i = snake_length - 1; i > 0; --i) {
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	dce4      	bgt.n	80005c4 <move_snake+0x10>
	}
	switch (direction) {
 80005fa:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <move_snake+0x124>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d852      	bhi.n	80006a8 <move_snake+0xf4>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <move_snake+0x54>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000685 	.word	0x08000685
 800060c:	08000661 	.word	0x08000661
 8000610:	0800063d 	.word	0x0800063d
 8000614:	08000619 	.word	0x08000619
	// TODO: если змейка с границами, то % 8 не надо. И после move любом случае надо прогонять check_intersections
	case DOWN: {
		snake[0][0] = (snake[1][0] + 1) % 8;
 8000618:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <move_snake+0x120>)
 800061a:	789b      	ldrb	r3, [r3, #2]
 800061c:	3301      	adds	r3, #1
 800061e:	425a      	negs	r2, r3
 8000620:	f003 0307 	and.w	r3, r3, #7
 8000624:	f002 0207 	and.w	r2, r2, #7
 8000628:	bf58      	it	pl
 800062a:	4253      	negpl	r3, r2
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <move_snake+0x120>)
 8000630:	701a      	strb	r2, [r3, #0]
		snake[0][1] = snake[1][1];
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <move_snake+0x120>)
 8000634:	78da      	ldrb	r2, [r3, #3]
 8000636:	4b27      	ldr	r3, [pc, #156]	; (80006d4 <move_snake+0x120>)
 8000638:	705a      	strb	r2, [r3, #1]
		break;
 800063a:	e035      	b.n	80006a8 <move_snake+0xf4>
	}
	case UP: {
		snake[0][0] = (snake[1][0] - 1 + 8) % 8;
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <move_snake+0x120>)
 800063e:	789b      	ldrb	r3, [r3, #2]
 8000640:	3307      	adds	r3, #7
 8000642:	425a      	negs	r2, r3
 8000644:	f003 0307 	and.w	r3, r3, #7
 8000648:	f002 0207 	and.w	r2, r2, #7
 800064c:	bf58      	it	pl
 800064e:	4253      	negpl	r3, r2
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <move_snake+0x120>)
 8000654:	701a      	strb	r2, [r3, #0]
		snake[0][1] = snake[1][1];
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <move_snake+0x120>)
 8000658:	78da      	ldrb	r2, [r3, #3]
 800065a:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <move_snake+0x120>)
 800065c:	705a      	strb	r2, [r3, #1]
		break;
 800065e:	e023      	b.n	80006a8 <move_snake+0xf4>
	}
	case LEFT: {
		snake[0][0] = snake[1][0];
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <move_snake+0x120>)
 8000662:	789a      	ldrb	r2, [r3, #2]
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <move_snake+0x120>)
 8000666:	701a      	strb	r2, [r3, #0]
		snake[0][1] = (snake[1][1] - 1 + 8) % 8;
 8000668:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <move_snake+0x120>)
 800066a:	78db      	ldrb	r3, [r3, #3]
 800066c:	3307      	adds	r3, #7
 800066e:	425a      	negs	r2, r3
 8000670:	f003 0307 	and.w	r3, r3, #7
 8000674:	f002 0207 	and.w	r2, r2, #7
 8000678:	bf58      	it	pl
 800067a:	4253      	negpl	r3, r2
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <move_snake+0x120>)
 8000680:	705a      	strb	r2, [r3, #1]
		break;
 8000682:	e011      	b.n	80006a8 <move_snake+0xf4>
	}
	case RIGHT: {
		snake[0][0] = snake[1][0];
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <move_snake+0x120>)
 8000686:	789a      	ldrb	r2, [r3, #2]
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <move_snake+0x120>)
 800068a:	701a      	strb	r2, [r3, #0]
		snake[0][1] = (snake[1][1] + 1) % 8;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <move_snake+0x120>)
 800068e:	78db      	ldrb	r3, [r3, #3]
 8000690:	3301      	adds	r3, #1
 8000692:	425a      	negs	r2, r3
 8000694:	f003 0307 	and.w	r3, r3, #7
 8000698:	f002 0207 	and.w	r2, r2, #7
 800069c:	bf58      	it	pl
 800069e:	4253      	negpl	r3, r2
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <move_snake+0x120>)
 80006a4:	705a      	strb	r2, [r3, #1]
		break;
 80006a6:	bf00      	nop
	}
	}
	// чтоб картинка поотображалась
	int cnt = 20; // убогий таймер...
 80006a8:	2314      	movs	r3, #20
 80006aa:	603b      	str	r3, [r7, #0]
	while (cnt > 0) {
 80006ac:	e008      	b.n	80006c0 <move_snake+0x10c>
	  render_snake(snake, snake_length);
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <move_snake+0x11c>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	4619      	mov	r1, r3
 80006b4:	4807      	ldr	r0, [pc, #28]	; (80006d4 <move_snake+0x120>)
 80006b6:	f000 fa2b 	bl	8000b10 <render_snake>
	  cnt--;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	3b01      	subs	r3, #1
 80006be:	603b      	str	r3, [r7, #0]
	while (cnt > 0) {
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dcf3      	bgt.n	80006ae <move_snake+0xfa>
	}
	//render_snake(snake, snake_length);
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000080 	.word	0x20000080
 80006d4:	20000084 	.word	0x20000084
 80006d8:	20000106 	.word	0x20000106

080006dc <end_game>:

void end_game(uint8_t res) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	game_flag = 0;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <end_game+0x34>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
	if (res) {
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <end_game+0x1e>
		draw_columns(good_game);
 80006f2:	4808      	ldr	r0, [pc, #32]	; (8000714 <end_game+0x38>)
 80006f4:	f000 f9a4 	bl	8000a40 <draw_columns>
 80006f8:	e002      	b.n	8000700 <end_game+0x24>
	}
	else {
		draw_columns(you_lose);
 80006fa:	4807      	ldr	r0, [pc, #28]	; (8000718 <end_game+0x3c>)
 80006fc:	f000 f9a0 	bl	8000a40 <draw_columns>
	}
	// чтоб картинка висела вечно
	end_game(res);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ffea 	bl	80006dc <end_game>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000104 	.word	0x20000104
 8000714:	20000040 	.word	0x20000040
 8000718:	20000000 	.word	0x20000000

0800071c <check_intersection>:

uint8_t check_intersection() {
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	return 0;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <setup_snake>:
	  snake_length += 1;
	  render_snake(snake, snake_length);
	}
}

void setup_snake() {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
	//render_snake(snake, snake_length);
	// чтоб картинка поотображалась
	int cnt = 20; // убогий таймер...
 8000732:	2314      	movs	r3, #20
 8000734:	607b      	str	r3, [r7, #4]
	while (cnt > 0) {
 8000736:	e008      	b.n	800074a <setup_snake+0x1e>
	  render_snake(snake, snake_length);
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <setup_snake+0x30>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4619      	mov	r1, r3
 800073e:	4808      	ldr	r0, [pc, #32]	; (8000760 <setup_snake+0x34>)
 8000740:	f000 f9e6 	bl	8000b10 <render_snake>
	  cnt--;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
	while (cnt > 0) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	dcf3      	bgt.n	8000738 <setup_snake+0xc>
	}
	// gen apple
}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000080 	.word	0x20000080
 8000760:	20000084 	.word	0x20000084

08000764 <run_snake>:

void run_snake() {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	if (game_flag) {
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <run_snake+0x28>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d00c      	beq.n	800078a <run_snake+0x26>
        move_snake();
 8000770:	f7ff ff20 	bl	80005b4 <move_snake>
		if (check_intersection()) {
 8000774:	f7ff ffd2 	bl	800071c <check_intersection>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d003      	beq.n	8000786 <run_snake+0x22>
			end_game(0);
 800077e:	2000      	movs	r0, #0
 8000780:	f7ff ffac 	bl	80006dc <end_game>
			return;
 8000784:	e001      	b.n	800078a <run_snake+0x26>
		}
		//if (check_apple()) {
		//	longer_snake();
		//}
		run_snake();
 8000786:	f7ff ffed 	bl	8000764 <run_snake>
	}
}
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000104 	.word	0x20000104

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000794:	f000 fabe 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000798:	f000 f808 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079c:	f000 f866 	bl	800086c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  setup_snake();
 80007a0:	f7ff ffc4 	bl	800072c <setup_snake>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    run_snake();
 80007a4:	f7ff ffde 	bl	8000764 <run_snake>
 80007a8:	e7fc      	b.n	80007a4 <main+0x14>
	...

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	; 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2234      	movs	r2, #52	; 0x34
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fb6a 	bl	8001e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <SystemClock_Config+0xb8>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a22      	ldr	r2, [pc, #136]	; (8000864 <SystemClock_Config+0xb8>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <SystemClock_Config+0xb8>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ec:	2300      	movs	r3, #0
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <SystemClock_Config+0xbc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <SystemClock_Config+0xbc>)
 80007fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <SystemClock_Config+0xbc>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080c:	2302      	movs	r3, #2
 800080e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	2301      	movs	r3, #1
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000814:	2310      	movs	r3, #16
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000818:	2300      	movs	r3, #0
 800081a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4618      	mov	r0, r3
 8000822:	f001 f875 	bl	8001910 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800082c:	f000 f903 	bl	8000a36 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fdd0 	bl	80013f0 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000856:	f000 f8ee 	bl	8000a36 <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3750      	adds	r7, #80	; 0x50
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b52      	ldr	r3, [pc, #328]	; (80009d0 <MX_GPIO_Init+0x164>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a51      	ldr	r2, [pc, #324]	; (80009d0 <MX_GPIO_Init+0x164>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b4f      	ldr	r3, [pc, #316]	; (80009d0 <MX_GPIO_Init+0x164>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b4b      	ldr	r3, [pc, #300]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a4a      	ldr	r2, [pc, #296]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b48      	ldr	r3, [pc, #288]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a43      	ldr	r2, [pc, #268]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R3_Pin|R4_Pin|R5_Pin|R8_Pin
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 612e 	mov.w	r1, #2784	; 0xae0
 80008dc:	483d      	ldr	r0, [pc, #244]	; (80009d4 <MX_GPIO_Init+0x168>)
 80008de:	f000 fd55 	bl	800138c <HAL_GPIO_WritePin>
                          |C1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, C8_Pin|R7_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2190      	movs	r1, #144	; 0x90
 80008e6:	483c      	ldr	r0, [pc, #240]	; (80009d8 <MX_GPIO_Init+0x16c>)
 80008e8:	f000 fd50 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C4_Pin|C3_Pin|C2_Pin|C7_Pin
 80008ec:	2200      	movs	r2, #0
 80008ee:	f24f 3146 	movw	r1, #62278	; 0xf346
 80008f2:	483a      	ldr	r0, [pc, #232]	; (80009dc <MX_GPIO_Init+0x170>)
 80008f4:	f000 fd4a 	bl	800138c <HAL_GPIO_WritePin>
                          |C6_Pin|C5_Pin|R6_Pin|R1_Pin
                          |R2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : R3_Pin R4_Pin R5_Pin R8_Pin
                           C1_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R4_Pin|R5_Pin|R8_Pin
 80008f8:	f44f 632e 	mov.w	r3, #2784	; 0xae0
 80008fc:	60fb      	str	r3, [r7, #12]
                          |C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4619      	mov	r1, r3
 8000910:	4830      	ldr	r0, [pc, #192]	; (80009d4 <MX_GPIO_Init+0x168>)
 8000912:	f000 fba7 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : C8_Pin R7_Pin */
  GPIO_InitStruct.Pin = C8_Pin|R7_Pin;
 8000916:	2390      	movs	r3, #144	; 0x90
 8000918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	482a      	ldr	r0, [pc, #168]	; (80009d8 <MX_GPIO_Init+0x16c>)
 800092e:	f000 fb99 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin C2_Pin C7_Pin
                           C6_Pin C5_Pin R6_Pin R1_Pin
                           R2_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin|C2_Pin|C7_Pin
 8000932:	f24f 3346 	movw	r3, #62278	; 0xf346
 8000936:	60fb      	str	r3, [r7, #12]
                          |C6_Pin|C5_Pin|R6_Pin|R1_Pin
                          |R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	4619      	mov	r1, r3
 800094a:	4824      	ldr	r0, [pc, #144]	; (80009dc <MX_GPIO_Init+0x170>)
 800094c:	f000 fb8a 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : Up_Pin Left_Pin Right_Pin */
  GPIO_InitStruct.Pin = Up_Pin|Left_Pin|Right_Pin;
 8000950:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8000954:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000956:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095c:	2301      	movs	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	481d      	ldr	r0, [pc, #116]	; (80009dc <MX_GPIO_Init+0x170>)
 8000968:	f000 fb7c 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : Down_Pin */
  GPIO_InitStruct.Pin = Down_Pin;
 800096c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000978:	2301      	movs	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Down_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4619      	mov	r1, r3
 8000982:	4814      	ldr	r0, [pc, #80]	; (80009d4 <MX_GPIO_Init+0x168>)
 8000984:	f000 fb6e 	bl	8001064 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2009      	movs	r0, #9
 800098e:	f000 fb32 	bl	8000ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000992:	2009      	movs	r0, #9
 8000994:	f000 fb4b 	bl	800102e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	200a      	movs	r0, #10
 800099e:	f000 fb2a 	bl	8000ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009a2:	200a      	movs	r0, #10
 80009a4:	f000 fb43 	bl	800102e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2017      	movs	r0, #23
 80009ae:	f000 fb22 	bl	8000ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009b2:	2017      	movs	r0, #23
 80009b4:	f000 fb3b 	bl	800102e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	2028      	movs	r0, #40	; 0x28
 80009be:	f000 fb1a 	bl	8000ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009c2:	2028      	movs	r0, #40	; 0x28
 80009c4:	f000 fb33 	bl	800102e <HAL_NVIC_EnableIRQ>

}
 80009c8:	bf00      	nop
 80009ca:	3720      	adds	r7, #32
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40020400 	.word	0x40020400

080009e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) {
 80009ea:	88fb      	ldrh	r3, [r7, #6]
 80009ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009f0:	d00d      	beq.n	8000a0e <HAL_GPIO_EXTI_Callback+0x2e>
 80009f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009f6:	dc1a      	bgt.n	8000a2e <HAL_GPIO_EXTI_Callback+0x4e>
 80009f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009fc:	d00b      	beq.n	8000a16 <HAL_GPIO_EXTI_Callback+0x36>
 80009fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a02:	dc14      	bgt.n	8000a2e <HAL_GPIO_EXTI_Callback+0x4e>
 8000a04:	2b08      	cmp	r3, #8
 8000a06:	d00e      	beq.n	8000a26 <HAL_GPIO_EXTI_Callback+0x46>
 8000a08:	2b10      	cmp	r3, #16
 8000a0a:	d008      	beq.n	8000a1e <HAL_GPIO_EXTI_Callback+0x3e>
  default: {
	  _NOP();
	  break;
  }*/
  }
}
 8000a0c:	e00f      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x4e>
	  set_direction(UP);
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f7ff fd7a 	bl	8000508 <set_direction>
	  break;
 8000a14:	e00b      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x4e>
	  set_direction(DOWN);
 8000a16:	2003      	movs	r0, #3
 8000a18:	f7ff fd76 	bl	8000508 <set_direction>
	  break;
 8000a1c:	e007      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x4e>
	  set_direction(RIGHT);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff fd72 	bl	8000508 <set_direction>
  	  break;
 8000a24:	e003      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x4e>
	  set_direction(LEFT);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f7ff fd6e 	bl	8000508 <set_direction>
  	  break;
 8000a2c:	bf00      	nop
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3a:	b672      	cpsid	i
}
 8000a3c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <Error_Handler+0x8>

08000a40 <draw_columns>:
GPIO_TypeDef *col_ports[] = {C1_GPIO_Port, C2_GPIO_Port, C3_GPIO_Port, C4_GPIO_Port,
    C5_GPIO_Port, C6_GPIO_Port, C7_GPIO_Port, C8_GPIO_Port};

/* Draw matrix column by column.
 */
void draw_columns(uint8_t matrix[8][8]) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	for (uint8_t j = 0; j < 8; ++j) {
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]
 8000a4c:	e04f      	b.n	8000aee <draw_columns+0xae>
		// activate the row
		HAL_GPIO_WritePin(col_ports[j], cols[j], GPIO_PIN_RESET);
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	4a2b      	ldr	r2, [pc, #172]	; (8000b00 <draw_columns+0xc0>)
 8000a52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	4a2a      	ldr	r2, [pc, #168]	; (8000b04 <draw_columns+0xc4>)
 8000a5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	4619      	mov	r1, r3
 8000a62:	f000 fc93 	bl	800138c <HAL_GPIO_WritePin>
		// draw all rows of the column
		for (uint8_t i = 0; i < 8; ++i) {
 8000a66:	2300      	movs	r3, #0
 8000a68:	73bb      	strb	r3, [r7, #14]
 8000a6a:	e016      	b.n	8000a9a <draw_columns+0x5a>
			if (matrix[i][j]) {
 8000a6c:	7bbb      	ldrb	r3, [r7, #14]
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	441a      	add	r2, r3
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	5cd3      	ldrb	r3, [r2, r3]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00b      	beq.n	8000a94 <draw_columns+0x54>
				HAL_GPIO_WritePin(row_ports[i], rows[i], GPIO_PIN_SET);
 8000a7c:	7bbb      	ldrb	r3, [r7, #14]
 8000a7e:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <draw_columns+0xc8>)
 8000a80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a84:	7bbb      	ldrb	r3, [r7, #14]
 8000a86:	4a21      	ldr	r2, [pc, #132]	; (8000b0c <draw_columns+0xcc>)
 8000a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f000 fc7c 	bl	800138c <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < 8; ++i) {
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	3301      	adds	r3, #1
 8000a98:	73bb      	strb	r3, [r7, #14]
 8000a9a:	7bbb      	ldrb	r3, [r7, #14]
 8000a9c:	2b07      	cmp	r3, #7
 8000a9e:	d9e5      	bls.n	8000a6c <draw_columns+0x2c>
			}
		}
		HAL_Delay(1);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f000 f9a9 	bl	8000df8 <HAL_Delay>
		// turn off all the leds of this column
		for (uint8_t i = 0; i < 8; ++i) {
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	737b      	strb	r3, [r7, #13]
 8000aaa:	e00e      	b.n	8000aca <draw_columns+0x8a>
			HAL_GPIO_WritePin(row_ports[i], rows[i], GPIO_PIN_RESET);
 8000aac:	7b7b      	ldrb	r3, [r7, #13]
 8000aae:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <draw_columns+0xc8>)
 8000ab0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ab4:	7b7b      	ldrb	r3, [r7, #13]
 8000ab6:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <draw_columns+0xcc>)
 8000ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000abc:	2200      	movs	r2, #0
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f000 fc64 	bl	800138c <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < 8; ++i) {
 8000ac4:	7b7b      	ldrb	r3, [r7, #13]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	737b      	strb	r3, [r7, #13]
 8000aca:	7b7b      	ldrb	r3, [r7, #13]
 8000acc:	2b07      	cmp	r3, #7
 8000ace:	d9ed      	bls.n	8000aac <draw_columns+0x6c>
		}
		//deactivate the row
		HAL_GPIO_WritePin(col_ports[j], cols[j], GPIO_PIN_SET);
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <draw_columns+0xc0>)
 8000ad4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <draw_columns+0xc4>)
 8000adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f000 fc52 	bl	800138c <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 8; ++j) {
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	3301      	adds	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	2b07      	cmp	r3, #7
 8000af2:	d9ac      	bls.n	8000a4e <draw_columns+0xe>
	}
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000148 	.word	0x20000148
 8000b04:	20000118 	.word	0x20000118
 8000b08:	20000128 	.word	0x20000128
 8000b0c:	20000108 	.word	0x20000108

08000b10 <render_snake>:

/* TODO: add apple
 */
void render_snake(uint8_t snake[64][2], uint8_t length) {
 8000b10:	b5b0      	push	{r4, r5, r7, lr}
 8000b12:	b094      	sub	sp, #80	; 0x50
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	70fb      	strb	r3, [r7, #3]
	uint8_t frame[8][8] = {
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <render_snake+0x8c>)
 8000b1e:	f107 040c 	add.w	r4, r7, #12
 8000b22:	461d      	mov	r5, r3
 8000b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0}
	};
	for (uint8_t i = 0; i < 3; ++i) {
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000b3e:	e01f      	b.n	8000b80 <render_snake+0x70>
		uint8_t row = snake[i][0],
 8000b40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		    col = snake[i][1];
 8000b50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	785b      	ldrb	r3, [r3, #1]
 8000b5c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		frame[row][col] = 1;
 8000b60:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8000b64:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000b68:	00d2      	lsls	r2, r2, #3
 8000b6a:	3250      	adds	r2, #80	; 0x50
 8000b6c:	443a      	add	r2, r7
 8000b6e:	4413      	add	r3, r2
 8000b70:	3b44      	subs	r3, #68	; 0x44
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; ++i) {
 8000b76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000b80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d9db      	bls.n	8000b40 <render_snake+0x30>
	}
	draw_columns(frame);
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff57 	bl	8000a40 <draw_columns>

	while ((clock() - time) / CLOCKS_PER_SEC < 1) {
	render_snake(snake, snake_length);
	}
	*/
}
 8000b92:	bf00      	nop
 8000b94:	3750      	adds	r7, #80	; 0x50
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bdb0      	pop	{r4, r5, r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	08001ebc 	.word	0x08001ebc

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x4c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 f8bc 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_Pin);
 8000c48:	2008      	movs	r0, #8
 8000c4a:	f000 fbb9 	bl	80013c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  HAL_GPIO_EXTI_Callback(Left_Pin);
 8000c4e:	2008      	movs	r0, #8
 8000c50:	f7ff fec6 	bl	80009e0 <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_Pin);
 8000c5c:	2010      	movs	r0, #16
 8000c5e:	f000 fbaf 	bl	80013c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  HAL_GPIO_EXTI_Callback(Right_Pin);
 8000c62:	2010      	movs	r0, #16
 8000c64:	f7ff febc 	bl	80009e0 <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI4_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Down_Pin);
 8000c70:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c74:	f000 fba4 	bl	80013c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  HAL_GPIO_EXTI_Callback(Down_Pin);
 8000c78:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c7c:	f7ff feb0 	bl	80009e0 <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Up_Pin);
 8000c88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c8c:	f000 fb98 	bl	80013c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  HAL_GPIO_EXTI_Callback(Up_Pin);
 8000c90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c94:	f7ff fea4 	bl	80009e0 <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cc6:	490e      	ldr	r1, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cdc:	4c0b      	ldr	r4, [pc, #44]	; (8000d0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cea:	f7ff ffd7 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f001 f8ad 	bl	8001e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fd4d 	bl	8000790 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000d04:	08001f1c 	.word	0x08001f1c
  ldr r2, =_sbss
 8000d08:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000d0c:	20000194 	.word	0x20000194

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f94f 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	200f      	movs	r0, #15
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff ff2a 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f967 	bl	800104a <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f92f 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000168 	.word	0x20000168
 8000db0:	20000170 	.word	0x20000170
 8000db4:	2000016c 	.word	0x2000016c

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000170 	.word	0x20000170
 8000ddc:	20000190 	.word	0x20000190

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000190 	.word	0x20000190

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000170 	.word	0x20000170

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	; (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	; (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff29 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff3e 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff8e 	bl	8000f34 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff31 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffa2 	bl	8000f9c <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	e165      	b.n	800134c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	f040 8154 	bne.w	8001346 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d005      	beq.n	80010b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d130      	bne.n	8001118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	f003 0201 	and.w	r2, r3, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b03      	cmp	r3, #3
 8001122:	d017      	beq.n	8001154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d123      	bne.n	80011a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3208      	adds	r2, #8
 80011a2:	69b9      	ldr	r1, [r7, #24]
 80011a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0203 	and.w	r2, r3, #3
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80ae 	beq.w	8001346 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <HAL_GPIO_Init+0x300>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a5c      	ldr	r2, [pc, #368]	; (8001364 <HAL_GPIO_Init+0x300>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b5a      	ldr	r3, [pc, #360]	; (8001364 <HAL_GPIO_Init+0x300>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001206:	4a58      	ldr	r2, [pc, #352]	; (8001368 <HAL_GPIO_Init+0x304>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4f      	ldr	r2, [pc, #316]	; (800136c <HAL_GPIO_Init+0x308>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d025      	beq.n	800127e <HAL_GPIO_Init+0x21a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4e      	ldr	r2, [pc, #312]	; (8001370 <HAL_GPIO_Init+0x30c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d01f      	beq.n	800127a <HAL_GPIO_Init+0x216>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4d      	ldr	r2, [pc, #308]	; (8001374 <HAL_GPIO_Init+0x310>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d019      	beq.n	8001276 <HAL_GPIO_Init+0x212>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4c      	ldr	r2, [pc, #304]	; (8001378 <HAL_GPIO_Init+0x314>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x20e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4b      	ldr	r2, [pc, #300]	; (800137c <HAL_GPIO_Init+0x318>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x20a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4a      	ldr	r2, [pc, #296]	; (8001380 <HAL_GPIO_Init+0x31c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x206>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a49      	ldr	r2, [pc, #292]	; (8001384 <HAL_GPIO_Init+0x320>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x202>
 8001262:	2306      	movs	r3, #6
 8001264:	e00c      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 8001266:	2307      	movs	r3, #7
 8001268:	e00a      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 800126a:	2305      	movs	r3, #5
 800126c:	e008      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 800126e:	2304      	movs	r3, #4
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 8001272:	2303      	movs	r3, #3
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 800127e:	2300      	movs	r3, #0
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f002 0203 	and.w	r2, r2, #3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4093      	lsls	r3, r2
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001290:	4935      	ldr	r1, [pc, #212]	; (8001368 <HAL_GPIO_Init+0x304>)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c2:	4a31      	ldr	r2, [pc, #196]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ec:	4a26      	ldr	r2, [pc, #152]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <HAL_GPIO_Init+0x324>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_GPIO_Init+0x324>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001340:	4a11      	ldr	r2, [pc, #68]	; (8001388 <HAL_GPIO_Init+0x324>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	f67f ae96 	bls.w	8001080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40013800 	.word	0x40013800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40021000 	.word	0x40021000
 8001380:	40021400 	.word	0x40021400
 8001384:	40021800 	.word	0x40021800
 8001388:	40013c00 	.word	0x40013c00

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a8:	e003      	b.n	80013b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	041a      	lsls	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	619a      	str	r2, [r3, #24]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013cc:	695a      	ldr	r2, [r3, #20]
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fafe 	bl	80009e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40013c00 	.word	0x40013c00

080013f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0cc      	b.n	800159e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001404:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 030f 	and.w	r3, r3, #15
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d90c      	bls.n	800142c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001412:	4b65      	ldr	r3, [pc, #404]	; (80015a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141a:	4b63      	ldr	r3, [pc, #396]	; (80015a8 <HAL_RCC_ClockConfig+0x1b8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d001      	beq.n	800142c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0b8      	b.n	800159e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d020      	beq.n	800147a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001444:	4b59      	ldr	r3, [pc, #356]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4a58      	ldr	r2, [pc, #352]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800144e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800145c:	4b53      	ldr	r3, [pc, #332]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4a52      	ldr	r2, [pc, #328]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001468:	4b50      	ldr	r3, [pc, #320]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	494d      	ldr	r1, [pc, #308]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	4313      	orrs	r3, r2
 8001478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d044      	beq.n	8001510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	4b47      	ldr	r3, [pc, #284]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d119      	bne.n	80014ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e07f      	b.n	800159e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d003      	beq.n	80014ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d107      	bne.n	80014be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ae:	4b3f      	ldr	r3, [pc, #252]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d109      	bne.n	80014ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e06f      	b.n	800159e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014be:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e067      	b.n	800159e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ce:	4b37      	ldr	r3, [pc, #220]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f023 0203 	bic.w	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4934      	ldr	r1, [pc, #208]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e0:	f7ff fc7e 	bl	8000de0 <HAL_GetTick>
 80014e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e6:	e00a      	b.n	80014fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e8:	f7ff fc7a 	bl	8000de0 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e04f      	b.n	800159e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fe:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 020c 	and.w	r2, r3, #12
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	429a      	cmp	r2, r3
 800150e:	d1eb      	bne.n	80014e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d20c      	bcs.n	8001538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151e:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d001      	beq.n	8001538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e032      	b.n	800159e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4916      	ldr	r1, [pc, #88]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	4313      	orrs	r3, r2
 8001554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d009      	beq.n	8001576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	490e      	ldr	r1, [pc, #56]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	4313      	orrs	r3, r2
 8001574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001576:	f000 f821 	bl	80015bc <HAL_RCC_GetSysClockFreq>
 800157a:	4602      	mov	r2, r0
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	490a      	ldr	r1, [pc, #40]	; (80015b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	5ccb      	ldrb	r3, [r1, r3]
 800158a:	fa22 f303 	lsr.w	r3, r2, r3
 800158e:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fbde 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023c00 	.word	0x40023c00
 80015ac:	40023800 	.word	0x40023800
 80015b0:	08001efc 	.word	0x08001efc
 80015b4:	20000168 	.word	0x20000168
 80015b8:	2000016c 	.word	0x2000016c

080015bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015c0:	b0a6      	sub	sp, #152	; 0x98
 80015c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015e2:	4bc8      	ldr	r3, [pc, #800]	; (8001904 <HAL_RCC_GetSysClockFreq+0x348>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	f200 817e 	bhi.w	80018ec <HAL_RCC_GetSysClockFreq+0x330>
 80015f0:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	0800162d 	.word	0x0800162d
 80015fc:	080018ed 	.word	0x080018ed
 8001600:	080018ed 	.word	0x080018ed
 8001604:	080018ed 	.word	0x080018ed
 8001608:	08001635 	.word	0x08001635
 800160c:	080018ed 	.word	0x080018ed
 8001610:	080018ed 	.word	0x080018ed
 8001614:	080018ed 	.word	0x080018ed
 8001618:	0800163d 	.word	0x0800163d
 800161c:	080018ed 	.word	0x080018ed
 8001620:	080018ed 	.word	0x080018ed
 8001624:	080018ed 	.word	0x080018ed
 8001628:	080017a7 	.word	0x080017a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800162c:	4bb6      	ldr	r3, [pc, #728]	; (8001908 <HAL_RCC_GetSysClockFreq+0x34c>)
 800162e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001632:	e15f      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001634:	4bb5      	ldr	r3, [pc, #724]	; (800190c <HAL_RCC_GetSysClockFreq+0x350>)
 8001636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800163a:	e15b      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800163c:	4bb1      	ldr	r3, [pc, #708]	; (8001904 <HAL_RCC_GetSysClockFreq+0x348>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001644:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001648:	4bae      	ldr	r3, [pc, #696]	; (8001904 <HAL_RCC_GetSysClockFreq+0x348>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d031      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001654:	4bab      	ldr	r3, [pc, #684]	; (8001904 <HAL_RCC_GetSysClockFreq+0x348>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	099b      	lsrs	r3, r3, #6
 800165a:	2200      	movs	r2, #0
 800165c:	66bb      	str	r3, [r7, #104]	; 0x68
 800165e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001666:	663b      	str	r3, [r7, #96]	; 0x60
 8001668:	2300      	movs	r3, #0
 800166a:	667b      	str	r3, [r7, #100]	; 0x64
 800166c:	4ba7      	ldr	r3, [pc, #668]	; (800190c <HAL_RCC_GetSysClockFreq+0x350>)
 800166e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001672:	462a      	mov	r2, r5
 8001674:	fb03 f202 	mul.w	r2, r3, r2
 8001678:	2300      	movs	r3, #0
 800167a:	4621      	mov	r1, r4
 800167c:	fb01 f303 	mul.w	r3, r1, r3
 8001680:	4413      	add	r3, r2
 8001682:	4aa2      	ldr	r2, [pc, #648]	; (800190c <HAL_RCC_GetSysClockFreq+0x350>)
 8001684:	4621      	mov	r1, r4
 8001686:	fba1 1202 	umull	r1, r2, r1, r2
 800168a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800168c:	460a      	mov	r2, r1
 800168e:	67ba      	str	r2, [r7, #120]	; 0x78
 8001690:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001692:	4413      	add	r3, r2
 8001694:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800169a:	2200      	movs	r2, #0
 800169c:	65bb      	str	r3, [r7, #88]	; 0x58
 800169e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80016a8:	f7fe fdac 	bl	8000204 <__aeabi_uldivmod>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4613      	mov	r3, r2
 80016b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016b6:	e064      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b8:	4b92      	ldr	r3, [pc, #584]	; (8001904 <HAL_RCC_GetSysClockFreq+0x348>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	2200      	movs	r2, #0
 80016c0:	653b      	str	r3, [r7, #80]	; 0x50
 80016c2:	657a      	str	r2, [r7, #84]	; 0x54
 80016c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80016cc:	2300      	movs	r3, #0
 80016ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016d0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80016d4:	4622      	mov	r2, r4
 80016d6:	462b      	mov	r3, r5
 80016d8:	f04f 0000 	mov.w	r0, #0
 80016dc:	f04f 0100 	mov.w	r1, #0
 80016e0:	0159      	lsls	r1, r3, #5
 80016e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e6:	0150      	lsls	r0, r2, #5
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4621      	mov	r1, r4
 80016ee:	1a51      	subs	r1, r2, r1
 80016f0:	6139      	str	r1, [r7, #16]
 80016f2:	4629      	mov	r1, r5
 80016f4:	eb63 0301 	sbc.w	r3, r3, r1
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001706:	4659      	mov	r1, fp
 8001708:	018b      	lsls	r3, r1, #6
 800170a:	4651      	mov	r1, sl
 800170c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001710:	4651      	mov	r1, sl
 8001712:	018a      	lsls	r2, r1, #6
 8001714:	4651      	mov	r1, sl
 8001716:	ebb2 0801 	subs.w	r8, r2, r1
 800171a:	4659      	mov	r1, fp
 800171c:	eb63 0901 	sbc.w	r9, r3, r1
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800172c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001730:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001734:	4690      	mov	r8, r2
 8001736:	4699      	mov	r9, r3
 8001738:	4623      	mov	r3, r4
 800173a:	eb18 0303 	adds.w	r3, r8, r3
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	462b      	mov	r3, r5
 8001742:	eb49 0303 	adc.w	r3, r9, r3
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001754:	4629      	mov	r1, r5
 8001756:	028b      	lsls	r3, r1, #10
 8001758:	4621      	mov	r1, r4
 800175a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800175e:	4621      	mov	r1, r4
 8001760:	028a      	lsls	r2, r1, #10
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800176a:	2200      	movs	r2, #0
 800176c:	643b      	str	r3, [r7, #64]	; 0x40
 800176e:	647a      	str	r2, [r7, #68]	; 0x44
 8001770:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001774:	f7fe fd46 	bl	8000204 <__aeabi_uldivmod>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4613      	mov	r3, r2
 800177e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001782:	4b60      	ldr	r3, [pc, #384]	; (8001904 <HAL_RCC_GetSysClockFreq+0x348>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	3301      	adds	r3, #1
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001794:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800179c:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80017a4:	e0a6      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a6:	4b57      	ldr	r3, [pc, #348]	; (8001904 <HAL_RCC_GetSysClockFreq+0x348>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017b2:	4b54      	ldr	r3, [pc, #336]	; (8001904 <HAL_RCC_GetSysClockFreq+0x348>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d02a      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017be:	4b51      	ldr	r3, [pc, #324]	; (8001904 <HAL_RCC_GetSysClockFreq+0x348>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	099b      	lsrs	r3, r3, #6
 80017c4:	2200      	movs	r2, #0
 80017c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017d0:	2100      	movs	r1, #0
 80017d2:	4b4e      	ldr	r3, [pc, #312]	; (800190c <HAL_RCC_GetSysClockFreq+0x350>)
 80017d4:	fb03 f201 	mul.w	r2, r3, r1
 80017d8:	2300      	movs	r3, #0
 80017da:	fb00 f303 	mul.w	r3, r0, r3
 80017de:	4413      	add	r3, r2
 80017e0:	4a4a      	ldr	r2, [pc, #296]	; (800190c <HAL_RCC_GetSysClockFreq+0x350>)
 80017e2:	fba0 1202 	umull	r1, r2, r0, r2
 80017e6:	677a      	str	r2, [r7, #116]	; 0x74
 80017e8:	460a      	mov	r2, r1
 80017ea:	673a      	str	r2, [r7, #112]	; 0x70
 80017ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80017ee:	4413      	add	r3, r2
 80017f0:	677b      	str	r3, [r7, #116]	; 0x74
 80017f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017f6:	2200      	movs	r2, #0
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
 80017fa:	637a      	str	r2, [r7, #52]	; 0x34
 80017fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001800:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001804:	f7fe fcfe 	bl	8000204 <__aeabi_uldivmod>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4613      	mov	r3, r2
 800180e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001812:	e05b      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001814:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <HAL_RCC_GetSysClockFreq+0x348>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	2200      	movs	r2, #0
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
 800181e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001826:	623b      	str	r3, [r7, #32]
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
 800182c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001830:	4642      	mov	r2, r8
 8001832:	464b      	mov	r3, r9
 8001834:	f04f 0000 	mov.w	r0, #0
 8001838:	f04f 0100 	mov.w	r1, #0
 800183c:	0159      	lsls	r1, r3, #5
 800183e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001842:	0150      	lsls	r0, r2, #5
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4641      	mov	r1, r8
 800184a:	ebb2 0a01 	subs.w	sl, r2, r1
 800184e:	4649      	mov	r1, r9
 8001850:	eb63 0b01 	sbc.w	fp, r3, r1
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001860:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001864:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001868:	ebb2 040a 	subs.w	r4, r2, sl
 800186c:	eb63 050b 	sbc.w	r5, r3, fp
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	00eb      	lsls	r3, r5, #3
 800187a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800187e:	00e2      	lsls	r2, r4, #3
 8001880:	4614      	mov	r4, r2
 8001882:	461d      	mov	r5, r3
 8001884:	4643      	mov	r3, r8
 8001886:	18e3      	adds	r3, r4, r3
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	464b      	mov	r3, r9
 800188c:	eb45 0303 	adc.w	r3, r5, r3
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800189e:	4629      	mov	r1, r5
 80018a0:	028b      	lsls	r3, r1, #10
 80018a2:	4621      	mov	r1, r4
 80018a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018a8:	4621      	mov	r1, r4
 80018aa:	028a      	lsls	r2, r1, #10
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018b4:	2200      	movs	r2, #0
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	61fa      	str	r2, [r7, #28]
 80018ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018be:	f7fe fca1 	bl	8000204 <__aeabi_uldivmod>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4613      	mov	r3, r2
 80018c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018cc:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <HAL_RCC_GetSysClockFreq+0x348>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	0f1b      	lsrs	r3, r3, #28
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80018da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80018de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80018ea:	e003      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_RCC_GetSysClockFreq+0x34c>)
 80018ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80018f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3798      	adds	r7, #152	; 0x98
 80018fc:	46bd      	mov	sp, r7
 80018fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	00f42400 	.word	0x00f42400
 800190c:	017d7840 	.word	0x017d7840

08001910 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e28d      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8083 	beq.w	8001a36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001930:	4b94      	ldr	r3, [pc, #592]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b04      	cmp	r3, #4
 800193a:	d019      	beq.n	8001970 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800193c:	4b91      	ldr	r3, [pc, #580]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001944:	2b08      	cmp	r3, #8
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001948:	4b8e      	ldr	r3, [pc, #568]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001954:	d00c      	beq.n	8001970 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001956:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d112      	bne.n	8001988 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800196e:	d10b      	bne.n	8001988 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	4b84      	ldr	r3, [pc, #528]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d05b      	beq.n	8001a34 <HAL_RCC_OscConfig+0x124>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d157      	bne.n	8001a34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e25a      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001990:	d106      	bne.n	80019a0 <HAL_RCC_OscConfig+0x90>
 8001992:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7b      	ldr	r2, [pc, #492]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e01d      	b.n	80019dc <HAL_RCC_OscConfig+0xcc>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0xb4>
 80019aa:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a75      	ldr	r2, [pc, #468]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a72      	ldr	r2, [pc, #456]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e00b      	b.n	80019dc <HAL_RCC_OscConfig+0xcc>
 80019c4:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a6e      	ldr	r2, [pc, #440]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b6c      	ldr	r3, [pc, #432]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a6b      	ldr	r2, [pc, #428]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f9fc 	bl	8000de0 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff f9f8 	bl	8000de0 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e21f      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b61      	ldr	r3, [pc, #388]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0xdc>
 8001a0a:	e014      	b.n	8001a36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f9e8 	bl	8000de0 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff f9e4 	bl	8000de0 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e20b      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a26:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x104>
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d06f      	beq.n	8001b22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a42:	4b50      	ldr	r3, [pc, #320]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d017      	beq.n	8001a7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a4e:	4b4d      	ldr	r3, [pc, #308]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d105      	bne.n	8001a66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a5a:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00b      	beq.n	8001a7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a66:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	d11c      	bne.n	8001aac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a72:	4b44      	ldr	r3, [pc, #272]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d116      	bne.n	8001aac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_RCC_OscConfig+0x186>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e1d3      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a96:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4937      	ldr	r1, [pc, #220]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aaa:	e03a      	b.n	8001b22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab4:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <HAL_RCC_OscConfig+0x278>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff f991 	bl	8000de0 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7ff f98d 	bl	8000de0 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e1b4      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae0:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4925      	ldr	r1, [pc, #148]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
 8001af4:	e015      	b.n	8001b22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_RCC_OscConfig+0x278>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff f970 	bl	8000de0 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b04:	f7ff f96c 	bl	8000de0 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e193      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d036      	beq.n	8001b9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d016      	beq.n	8001b64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f950 	bl	8000de0 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b44:	f7ff f94c 	bl	8000de0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e173      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x234>
 8001b62:	e01b      	b.n	8001b9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff f939 	bl	8000de0 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b70:	e00e      	b.n	8001b90 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b72:	f7ff f935 	bl	8000de0 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d907      	bls.n	8001b90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e15c      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
 8001b84:	40023800 	.word	0x40023800
 8001b88:	42470000 	.word	0x42470000
 8001b8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	4b8a      	ldr	r3, [pc, #552]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1ea      	bne.n	8001b72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 8097 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bae:	4b83      	ldr	r3, [pc, #524]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10f      	bne.n	8001bda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b7f      	ldr	r3, [pc, #508]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a7e      	ldr	r2, [pc, #504]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b7c      	ldr	r3, [pc, #496]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bda:	4b79      	ldr	r3, [pc, #484]	; (8001dc0 <HAL_RCC_OscConfig+0x4b0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d118      	bne.n	8001c18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be6:	4b76      	ldr	r3, [pc, #472]	; (8001dc0 <HAL_RCC_OscConfig+0x4b0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a75      	ldr	r2, [pc, #468]	; (8001dc0 <HAL_RCC_OscConfig+0x4b0>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff f8f5 	bl	8000de0 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfa:	f7ff f8f1 	bl	8000de0 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e118      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0c:	4b6c      	ldr	r3, [pc, #432]	; (8001dc0 <HAL_RCC_OscConfig+0x4b0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d106      	bne.n	8001c2e <HAL_RCC_OscConfig+0x31e>
 8001c20:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	4a65      	ldr	r2, [pc, #404]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2c:	e01c      	b.n	8001c68 <HAL_RCC_OscConfig+0x358>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x340>
 8001c36:	4b61      	ldr	r3, [pc, #388]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	4a60      	ldr	r2, [pc, #384]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6713      	str	r3, [r2, #112]	; 0x70
 8001c42:	4b5e      	ldr	r3, [pc, #376]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c46:	4a5d      	ldr	r2, [pc, #372]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0x358>
 8001c50:	4b5a      	ldr	r3, [pc, #360]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c54:	4a59      	ldr	r2, [pc, #356]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5c:	4b57      	ldr	r3, [pc, #348]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	4a56      	ldr	r2, [pc, #344]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c62:	f023 0304 	bic.w	r3, r3, #4
 8001c66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d015      	beq.n	8001c9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff f8b6 	bl	8000de0 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c78:	f7ff f8b2 	bl	8000de0 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e0d7      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8e:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0ee      	beq.n	8001c78 <HAL_RCC_OscConfig+0x368>
 8001c9a:	e014      	b.n	8001cc6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7ff f8a0 	bl	8000de0 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca4:	f7ff f89c 	bl	8000de0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e0c1      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cba:	4b40      	ldr	r3, [pc, #256]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1ee      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cc6:	7dfb      	ldrb	r3, [r7, #23]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d105      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ccc:	4b3b      	ldr	r3, [pc, #236]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	4a3a      	ldr	r2, [pc, #232]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80ad 	beq.w	8001e3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ce2:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d060      	beq.n	8001db0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d145      	bne.n	8001d82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf6:	4b33      	ldr	r3, [pc, #204]	; (8001dc4 <HAL_RCC_OscConfig+0x4b4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff f870 	bl	8000de0 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff f86c 	bl	8000de0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e093      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d16:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69da      	ldr	r2, [r3, #28]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	019b      	lsls	r3, r3, #6
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	085b      	lsrs	r3, r3, #1
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	041b      	lsls	r3, r3, #16
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	061b      	lsls	r3, r3, #24
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	071b      	lsls	r3, r3, #28
 8001d4e:	491b      	ldr	r1, [pc, #108]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCC_OscConfig+0x4b4>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5a:	f7ff f841 	bl	8000de0 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d62:	f7ff f83d 	bl	8000de0 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e064      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x452>
 8001d80:	e05c      	b.n	8001e3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_RCC_OscConfig+0x4b4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff f82a 	bl	8000de0 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d90:	f7ff f826 	bl	8000de0 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e04d      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x480>
 8001dae:	e045      	b.n	8001e3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e040      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dc8:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <HAL_RCC_OscConfig+0x538>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d030      	beq.n	8001e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d129      	bne.n	8001e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d122      	bne.n	8001e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001df8:	4013      	ands	r3, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d119      	bne.n	8001e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	085b      	lsrs	r3, r3, #1
 8001e10:	3b01      	subs	r3, #1
 8001e12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d10f      	bne.n	8001e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d107      	bne.n	8001e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800

08001e4c <__libc_init_array>:
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	4d0d      	ldr	r5, [pc, #52]	; (8001e84 <__libc_init_array+0x38>)
 8001e50:	4c0d      	ldr	r4, [pc, #52]	; (8001e88 <__libc_init_array+0x3c>)
 8001e52:	1b64      	subs	r4, r4, r5
 8001e54:	10a4      	asrs	r4, r4, #2
 8001e56:	2600      	movs	r6, #0
 8001e58:	42a6      	cmp	r6, r4
 8001e5a:	d109      	bne.n	8001e70 <__libc_init_array+0x24>
 8001e5c:	4d0b      	ldr	r5, [pc, #44]	; (8001e8c <__libc_init_array+0x40>)
 8001e5e:	4c0c      	ldr	r4, [pc, #48]	; (8001e90 <__libc_init_array+0x44>)
 8001e60:	f000 f820 	bl	8001ea4 <_init>
 8001e64:	1b64      	subs	r4, r4, r5
 8001e66:	10a4      	asrs	r4, r4, #2
 8001e68:	2600      	movs	r6, #0
 8001e6a:	42a6      	cmp	r6, r4
 8001e6c:	d105      	bne.n	8001e7a <__libc_init_array+0x2e>
 8001e6e:	bd70      	pop	{r4, r5, r6, pc}
 8001e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e74:	4798      	blx	r3
 8001e76:	3601      	adds	r6, #1
 8001e78:	e7ee      	b.n	8001e58 <__libc_init_array+0xc>
 8001e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e7e:	4798      	blx	r3
 8001e80:	3601      	adds	r6, #1
 8001e82:	e7f2      	b.n	8001e6a <__libc_init_array+0x1e>
 8001e84:	08001f14 	.word	0x08001f14
 8001e88:	08001f14 	.word	0x08001f14
 8001e8c:	08001f14 	.word	0x08001f14
 8001e90:	08001f18 	.word	0x08001f18

08001e94 <memset>:
 8001e94:	4402      	add	r2, r0
 8001e96:	4603      	mov	r3, r0
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d100      	bne.n	8001e9e <memset+0xa>
 8001e9c:	4770      	bx	lr
 8001e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8001ea2:	e7f9      	b.n	8001e98 <memset+0x4>

08001ea4 <_init>:
 8001ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea6:	bf00      	nop
 8001ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eaa:	bc08      	pop	{r3}
 8001eac:	469e      	mov	lr, r3
 8001eae:	4770      	bx	lr

08001eb0 <_fini>:
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	bf00      	nop
 8001eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb6:	bc08      	pop	{r3}
 8001eb8:	469e      	mov	lr, r3
 8001eba:	4770      	bx	lr
