
003Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003630  08003630  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08003630  08003630  00013630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003638  08003638  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003638  08003638  00013638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800363c  0800363c  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08003640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  200001d8  08003818  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08003818  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005703  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015e0  00000000  00000000  0002590b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e0  00000000  00000000  00026ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000508  00000000  00000000  000274d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c63  00000000  00000000  000279d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007cd2  00000000  00000000  0004963b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7364  00000000  00000000  0005130d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118671  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f10  00000000  00000000  001186c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003480 	.word	0x08003480

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08003480 	.word	0x08003480

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <generate_apple>:
enum dir prev = UP, direction = DOWN;

/* Set a target for snake.
 * Call this function in setup & when apple is eaten.
 */
void generate_apple() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	apple_x = rand() % 8;
 80005ba:	f001 ff25 	bl	8002408 <rand>
 80005be:	4603      	mov	r3, r0
 80005c0:	425a      	negs	r2, r3
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	f002 0207 	and.w	r2, r2, #7
 80005ca:	bf58      	it	pl
 80005cc:	4253      	negpl	r3, r2
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <generate_apple+0x84>)
 80005d2:	701a      	strb	r2, [r3, #0]
	apple_y = rand() % 8;
 80005d4:	f001 ff18 	bl	8002408 <rand>
 80005d8:	4603      	mov	r3, r0
 80005da:	425a      	negs	r2, r3
 80005dc:	f003 0307 	and.w	r3, r3, #7
 80005e0:	f002 0207 	and.w	r2, r2, #7
 80005e4:	bf58      	it	pl
 80005e6:	4253      	negpl	r3, r2
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <generate_apple+0x88>)
 80005ec:	701a      	strb	r2, [r3, #0]
	// apple cannot spawn in snake
	for (int i = 0; i < snake_length; ++i) {
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	e015      	b.n	8000620 <generate_apple+0x6c>
		if (apple_x == snake[i][0] && apple_y == snake[i][1]) {
 80005f4:	4a12      	ldr	r2, [pc, #72]	; (8000640 <generate_apple+0x8c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <generate_apple+0x84>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	429a      	cmp	r2, r3
 8000602:	d10a      	bne.n	800061a <generate_apple+0x66>
 8000604:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <generate_apple+0x8c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	785a      	ldrb	r2, [r3, #1]
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <generate_apple+0x88>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d101      	bne.n	800061a <generate_apple+0x66>
			generate_apple();
 8000616:	f7ff ffcd 	bl	80005b4 <generate_apple>
	for (int i = 0; i < snake_length; ++i) {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3301      	adds	r3, #1
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <generate_apple+0x90>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	461a      	mov	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4293      	cmp	r3, r2
 800062c:	dbe2      	blt.n	80005f4 <generate_apple+0x40>
		}
	}
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200001f4 	.word	0x200001f4
 800063c:	200001f5 	.word	0x200001f5
 8000640:	20000084 	.word	0x20000084
 8000644:	20000080 	.word	0x20000080

08000648 <set_direction>:

void set_direction(enum dir new_direction) {
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	switch (new_direction) {
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d842      	bhi.n	80006de <set_direction+0x96>
 8000658:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <set_direction+0x18>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	080006b9 	.word	0x080006b9
 8000664:	080006a1 	.word	0x080006a1
 8000668:	08000671 	.word	0x08000671
 800066c:	08000689 	.word	0x08000689
	case UP: {
		if (prev != DOWN) {
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <set_direction+0xa4>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b03      	cmp	r3, #3
 8000676:	d02b      	beq.n	80006d0 <set_direction+0x88>
			prev = direction;
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <set_direction+0xa8>)
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <set_direction+0xa4>)
 800067e:	701a      	strb	r2, [r3, #0]
			direction = new_direction;
 8000680:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <set_direction+0xa8>)
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	7013      	strb	r3, [r2, #0]
		}
		break;
 8000686:	e023      	b.n	80006d0 <set_direction+0x88>
	}
	case DOWN: {
		if (prev != UP) {
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <set_direction+0xa4>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d021      	beq.n	80006d4 <set_direction+0x8c>
			prev = direction;
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <set_direction+0xa8>)
 8000692:	781a      	ldrb	r2, [r3, #0]
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <set_direction+0xa4>)
 8000696:	701a      	strb	r2, [r3, #0]
			direction = new_direction;
 8000698:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <set_direction+0xa8>)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	7013      	strb	r3, [r2, #0]
		}
		break;
 800069e:	e019      	b.n	80006d4 <set_direction+0x8c>
	}
	case LEFT: {
		if (prev != RIGHT) {
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <set_direction+0xa4>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d017      	beq.n	80006d8 <set_direction+0x90>
			prev = direction;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <set_direction+0xa8>)
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <set_direction+0xa4>)
 80006ae:	701a      	strb	r2, [r3, #0]
			direction = new_direction;
 80006b0:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <set_direction+0xa8>)
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	7013      	strb	r3, [r2, #0]
		}
		break;
 80006b6:	e00f      	b.n	80006d8 <set_direction+0x90>
	}
	case RIGHT: {
		if (prev != LEFT) {
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <set_direction+0xa4>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d00d      	beq.n	80006dc <set_direction+0x94>
			prev = direction;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <set_direction+0xa8>)
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <set_direction+0xa4>)
 80006c6:	701a      	strb	r2, [r3, #0]
			direction = new_direction;
 80006c8:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <set_direction+0xa8>)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	7013      	strb	r3, [r2, #0]
		}
		break;
 80006ce:	e005      	b.n	80006dc <set_direction+0x94>
		break;
 80006d0:	bf00      	nop
 80006d2:	e004      	b.n	80006de <set_direction+0x96>
		break;
 80006d4:	bf00      	nop
 80006d6:	e002      	b.n	80006de <set_direction+0x96>
		break;
 80006d8:	bf00      	nop
 80006da:	e000      	b.n	80006de <set_direction+0x96>
		break;
 80006dc:	bf00      	nop
	}
	}
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000105 	.word	0x20000105
 80006f0:	20000106 	.word	0x20000106

080006f4 <move_snake>:

/* Move snake according to the direction.
 */
void move_snake() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	// в массиве snake надо подвинуть все элементы на 1 назад, а на первое место поставить последний в зависимости от dir
	for (int i = snake_length - 1; i > 0; --i) {
 80006fa:	4b48      	ldr	r3, [pc, #288]	; (800081c <move_snake+0x128>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3b01      	subs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	e017      	b.n	8000736 <move_snake+0x42>
		snake[i][0] = snake[i - 1][0];
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3b01      	subs	r3, #1
 800070a:	4a45      	ldr	r2, [pc, #276]	; (8000820 <move_snake+0x12c>)
 800070c:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8000710:	4a43      	ldr	r2, [pc, #268]	; (8000820 <move_snake+0x12c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		snake[i][1] = snake[i - 1][1];
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	4a40      	ldr	r2, [pc, #256]	; (8000820 <move_snake+0x12c>)
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	7859      	ldrb	r1, [r3, #1]
 8000724:	4a3e      	ldr	r2, [pc, #248]	; (8000820 <move_snake+0x12c>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	460a      	mov	r2, r1
 800072e:	705a      	strb	r2, [r3, #1]
	for (int i = snake_length - 1; i > 0; --i) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	dce4      	bgt.n	8000706 <move_snake+0x12>
	}
	switch (direction) {
 800073c:	4b39      	ldr	r3, [pc, #228]	; (8000824 <move_snake+0x130>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b03      	cmp	r3, #3
 8000742:	d853      	bhi.n	80007ec <move_snake+0xf8>
 8000744:	a201      	add	r2, pc, #4	; (adr r2, 800074c <move_snake+0x58>)
 8000746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074a:	bf00      	nop
 800074c:	080007c9 	.word	0x080007c9
 8000750:	080007a5 	.word	0x080007a5
 8000754:	08000781 	.word	0x08000781
 8000758:	0800075d 	.word	0x0800075d
	// TODO: если змейка с границами, то % 8 не надо. И после move любом случае надо прогонять check_intersections
	case DOWN: {
		snake[0][0] = (snake[1][0] + 1) % 8;
 800075c:	4b30      	ldr	r3, [pc, #192]	; (8000820 <move_snake+0x12c>)
 800075e:	789b      	ldrb	r3, [r3, #2]
 8000760:	3301      	adds	r3, #1
 8000762:	425a      	negs	r2, r3
 8000764:	f003 0307 	and.w	r3, r3, #7
 8000768:	f002 0207 	and.w	r2, r2, #7
 800076c:	bf58      	it	pl
 800076e:	4253      	negpl	r3, r2
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <move_snake+0x12c>)
 8000774:	701a      	strb	r2, [r3, #0]
		snake[0][1] = snake[1][1];
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <move_snake+0x12c>)
 8000778:	78da      	ldrb	r2, [r3, #3]
 800077a:	4b29      	ldr	r3, [pc, #164]	; (8000820 <move_snake+0x12c>)
 800077c:	705a      	strb	r2, [r3, #1]
		break;
 800077e:	e035      	b.n	80007ec <move_snake+0xf8>
	}
	case UP: {
		snake[0][0] = (snake[1][0] - 1 + 8) % 8;
 8000780:	4b27      	ldr	r3, [pc, #156]	; (8000820 <move_snake+0x12c>)
 8000782:	789b      	ldrb	r3, [r3, #2]
 8000784:	3307      	adds	r3, #7
 8000786:	425a      	negs	r2, r3
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	f002 0207 	and.w	r2, r2, #7
 8000790:	bf58      	it	pl
 8000792:	4253      	negpl	r3, r2
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b22      	ldr	r3, [pc, #136]	; (8000820 <move_snake+0x12c>)
 8000798:	701a      	strb	r2, [r3, #0]
		snake[0][1] = snake[1][1];
 800079a:	4b21      	ldr	r3, [pc, #132]	; (8000820 <move_snake+0x12c>)
 800079c:	78da      	ldrb	r2, [r3, #3]
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <move_snake+0x12c>)
 80007a0:	705a      	strb	r2, [r3, #1]
		break;
 80007a2:	e023      	b.n	80007ec <move_snake+0xf8>
	}
	case LEFT: {
		snake[0][0] = snake[1][0];
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <move_snake+0x12c>)
 80007a6:	789a      	ldrb	r2, [r3, #2]
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <move_snake+0x12c>)
 80007aa:	701a      	strb	r2, [r3, #0]
		snake[0][1] = (snake[1][1] - 1 + 8) % 8;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <move_snake+0x12c>)
 80007ae:	78db      	ldrb	r3, [r3, #3]
 80007b0:	3307      	adds	r3, #7
 80007b2:	425a      	negs	r2, r3
 80007b4:	f003 0307 	and.w	r3, r3, #7
 80007b8:	f002 0207 	and.w	r2, r2, #7
 80007bc:	bf58      	it	pl
 80007be:	4253      	negpl	r3, r2
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <move_snake+0x12c>)
 80007c4:	705a      	strb	r2, [r3, #1]
		break;
 80007c6:	e011      	b.n	80007ec <move_snake+0xf8>
	}
	case RIGHT: {
		snake[0][0] = snake[1][0];
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <move_snake+0x12c>)
 80007ca:	789a      	ldrb	r2, [r3, #2]
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <move_snake+0x12c>)
 80007ce:	701a      	strb	r2, [r3, #0]
		snake[0][1] = (snake[1][1] + 1) % 8;
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <move_snake+0x12c>)
 80007d2:	78db      	ldrb	r3, [r3, #3]
 80007d4:	3301      	adds	r3, #1
 80007d6:	425a      	negs	r2, r3
 80007d8:	f003 0307 	and.w	r3, r3, #7
 80007dc:	f002 0207 	and.w	r2, r2, #7
 80007e0:	bf58      	it	pl
 80007e2:	4253      	negpl	r3, r2
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <move_snake+0x12c>)
 80007e8:	705a      	strb	r2, [r3, #1]
		break;
 80007ea:	bf00      	nop
	}
	}
	// чтоб картинка поотображалась
	int cnt = 20; // убогий таймер...
 80007ec:	2314      	movs	r3, #20
 80007ee:	603b      	str	r3, [r7, #0]
	while (cnt > 0) {
 80007f0:	e00c      	b.n	800080c <move_snake+0x118>
	  render_snake(snake, snake_length, apple_x, apple_y);
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <move_snake+0x128>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b2d9      	uxtb	r1, r3
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <move_snake+0x134>)
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <move_snake+0x138>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4807      	ldr	r0, [pc, #28]	; (8000820 <move_snake+0x12c>)
 8000802:	f000 fb0b 	bl	8000e1c <render_snake>
	  cnt--;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	3b01      	subs	r3, #1
 800080a:	603b      	str	r3, [r7, #0]
	while (cnt > 0) {
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	dcef      	bgt.n	80007f2 <move_snake+0xfe>
	}
	//render_snake(snake, snake_length);
}
 8000812:	bf00      	nop
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000080 	.word	0x20000080
 8000820:	20000084 	.word	0x20000084
 8000824:	20000106 	.word	0x20000106
 8000828:	200001f4 	.word	0x200001f4
 800082c:	200001f5 	.word	0x200001f5

08000830 <end_game>:

void end_game(uint8_t res) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	game_flag = 0;
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <end_game+0x34>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
	if (res) {
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d003      	beq.n	800084e <end_game+0x1e>
		draw_columns(good_game);
 8000846:	4808      	ldr	r0, [pc, #32]	; (8000868 <end_game+0x38>)
 8000848:	f000 fa80 	bl	8000d4c <draw_columns>
 800084c:	e002      	b.n	8000854 <end_game+0x24>
	}
	else {
		draw_columns(you_lose);
 800084e:	4807      	ldr	r0, [pc, #28]	; (800086c <end_game+0x3c>)
 8000850:	f000 fa7c 	bl	8000d4c <draw_columns>
	}
	// чтоб картинка висела вечно
	end_game(res);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ffea 	bl	8000830 <end_game>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000104 	.word	0x20000104
 8000868:	20000040 	.word	0x20000040
 800086c:	20000000 	.word	0x20000000

08000870 <check_intersection>:

uint8_t check_intersection() {
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	return 0;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <check_apple>:

uint8_t check_apple() {
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
	return (snake[0][0] == apple_x && snake[0][1] == apple_y);
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <check_apple+0x30>)
 8000886:	781a      	ldrb	r2, [r3, #0]
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <check_apple+0x34>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	d107      	bne.n	80008a0 <check_apple+0x20>
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <check_apple+0x30>)
 8000892:	785a      	ldrb	r2, [r3, #1]
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <check_apple+0x38>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	429a      	cmp	r2, r3
 800089a:	d101      	bne.n	80008a0 <check_apple+0x20>
 800089c:	2301      	movs	r3, #1
 800089e:	e000      	b.n	80008a2 <check_apple+0x22>
 80008a0:	2300      	movs	r3, #0
 80008a2:	b2db      	uxtb	r3, r3
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000084 	.word	0x20000084
 80008b4:	200001f4 	.word	0x200001f4
 80008b8:	200001f5 	.word	0x200001f5

080008bc <longer_snake>:

/* Make the snake longer.
 */
void longer_snake() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	if (snake_length >= 63)
 80008c2:	4b4c      	ldr	r3, [pc, #304]	; (80009f4 <longer_snake+0x138>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b3e      	cmp	r3, #62	; 0x3e
 80008ca:	d903      	bls.n	80008d4 <longer_snake+0x18>
		end_game(1);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff ffaf 	bl	8000830 <end_game>
	  		break;
	  	}
	  	}
	  render_snake(snake, snake_length+1, apple_x, apple_y);
	}
}
 80008d2:	e08b      	b.n	80009ec <longer_snake+0x130>
	  snake_length = snake_length + 1;
 80008d4:	4b47      	ldr	r3, [pc, #284]	; (80009f4 <longer_snake+0x138>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	3301      	adds	r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b45      	ldr	r3, [pc, #276]	; (80009f4 <longer_snake+0x138>)
 80008e0:	701a      	strb	r2, [r3, #0]
	  	for (int i = snake_length - 1; i >= 0; --i) {
 80008e2:	4b44      	ldr	r3, [pc, #272]	; (80009f4 <longer_snake+0x138>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	3b01      	subs	r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	e017      	b.n	800091e <longer_snake+0x62>
	  		snake[i][0] = snake[i - 1][0];
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	4a41      	ldr	r2, [pc, #260]	; (80009f8 <longer_snake+0x13c>)
 80008f4:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 80008f8:	4a3f      	ldr	r2, [pc, #252]	; (80009f8 <longer_snake+0x13c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	  		snake[i][1] = snake[i - 1][1];
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	4a3c      	ldr	r2, [pc, #240]	; (80009f8 <longer_snake+0x13c>)
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	4413      	add	r3, r2
 800090a:	7859      	ldrb	r1, [r3, #1]
 800090c:	4a3a      	ldr	r2, [pc, #232]	; (80009f8 <longer_snake+0x13c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	460a      	mov	r2, r1
 8000916:	705a      	strb	r2, [r3, #1]
	  	for (int i = snake_length - 1; i >= 0; --i) {
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	dae4      	bge.n	80008ee <longer_snake+0x32>
	  	switch (direction) {
 8000924:	4b35      	ldr	r3, [pc, #212]	; (80009fc <longer_snake+0x140>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b03      	cmp	r3, #3
 800092a:	d853      	bhi.n	80009d4 <longer_snake+0x118>
 800092c:	a201      	add	r2, pc, #4	; (adr r2, 8000934 <longer_snake+0x78>)
 800092e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000932:	bf00      	nop
 8000934:	080009b1 	.word	0x080009b1
 8000938:	0800098d 	.word	0x0800098d
 800093c:	08000969 	.word	0x08000969
 8000940:	08000945 	.word	0x08000945
	  		snake[0][0] = (snake[1][0] + 1) % 8;
 8000944:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <longer_snake+0x13c>)
 8000946:	789b      	ldrb	r3, [r3, #2]
 8000948:	3301      	adds	r3, #1
 800094a:	425a      	negs	r2, r3
 800094c:	f003 0307 	and.w	r3, r3, #7
 8000950:	f002 0207 	and.w	r2, r2, #7
 8000954:	bf58      	it	pl
 8000956:	4253      	negpl	r3, r2
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <longer_snake+0x13c>)
 800095c:	701a      	strb	r2, [r3, #0]
	  		snake[0][1] = snake[1][1];
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <longer_snake+0x13c>)
 8000960:	78da      	ldrb	r2, [r3, #3]
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <longer_snake+0x13c>)
 8000964:	705a      	strb	r2, [r3, #1]
	  		break;
 8000966:	e035      	b.n	80009d4 <longer_snake+0x118>
	  		snake[0][0] = (snake[1][0] - 1 + 8) % 8;
 8000968:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <longer_snake+0x13c>)
 800096a:	789b      	ldrb	r3, [r3, #2]
 800096c:	3307      	adds	r3, #7
 800096e:	425a      	negs	r2, r3
 8000970:	f003 0307 	and.w	r3, r3, #7
 8000974:	f002 0207 	and.w	r2, r2, #7
 8000978:	bf58      	it	pl
 800097a:	4253      	negpl	r3, r2
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <longer_snake+0x13c>)
 8000980:	701a      	strb	r2, [r3, #0]
	  		snake[0][1] = snake[1][1];
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <longer_snake+0x13c>)
 8000984:	78da      	ldrb	r2, [r3, #3]
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <longer_snake+0x13c>)
 8000988:	705a      	strb	r2, [r3, #1]
	  		break;
 800098a:	e023      	b.n	80009d4 <longer_snake+0x118>
	  		snake[0][0] = snake[1][0];
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <longer_snake+0x13c>)
 800098e:	789a      	ldrb	r2, [r3, #2]
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <longer_snake+0x13c>)
 8000992:	701a      	strb	r2, [r3, #0]
	  		snake[0][1] = (snake[1][1] - 1 + 8) % 8;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <longer_snake+0x13c>)
 8000996:	78db      	ldrb	r3, [r3, #3]
 8000998:	3307      	adds	r3, #7
 800099a:	425a      	negs	r2, r3
 800099c:	f003 0307 	and.w	r3, r3, #7
 80009a0:	f002 0207 	and.w	r2, r2, #7
 80009a4:	bf58      	it	pl
 80009a6:	4253      	negpl	r3, r2
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <longer_snake+0x13c>)
 80009ac:	705a      	strb	r2, [r3, #1]
	  		break;
 80009ae:	e011      	b.n	80009d4 <longer_snake+0x118>
	  		snake[0][0] = snake[1][0];
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <longer_snake+0x13c>)
 80009b2:	789a      	ldrb	r2, [r3, #2]
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <longer_snake+0x13c>)
 80009b6:	701a      	strb	r2, [r3, #0]
	  		snake[0][1] = (snake[1][1] + 1) % 8;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <longer_snake+0x13c>)
 80009ba:	78db      	ldrb	r3, [r3, #3]
 80009bc:	3301      	adds	r3, #1
 80009be:	425a      	negs	r2, r3
 80009c0:	f003 0307 	and.w	r3, r3, #7
 80009c4:	f002 0207 	and.w	r2, r2, #7
 80009c8:	bf58      	it	pl
 80009ca:	4253      	negpl	r3, r2
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <longer_snake+0x13c>)
 80009d0:	705a      	strb	r2, [r3, #1]
	  		break;
 80009d2:	bf00      	nop
	  render_snake(snake, snake_length+1, apple_x, apple_y);
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <longer_snake+0x138>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	3301      	adds	r3, #1
 80009dc:	b2d9      	uxtb	r1, r3
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <longer_snake+0x144>)
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <longer_snake+0x148>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	4804      	ldr	r0, [pc, #16]	; (80009f8 <longer_snake+0x13c>)
 80009e8:	f000 fa18 	bl	8000e1c <render_snake>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000080 	.word	0x20000080
 80009f8:	20000084 	.word	0x20000084
 80009fc:	20000106 	.word	0x20000106
 8000a00:	200001f4 	.word	0x200001f4
 8000a04:	200001f5 	.word	0x200001f5

08000a08 <setup_snake>:

void setup_snake() {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
	srand(clock()); // setup random
 8000a0e:	f001 fc87 	bl	8002320 <clock>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fcc9 	bl	80023ac <srand>
	//render_snake(snake, snake_length);
	// чтоб картинка поотображалась
	int cnt = 20; // убогий таймер...
 8000a1a:	2314      	movs	r3, #20
 8000a1c:	607b      	str	r3, [r7, #4]
	while (cnt > 0) {
 8000a1e:	e00c      	b.n	8000a3a <setup_snake+0x32>
		render_snake(snake, snake_length, apple_x, apple_y);
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <setup_snake+0x44>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2d9      	uxtb	r1, r3
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <setup_snake+0x48>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <setup_snake+0x4c>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	480a      	ldr	r0, [pc, #40]	; (8000a58 <setup_snake+0x50>)
 8000a30:	f000 f9f4 	bl	8000e1c <render_snake>
	  cnt--;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	607b      	str	r3, [r7, #4]
	while (cnt > 0) {
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	dcef      	bgt.n	8000a20 <setup_snake+0x18>
	}
	// gen apple
	generate_apple();
 8000a40:	f7ff fdb8 	bl	80005b4 <generate_apple>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000080 	.word	0x20000080
 8000a50:	200001f4 	.word	0x200001f4
 8000a54:	200001f5 	.word	0x200001f5
 8000a58:	20000084 	.word	0x20000084

08000a5c <run_snake>:

void run_snake() {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	if (game_flag) {
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <run_snake+0x3c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d015      	beq.n	8000a94 <run_snake+0x38>
		if (check_apple()) {
 8000a68:	f7ff ff0a 	bl	8000880 <check_apple>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <run_snake+0x1e>
			longer_snake();
 8000a72:	f7ff ff23 	bl	80008bc <longer_snake>
			generate_apple();
 8000a76:	f7ff fd9d 	bl	80005b4 <generate_apple>
		}
        move_snake();
 8000a7a:	f7ff fe3b 	bl	80006f4 <move_snake>
		if (check_intersection()) {
 8000a7e:	f7ff fef7 	bl	8000870 <check_intersection>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d003      	beq.n	8000a90 <run_snake+0x34>
			end_game(0);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fed1 	bl	8000830 <end_game>
			return;
 8000a8e:	e001      	b.n	8000a94 <run_snake+0x38>
		}

		run_snake();
 8000a90:	f7ff ffe4 	bl	8000a5c <run_snake>
	}
}
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000104 	.word	0x20000104

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa0:	f000 fba2 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa4:	f000 f808 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa8:	f000 f866 	bl	8000b78 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  setup_snake();
 8000aac:	f7ff ffac 	bl	8000a08 <setup_snake>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    run_snake();
 8000ab0:	f7ff ffd4 	bl	8000a5c <run_snake>
 8000ab4:	e7fc      	b.n	8000ab0 <main+0x14>
	...

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b094      	sub	sp, #80	; 0x50
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	2234      	movs	r2, #52	; 0x34
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fc68 	bl	800239c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <SystemClock_Config+0xb8>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <SystemClock_Config+0xb8>)
 8000ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <SystemClock_Config+0xb8>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af8:	2300      	movs	r3, #0
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <SystemClock_Config+0xbc>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b04:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <SystemClock_Config+0xbc>)
 8000b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <SystemClock_Config+0xbc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b20:	2310      	movs	r3, #16
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 f959 	bl	8001de4 <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b38:	f000 f903 	bl	8000d42 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 feb4 	bl	80018c4 <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b62:	f000 f8ee 	bl	8000d42 <Error_Handler>
  }
}
 8000b66:	bf00      	nop
 8000b68:	3750      	adds	r7, #80	; 0x50
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40007000 	.word	0x40007000

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b52      	ldr	r3, [pc, #328]	; (8000cdc <MX_GPIO_Init+0x164>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a51      	ldr	r2, [pc, #324]	; (8000cdc <MX_GPIO_Init+0x164>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b4f      	ldr	r3, [pc, #316]	; (8000cdc <MX_GPIO_Init+0x164>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b4b      	ldr	r3, [pc, #300]	; (8000cdc <MX_GPIO_Init+0x164>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a4a      	ldr	r2, [pc, #296]	; (8000cdc <MX_GPIO_Init+0x164>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b48      	ldr	r3, [pc, #288]	; (8000cdc <MX_GPIO_Init+0x164>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b44      	ldr	r3, [pc, #272]	; (8000cdc <MX_GPIO_Init+0x164>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a43      	ldr	r2, [pc, #268]	; (8000cdc <MX_GPIO_Init+0x164>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b41      	ldr	r3, [pc, #260]	; (8000cdc <MX_GPIO_Init+0x164>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R3_Pin|R4_Pin|R5_Pin|R8_Pin
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 612e 	mov.w	r1, #2784	; 0xae0
 8000be8:	483d      	ldr	r0, [pc, #244]	; (8000ce0 <MX_GPIO_Init+0x168>)
 8000bea:	f000 fe39 	bl	8001860 <HAL_GPIO_WritePin>
                          |C1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, C8_Pin|R7_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2190      	movs	r1, #144	; 0x90
 8000bf2:	483c      	ldr	r0, [pc, #240]	; (8000ce4 <MX_GPIO_Init+0x16c>)
 8000bf4:	f000 fe34 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C4_Pin|C3_Pin|C2_Pin|C7_Pin
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f24f 3146 	movw	r1, #62278	; 0xf346
 8000bfe:	483a      	ldr	r0, [pc, #232]	; (8000ce8 <MX_GPIO_Init+0x170>)
 8000c00:	f000 fe2e 	bl	8001860 <HAL_GPIO_WritePin>
                          |C6_Pin|C5_Pin|R6_Pin|R1_Pin
                          |R2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : R3_Pin R4_Pin R5_Pin R8_Pin
                           C1_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R4_Pin|R5_Pin|R8_Pin
 8000c04:	f44f 632e 	mov.w	r3, #2784	; 0xae0
 8000c08:	60fb      	str	r3, [r7, #12]
                          |C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4830      	ldr	r0, [pc, #192]	; (8000ce0 <MX_GPIO_Init+0x168>)
 8000c1e:	f000 fc8b 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : C8_Pin R7_Pin */
  GPIO_InitStruct.Pin = C8_Pin|R7_Pin;
 8000c22:	2390      	movs	r3, #144	; 0x90
 8000c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4619      	mov	r1, r3
 8000c38:	482a      	ldr	r0, [pc, #168]	; (8000ce4 <MX_GPIO_Init+0x16c>)
 8000c3a:	f000 fc7d 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin C2_Pin C7_Pin
                           C6_Pin C5_Pin R6_Pin R1_Pin
                           R2_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin|C2_Pin|C7_Pin
 8000c3e:	f24f 3346 	movw	r3, #62278	; 0xf346
 8000c42:	60fb      	str	r3, [r7, #12]
                          |C6_Pin|C5_Pin|R6_Pin|R1_Pin
                          |R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	4619      	mov	r1, r3
 8000c56:	4824      	ldr	r0, [pc, #144]	; (8000ce8 <MX_GPIO_Init+0x170>)
 8000c58:	f000 fc6e 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : Up_Pin Left_Pin Right_Pin */
  GPIO_InitStruct.Pin = Up_Pin|Left_Pin|Right_Pin;
 8000c5c:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8000c60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	4619      	mov	r1, r3
 8000c72:	481d      	ldr	r0, [pc, #116]	; (8000ce8 <MX_GPIO_Init+0x170>)
 8000c74:	f000 fc60 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : Down_Pin */
  GPIO_InitStruct.Pin = Down_Pin;
 8000c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Down_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4814      	ldr	r0, [pc, #80]	; (8000ce0 <MX_GPIO_Init+0x168>)
 8000c90:	f000 fc52 	bl	8001538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2009      	movs	r0, #9
 8000c9a:	f000 fc16 	bl	80014ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c9e:	2009      	movs	r0, #9
 8000ca0:	f000 fc2f 	bl	8001502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	200a      	movs	r0, #10
 8000caa:	f000 fc0e 	bl	80014ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f000 fc27 	bl	8001502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2017      	movs	r0, #23
 8000cba:	f000 fc06 	bl	80014ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cbe:	2017      	movs	r0, #23
 8000cc0:	f000 fc1f 	bl	8001502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2028      	movs	r0, #40	; 0x28
 8000cca:	f000 fbfe 	bl	80014ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cce:	2028      	movs	r0, #40	; 0x28
 8000cd0:	f000 fc17 	bl	8001502 <HAL_NVIC_EnableIRQ>

}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	40020400 	.word	0x40020400

08000cec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) {
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cfc:	d00d      	beq.n	8000d1a <HAL_GPIO_EXTI_Callback+0x2e>
 8000cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d02:	dc1a      	bgt.n	8000d3a <HAL_GPIO_EXTI_Callback+0x4e>
 8000d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d08:	d00b      	beq.n	8000d22 <HAL_GPIO_EXTI_Callback+0x36>
 8000d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d0e:	dc14      	bgt.n	8000d3a <HAL_GPIO_EXTI_Callback+0x4e>
 8000d10:	2b08      	cmp	r3, #8
 8000d12:	d00e      	beq.n	8000d32 <HAL_GPIO_EXTI_Callback+0x46>
 8000d14:	2b10      	cmp	r3, #16
 8000d16:	d008      	beq.n	8000d2a <HAL_GPIO_EXTI_Callback+0x3e>
  case Left_Pin: {
	  set_direction(LEFT);
  	  break;
    }
  }
}
 8000d18:	e00f      	b.n	8000d3a <HAL_GPIO_EXTI_Callback+0x4e>
	  set_direction(UP);
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f7ff fc94 	bl	8000648 <set_direction>
	  break;
 8000d20:	e00b      	b.n	8000d3a <HAL_GPIO_EXTI_Callback+0x4e>
	  set_direction(DOWN);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f7ff fc90 	bl	8000648 <set_direction>
	  break;
 8000d28:	e007      	b.n	8000d3a <HAL_GPIO_EXTI_Callback+0x4e>
	  set_direction(RIGHT);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff fc8c 	bl	8000648 <set_direction>
  	  break;
 8000d30:	e003      	b.n	8000d3a <HAL_GPIO_EXTI_Callback+0x4e>
	  set_direction(LEFT);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff fc88 	bl	8000648 <set_direction>
  	  break;
 8000d38:	bf00      	nop
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d46:	b672      	cpsid	i
}
 8000d48:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <Error_Handler+0x8>

08000d4c <draw_columns>:
GPIO_TypeDef *col_ports[] = {C1_GPIO_Port, C2_GPIO_Port, C3_GPIO_Port, C4_GPIO_Port,
    C5_GPIO_Port, C6_GPIO_Port, C7_GPIO_Port, C8_GPIO_Port};

/* Draw matrix column by column.
 */
void draw_columns(uint8_t matrix[8][8]) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	for (uint8_t j = 0; j < 8; ++j) {
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e04f      	b.n	8000dfa <draw_columns+0xae>
		// activate the row
		HAL_GPIO_WritePin(col_ports[j], cols[j], GPIO_PIN_RESET);
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	4a2b      	ldr	r2, [pc, #172]	; (8000e0c <draw_columns+0xc0>)
 8000d5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	4a2a      	ldr	r2, [pc, #168]	; (8000e10 <draw_columns+0xc4>)
 8000d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f000 fd77 	bl	8001860 <HAL_GPIO_WritePin>
		// draw all rows of the column
		for (uint8_t i = 0; i < 8; ++i) {
 8000d72:	2300      	movs	r3, #0
 8000d74:	73bb      	strb	r3, [r7, #14]
 8000d76:	e016      	b.n	8000da6 <draw_columns+0x5a>
			if (matrix[i][j]) {
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	441a      	add	r2, r3
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	5cd3      	ldrb	r3, [r2, r3]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d00b      	beq.n	8000da0 <draw_columns+0x54>
				HAL_GPIO_WritePin(row_ports[i], rows[i], GPIO_PIN_SET);
 8000d88:	7bbb      	ldrb	r3, [r7, #14]
 8000d8a:	4a22      	ldr	r2, [pc, #136]	; (8000e14 <draw_columns+0xc8>)
 8000d8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	4a21      	ldr	r2, [pc, #132]	; (8000e18 <draw_columns+0xcc>)
 8000d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f000 fd60 	bl	8001860 <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < 8; ++i) {
 8000da0:	7bbb      	ldrb	r3, [r7, #14]
 8000da2:	3301      	adds	r3, #1
 8000da4:	73bb      	strb	r3, [r7, #14]
 8000da6:	7bbb      	ldrb	r3, [r7, #14]
 8000da8:	2b07      	cmp	r3, #7
 8000daa:	d9e5      	bls.n	8000d78 <draw_columns+0x2c>
			}
		}
		HAL_Delay(1);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f000 fa8d 	bl	80012cc <HAL_Delay>
		// turn off all the leds of this column
		for (uint8_t i = 0; i < 8; ++i) {
 8000db2:	2300      	movs	r3, #0
 8000db4:	737b      	strb	r3, [r7, #13]
 8000db6:	e00e      	b.n	8000dd6 <draw_columns+0x8a>
			HAL_GPIO_WritePin(row_ports[i], rows[i], GPIO_PIN_RESET);
 8000db8:	7b7b      	ldrb	r3, [r7, #13]
 8000dba:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <draw_columns+0xc8>)
 8000dbc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000dc0:	7b7b      	ldrb	r3, [r7, #13]
 8000dc2:	4a15      	ldr	r2, [pc, #84]	; (8000e18 <draw_columns+0xcc>)
 8000dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f000 fd48 	bl	8001860 <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < 8; ++i) {
 8000dd0:	7b7b      	ldrb	r3, [r7, #13]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	737b      	strb	r3, [r7, #13]
 8000dd6:	7b7b      	ldrb	r3, [r7, #13]
 8000dd8:	2b07      	cmp	r3, #7
 8000dda:	d9ed      	bls.n	8000db8 <draw_columns+0x6c>
		}
		//deactivate the row
		HAL_GPIO_WritePin(col_ports[j], cols[j], GPIO_PIN_SET);
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <draw_columns+0xc0>)
 8000de0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <draw_columns+0xc4>)
 8000de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dec:	2201      	movs	r2, #1
 8000dee:	4619      	mov	r1, r3
 8000df0:	f000 fd36 	bl	8001860 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 8; ++j) {
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	3301      	adds	r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	2b07      	cmp	r3, #7
 8000dfe:	d9ac      	bls.n	8000d5a <draw_columns+0xe>
	}
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000148 	.word	0x20000148
 8000e10:	20000118 	.word	0x20000118
 8000e14:	20000128 	.word	0x20000128
 8000e18:	20000108 	.word	0x20000108

08000e1c <render_snake>:

/* TODO: add apple
 */
void render_snake(uint8_t snake[64][2], volatile uint8_t length, uint8_t apple_x, uint8_t apple_y) {
 8000e1c:	b5b0      	push	{r4, r5, r7, lr}
 8000e1e:	b094      	sub	sp, #80	; 0x50
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	4608      	mov	r0, r1
 8000e26:	4611      	mov	r1, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	70fb      	strb	r3, [r7, #3]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	70bb      	strb	r3, [r7, #2]
 8000e32:	4613      	mov	r3, r2
 8000e34:	707b      	strb	r3, [r7, #1]
	uint8_t frame[8][8] = {
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <render_snake+0xb0>)
 8000e38:	f107 040c 	add.w	r4, r7, #12
 8000e3c:	461d      	mov	r5, r3
 8000e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0}
	};
	for (uint8_t i = 0; i < length; ++i) {
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000e58:	e01f      	b.n	8000e9a <render_snake+0x7e>
		uint8_t row = snake[i][0],
 8000e5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	4413      	add	r3, r2
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		    col = snake[i][1];
 8000e6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	785b      	ldrb	r3, [r3, #1]
 8000e76:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		frame[row][col] = 1;
 8000e7a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8000e7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000e82:	00d2      	lsls	r2, r2, #3
 8000e84:	3250      	adds	r2, #80	; 0x50
 8000e86:	443a      	add	r2, r7
 8000e88:	4413      	add	r3, r2
 8000e8a:	3b44      	subs	r3, #68	; 0x44
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < length; ++i) {
 8000e90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e94:	3301      	adds	r3, #1
 8000e96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d3d9      	bcc.n	8000e5a <render_snake+0x3e>
	}
	frame[apple_x][apple_y] = 2;
 8000ea6:	78ba      	ldrb	r2, [r7, #2]
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	00d2      	lsls	r2, r2, #3
 8000eac:	3250      	adds	r2, #80	; 0x50
 8000eae:	443a      	add	r2, r7
 8000eb0:	4413      	add	r3, r2
 8000eb2:	3b44      	subs	r3, #68	; 0x44
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	701a      	strb	r2, [r3, #0]
	draw_columns(frame);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff45 	bl	8000d4c <draw_columns>

	while ((clock() - time) / CLOCKS_PER_SEC < 1) {
	render_snake(snake, snake_length);
	}
	*/
}
 8000ec2:	bf00      	nop
 8000ec4:	3750      	adds	r7, #80	; 0x50
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	08003498 	.word	0x08003498

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_MspInit+0x4c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x4c>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x4c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 f98e 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_Pin);
 8000f78:	2008      	movs	r0, #8
 8000f7a:	f000 fc8b 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  HAL_GPIO_EXTI_Callback(Left_Pin);
 8000f7e:	2008      	movs	r0, #8
 8000f80:	f7ff feb4 	bl	8000cec <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_Pin);
 8000f8c:	2010      	movs	r0, #16
 8000f8e:	f000 fc81 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  HAL_GPIO_EXTI_Callback(Right_Pin);
 8000f92:	2010      	movs	r0, #16
 8000f94:	f7ff feaa 	bl	8000cec <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Down_Pin);
 8000fa0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fa4:	f000 fc76 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  HAL_GPIO_EXTI_Callback(Down_Pin);
 8000fa8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fac:	f7ff fe9e 	bl	8000cec <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Up_Pin);
 8000fb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fbc:	f000 fc6a 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  HAL_GPIO_EXTI_Callback(Up_Pin);
 8000fc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fc4:	f7ff fe92 	bl	8000cec <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
	return 1;
 8000fd0:	2301      	movs	r3, #1
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_kill>:

int _kill(int pid, int sig)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fe6:	f001 f9af 	bl	8002348 <__errno>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2216      	movs	r2, #22
 8000fee:	601a      	str	r2, [r3, #0]
	return -1;
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_exit>:

void _exit (int status)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ffe7 	bl	8000fdc <_kill>
	while (1) {}		/* Make sure we hang here */
 800100e:	e7fe      	b.n	800100e <_exit+0x12>

08001010 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	e00a      	b.n	8001038 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001022:	f3af 8000 	nop.w
 8001026:	4601      	mov	r1, r0
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	60ba      	str	r2, [r7, #8]
 800102e:	b2ca      	uxtb	r2, r1
 8001030:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	dbf0      	blt.n	8001022 <_read+0x12>
	}

return len;
 8001040:	687b      	ldr	r3, [r7, #4]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	e009      	b.n	8001070 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	60ba      	str	r2, [r7, #8]
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dbf1      	blt.n	800105c <_write+0x12>
	}
	return len;
 8001078:	687b      	ldr	r3, [r7, #4]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <_close>:

int _close(int file)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	return -1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010aa:	605a      	str	r2, [r3, #4]
	return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <_isatty>:

int _isatty(int file)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
	return 1;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
	return 0;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <_times>:
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	return -1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f001 f908 	bl	8002348 <__errno>
 8001138:	4603      	mov	r3, r0
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <_sbrk+0x64>)
 8001154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20020000 	.word	0x20020000
 8001164:	00000400 	.word	0x00000400
 8001168:	200001f8 	.word	0x200001f8
 800116c:	20000210 	.word	0x20000210

08001170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <SystemInit+0x20>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <SystemInit+0x20>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800119a:	490e      	ldr	r1, [pc, #56]	; (80011d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011b0:	4c0b      	ldr	r4, [pc, #44]	; (80011e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011be:	f7ff ffd7 	bl	8001170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f001 f8c7 	bl	8002354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c6:	f7ff fc69 	bl	8000a9c <main>
  bx  lr    
 80011ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80011d8:	08003640 	.word	0x08003640
  ldr r2, =_sbss
 80011dc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80011e0:	20000210 	.word	0x20000210

080011e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <HAL_Init+0x40>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_Init+0x40>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_Init+0x40>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 f94f 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	200f      	movs	r0, #15
 8001218:	f000 f808 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800121c:	f7ff fe58 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x54>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f967 	bl	800151e <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 f92f 	bl	80014ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_InitTick+0x5c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000168 	.word	0x20000168
 8001284:	20000170 	.word	0x20000170
 8001288:	2000016c 	.word	0x2000016c

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000170 	.word	0x20000170
 80012b0:	200001fc 	.word	0x200001fc

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	200001fc 	.word	0x200001fc

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffde 	bl	80012b4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000170 	.word	0x20000170

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001480:	d301      	bcc.n	8001486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001482:	2301      	movs	r3, #1
 8001484:	e00f      	b.n	80014a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <SysTick_Config+0x40>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148e:	210f      	movs	r1, #15
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f7ff ff8e 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <SysTick_Config+0x40>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SysTick_Config+0x40>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff29 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014dc:	f7ff ff3e 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	6978      	ldr	r0, [r7, #20]
 80014e8:	f7ff ff8e 	bl	8001408 <NVIC_EncodePriority>
 80014ec:	4602      	mov	r2, r0
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff5d 	bl	80013b4 <__NVIC_SetPriority>
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff31 	bl	8001378 <__NVIC_EnableIRQ>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffa2 	bl	8001470 <SysTick_Config>
 800152c:	4603      	mov	r3, r0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	e165      	b.n	8001820 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001554:	2201      	movs	r2, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	429a      	cmp	r2, r3
 800156e:	f040 8154 	bne.w	800181a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	2b01      	cmp	r3, #1
 800157c:	d005      	beq.n	800158a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001586:	2b02      	cmp	r3, #2
 8001588:	d130      	bne.n	80015ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c0:	2201      	movs	r2, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 0201 	and.w	r2, r3, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d017      	beq.n	8001628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d123      	bne.n	800167c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	08da      	lsrs	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3208      	adds	r2, #8
 800163c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	220f      	movs	r2, #15
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	691a      	ldr	r2, [r3, #16]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	08da      	lsrs	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3208      	adds	r2, #8
 8001676:	69b9      	ldr	r1, [r7, #24]
 8001678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0203 	and.w	r2, r3, #3
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80ae 	beq.w	800181a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b5d      	ldr	r3, [pc, #372]	; (8001838 <HAL_GPIO_Init+0x300>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a5c      	ldr	r2, [pc, #368]	; (8001838 <HAL_GPIO_Init+0x300>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <HAL_GPIO_Init+0x300>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016da:	4a58      	ldr	r2, [pc, #352]	; (800183c <HAL_GPIO_Init+0x304>)
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4f      	ldr	r2, [pc, #316]	; (8001840 <HAL_GPIO_Init+0x308>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d025      	beq.n	8001752 <HAL_GPIO_Init+0x21a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4e      	ldr	r2, [pc, #312]	; (8001844 <HAL_GPIO_Init+0x30c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d01f      	beq.n	800174e <HAL_GPIO_Init+0x216>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4d      	ldr	r2, [pc, #308]	; (8001848 <HAL_GPIO_Init+0x310>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d019      	beq.n	800174a <HAL_GPIO_Init+0x212>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4c      	ldr	r2, [pc, #304]	; (800184c <HAL_GPIO_Init+0x314>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_GPIO_Init+0x20e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4b      	ldr	r2, [pc, #300]	; (8001850 <HAL_GPIO_Init+0x318>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00d      	beq.n	8001742 <HAL_GPIO_Init+0x20a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4a      	ldr	r2, [pc, #296]	; (8001854 <HAL_GPIO_Init+0x31c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d007      	beq.n	800173e <HAL_GPIO_Init+0x206>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a49      	ldr	r2, [pc, #292]	; (8001858 <HAL_GPIO_Init+0x320>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_GPIO_Init+0x202>
 8001736:	2306      	movs	r3, #6
 8001738:	e00c      	b.n	8001754 <HAL_GPIO_Init+0x21c>
 800173a:	2307      	movs	r3, #7
 800173c:	e00a      	b.n	8001754 <HAL_GPIO_Init+0x21c>
 800173e:	2305      	movs	r3, #5
 8001740:	e008      	b.n	8001754 <HAL_GPIO_Init+0x21c>
 8001742:	2304      	movs	r3, #4
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x21c>
 8001746:	2303      	movs	r3, #3
 8001748:	e004      	b.n	8001754 <HAL_GPIO_Init+0x21c>
 800174a:	2302      	movs	r3, #2
 800174c:	e002      	b.n	8001754 <HAL_GPIO_Init+0x21c>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_GPIO_Init+0x21c>
 8001752:	2300      	movs	r3, #0
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f002 0203 	and.w	r2, r2, #3
 800175a:	0092      	lsls	r2, r2, #2
 800175c:	4093      	lsls	r3, r2
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001764:	4935      	ldr	r1, [pc, #212]	; (800183c <HAL_GPIO_Init+0x304>)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <HAL_GPIO_Init+0x324>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001796:	4a31      	ldr	r2, [pc, #196]	; (800185c <HAL_GPIO_Init+0x324>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800179c:	4b2f      	ldr	r3, [pc, #188]	; (800185c <HAL_GPIO_Init+0x324>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c0:	4a26      	ldr	r2, [pc, #152]	; (800185c <HAL_GPIO_Init+0x324>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_GPIO_Init+0x324>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ea:	4a1c      	ldr	r2, [pc, #112]	; (800185c <HAL_GPIO_Init+0x324>)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_GPIO_Init+0x324>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001814:	4a11      	ldr	r2, [pc, #68]	; (800185c <HAL_GPIO_Init+0x324>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3301      	adds	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	2b0f      	cmp	r3, #15
 8001824:	f67f ae96 	bls.w	8001554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	40013800 	.word	0x40013800
 8001840:	40020000 	.word	0x40020000
 8001844:	40020400 	.word	0x40020400
 8001848:	40020800 	.word	0x40020800
 800184c:	40020c00 	.word	0x40020c00
 8001850:	40021000 	.word	0x40021000
 8001854:	40021400 	.word	0x40021400
 8001858:	40021800 	.word	0x40021800
 800185c:	40013c00 	.word	0x40013c00

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fa1a 	bl	8000cec <HAL_GPIO_EXTI_Callback>
  }
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40013c00 	.word	0x40013c00

080018c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0cc      	b.n	8001a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d8:	4b68      	ldr	r3, [pc, #416]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d90c      	bls.n	8001900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b65      	ldr	r3, [pc, #404]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b63      	ldr	r3, [pc, #396]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0b8      	b.n	8001a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d020      	beq.n	800194e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001918:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a58      	ldr	r2, [pc, #352]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001930:	4b53      	ldr	r3, [pc, #332]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a52      	ldr	r2, [pc, #328]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800193a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800193c:	4b50      	ldr	r3, [pc, #320]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	494d      	ldr	r1, [pc, #308]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d044      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	4b47      	ldr	r3, [pc, #284]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d119      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e07f      	b.n	8001a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d003      	beq.n	8001982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197e:	2b03      	cmp	r3, #3
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e06f      	b.n	8001a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e067      	b.n	8001a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a2:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f023 0203 	bic.w	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4934      	ldr	r1, [pc, #208]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b4:	f7ff fc7e 	bl	80012b4 <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7ff fc7a 	bl	80012b4 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e04f      	b.n	8001a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 020c 	and.w	r2, r3, #12
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1eb      	bne.n	80019bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e4:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d20c      	bcs.n	8001a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e032      	b.n	8001a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4916      	ldr	r1, [pc, #88]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d009      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	490e      	ldr	r1, [pc, #56]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a4a:	f000 f821 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	490a      	ldr	r1, [pc, #40]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	5ccb      	ldrb	r3, [r1, r3]
 8001a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fbde 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023c00 	.word	0x40023c00
 8001a80:	40023800 	.word	0x40023800
 8001a84:	080034d8 	.word	0x080034d8
 8001a88:	20000168 	.word	0x20000168
 8001a8c:	2000016c 	.word	0x2000016c

08001a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a94:	b0a6      	sub	sp, #152	; 0x98
 8001a96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab6:	4bc8      	ldr	r3, [pc, #800]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	f200 817e 	bhi.w	8001dc0 <HAL_RCC_GetSysClockFreq+0x330>
 8001ac4:	a201      	add	r2, pc, #4	; (adr r2, 8001acc <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aca:	bf00      	nop
 8001acc:	08001b01 	.word	0x08001b01
 8001ad0:	08001dc1 	.word	0x08001dc1
 8001ad4:	08001dc1 	.word	0x08001dc1
 8001ad8:	08001dc1 	.word	0x08001dc1
 8001adc:	08001b09 	.word	0x08001b09
 8001ae0:	08001dc1 	.word	0x08001dc1
 8001ae4:	08001dc1 	.word	0x08001dc1
 8001ae8:	08001dc1 	.word	0x08001dc1
 8001aec:	08001b11 	.word	0x08001b11
 8001af0:	08001dc1 	.word	0x08001dc1
 8001af4:	08001dc1 	.word	0x08001dc1
 8001af8:	08001dc1 	.word	0x08001dc1
 8001afc:	08001c7b 	.word	0x08001c7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b00:	4bb6      	ldr	r3, [pc, #728]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x34c>)
 8001b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001b06:	e15f      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b08:	4bb5      	ldr	r3, [pc, #724]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001b0e:	e15b      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b10:	4bb1      	ldr	r3, [pc, #708]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b1c:	4bae      	ldr	r3, [pc, #696]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d031      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b28:	4bab      	ldr	r3, [pc, #684]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	099b      	lsrs	r3, r3, #6
 8001b2e:	2200      	movs	r2, #0
 8001b30:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	667b      	str	r3, [r7, #100]	; 0x64
 8001b40:	4ba7      	ldr	r3, [pc, #668]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b42:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b46:	462a      	mov	r2, r5
 8001b48:	fb03 f202 	mul.w	r2, r3, r2
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	4621      	mov	r1, r4
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	4aa2      	ldr	r2, [pc, #648]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b58:	4621      	mov	r1, r4
 8001b5a:	fba1 1202 	umull	r1, r2, r1, r2
 8001b5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001b60:	460a      	mov	r2, r1
 8001b62:	67ba      	str	r2, [r7, #120]	; 0x78
 8001b64:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b66:	4413      	add	r3, r2
 8001b68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b6e:	2200      	movs	r2, #0
 8001b70:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b78:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b7c:	f7fe fb98 	bl	80002b0 <__aeabi_uldivmod>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4613      	mov	r3, r2
 8001b86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b8a:	e064      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8c:	4b92      	ldr	r3, [pc, #584]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	099b      	lsrs	r3, r3, #6
 8001b92:	2200      	movs	r2, #0
 8001b94:	653b      	str	r3, [r7, #80]	; 0x50
 8001b96:	657a      	str	r2, [r7, #84]	; 0x54
 8001b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ba4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001ba8:	4622      	mov	r2, r4
 8001baa:	462b      	mov	r3, r5
 8001bac:	f04f 0000 	mov.w	r0, #0
 8001bb0:	f04f 0100 	mov.w	r1, #0
 8001bb4:	0159      	lsls	r1, r3, #5
 8001bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bba:	0150      	lsls	r0, r2, #5
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	1a51      	subs	r1, r2, r1
 8001bc4:	6139      	str	r1, [r7, #16]
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	eb63 0301 	sbc.w	r3, r3, r1
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bda:	4659      	mov	r1, fp
 8001bdc:	018b      	lsls	r3, r1, #6
 8001bde:	4651      	mov	r1, sl
 8001be0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001be4:	4651      	mov	r1, sl
 8001be6:	018a      	lsls	r2, r1, #6
 8001be8:	4651      	mov	r1, sl
 8001bea:	ebb2 0801 	subs.w	r8, r2, r1
 8001bee:	4659      	mov	r1, fp
 8001bf0:	eb63 0901 	sbc.w	r9, r3, r1
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c08:	4690      	mov	r8, r2
 8001c0a:	4699      	mov	r9, r3
 8001c0c:	4623      	mov	r3, r4
 8001c0e:	eb18 0303 	adds.w	r3, r8, r3
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	462b      	mov	r3, r5
 8001c16:	eb49 0303 	adc.w	r3, r9, r3
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c28:	4629      	mov	r1, r5
 8001c2a:	028b      	lsls	r3, r1, #10
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c32:	4621      	mov	r1, r4
 8001c34:	028a      	lsls	r2, r1, #10
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c3e:	2200      	movs	r2, #0
 8001c40:	643b      	str	r3, [r7, #64]	; 0x40
 8001c42:	647a      	str	r2, [r7, #68]	; 0x44
 8001c44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c48:	f7fe fb32 	bl	80002b0 <__aeabi_uldivmod>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4613      	mov	r3, r2
 8001c52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c56:	4b60      	ldr	r3, [pc, #384]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	0c1b      	lsrs	r3, r3, #16
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	3301      	adds	r3, #1
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001c68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001c78:	e0a6      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c7a:	4b57      	ldr	r3, [pc, #348]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c86:	4b54      	ldr	r3, [pc, #336]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d02a      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c92:	4b51      	ldr	r3, [pc, #324]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	099b      	lsrs	r3, r3, #6
 8001c98:	2200      	movs	r2, #0
 8001c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4b4e      	ldr	r3, [pc, #312]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ca8:	fb03 f201 	mul.w	r2, r3, r1
 8001cac:	2300      	movs	r3, #0
 8001cae:	fb00 f303 	mul.w	r3, r0, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a4a      	ldr	r2, [pc, #296]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001cb6:	fba0 1202 	umull	r1, r2, r0, r2
 8001cba:	677a      	str	r2, [r7, #116]	; 0x74
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	673a      	str	r2, [r7, #112]	; 0x70
 8001cc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001cc2:	4413      	add	r3, r2
 8001cc4:	677b      	str	r3, [r7, #116]	; 0x74
 8001cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cca:	2200      	movs	r2, #0
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8001cce:	637a      	str	r2, [r7, #52]	; 0x34
 8001cd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cd4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001cd8:	f7fe faea 	bl	80002b0 <__aeabi_uldivmod>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ce6:	e05b      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce8:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	099b      	lsrs	r3, r3, #6
 8001cee:	2200      	movs	r2, #0
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cfa:	623b      	str	r3, [r7, #32]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001d00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d04:	4642      	mov	r2, r8
 8001d06:	464b      	mov	r3, r9
 8001d08:	f04f 0000 	mov.w	r0, #0
 8001d0c:	f04f 0100 	mov.w	r1, #0
 8001d10:	0159      	lsls	r1, r3, #5
 8001d12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d16:	0150      	lsls	r0, r2, #5
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4641      	mov	r1, r8
 8001d1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d22:	4649      	mov	r1, r9
 8001d24:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d3c:	ebb2 040a 	subs.w	r4, r2, sl
 8001d40:	eb63 050b 	sbc.w	r5, r3, fp
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	00eb      	lsls	r3, r5, #3
 8001d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d52:	00e2      	lsls	r2, r4, #3
 8001d54:	4614      	mov	r4, r2
 8001d56:	461d      	mov	r5, r3
 8001d58:	4643      	mov	r3, r8
 8001d5a:	18e3      	adds	r3, r4, r3
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	464b      	mov	r3, r9
 8001d60:	eb45 0303 	adc.w	r3, r5, r3
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d72:	4629      	mov	r1, r5
 8001d74:	028b      	lsls	r3, r1, #10
 8001d76:	4621      	mov	r1, r4
 8001d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	028a      	lsls	r2, r1, #10
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	61fa      	str	r2, [r7, #28]
 8001d8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d92:	f7fe fa8d 	bl	80002b0 <__aeabi_uldivmod>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	0f1b      	lsrs	r3, r3, #28
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001dae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001dbe:	e003      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x34c>)
 8001dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001dc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3798      	adds	r7, #152	; 0x98
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	00f42400 	.word	0x00f42400
 8001de0:	017d7840 	.word	0x017d7840

08001de4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e28d      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8083 	beq.w	8001f0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e04:	4b94      	ldr	r3, [pc, #592]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d019      	beq.n	8001e44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e10:	4b91      	ldr	r3, [pc, #580]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e1c:	4b8e      	ldr	r3, [pc, #568]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e28:	d00c      	beq.n	8001e44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2a:	4b8b      	ldr	r3, [pc, #556]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d112      	bne.n	8001e5c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e36:	4b88      	ldr	r3, [pc, #544]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e42:	d10b      	bne.n	8001e5c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	4b84      	ldr	r3, [pc, #528]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d05b      	beq.n	8001f08 <HAL_RCC_OscConfig+0x124>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d157      	bne.n	8001f08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e25a      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e64:	d106      	bne.n	8001e74 <HAL_RCC_OscConfig+0x90>
 8001e66:	4b7c      	ldr	r3, [pc, #496]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a7b      	ldr	r2, [pc, #492]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e01d      	b.n	8001eb0 <HAL_RCC_OscConfig+0xcc>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0xb4>
 8001e7e:	4b76      	ldr	r3, [pc, #472]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a75      	ldr	r2, [pc, #468]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b73      	ldr	r3, [pc, #460]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a72      	ldr	r2, [pc, #456]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0xcc>
 8001e98:	4b6f      	ldr	r3, [pc, #444]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6e      	ldr	r2, [pc, #440]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b6c      	ldr	r3, [pc, #432]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a6b      	ldr	r2, [pc, #428]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f9fc 	bl	80012b4 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff f9f8 	bl	80012b4 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e21f      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b61      	ldr	r3, [pc, #388]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xdc>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f9e8 	bl	80012b4 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff f9e4 	bl	80012b4 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e20b      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	4b57      	ldr	r3, [pc, #348]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x104>
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d06f      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f16:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d017      	beq.n	8001f52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f22:	4b4d      	ldr	r3, [pc, #308]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d105      	bne.n	8001f3a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d11c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f46:	4b44      	ldr	r3, [pc, #272]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d116      	bne.n	8001f80 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	4b41      	ldr	r3, [pc, #260]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_RCC_OscConfig+0x186>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e1d3      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6a:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4937      	ldr	r1, [pc, #220]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	e03a      	b.n	8001ff6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d020      	beq.n	8001fca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f88:	4b34      	ldr	r3, [pc, #208]	; (800205c <HAL_RCC_OscConfig+0x278>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7ff f991 	bl	80012b4 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f96:	f7ff f98d 	bl	80012b4 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1b4      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4925      	ldr	r1, [pc, #148]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
 8001fc8:	e015      	b.n	8001ff6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_RCC_OscConfig+0x278>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7ff f970 	bl	80012b4 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7ff f96c 	bl	80012b4 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e193      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d036      	beq.n	8002070 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d016      	beq.n	8002038 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_RCC_OscConfig+0x27c>)
 800200c:	2201      	movs	r2, #1
 800200e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002010:	f7ff f950 	bl	80012b4 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002018:	f7ff f94c 	bl	80012b4 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e173      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 800202c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x234>
 8002036:	e01b      	b.n	8002070 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_RCC_OscConfig+0x27c>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203e:	f7ff f939 	bl	80012b4 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002044:	e00e      	b.n	8002064 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002046:	f7ff f935 	bl	80012b4 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d907      	bls.n	8002064 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e15c      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
 8002058:	40023800 	.word	0x40023800
 800205c:	42470000 	.word	0x42470000
 8002060:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002064:	4b8a      	ldr	r3, [pc, #552]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 8002066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1ea      	bne.n	8002046 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 8097 	beq.w	80021ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002082:	4b83      	ldr	r3, [pc, #524]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10f      	bne.n	80020ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	4b7f      	ldr	r3, [pc, #508]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a7e      	ldr	r2, [pc, #504]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b7c      	ldr	r3, [pc, #496]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020aa:	2301      	movs	r3, #1
 80020ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ae:	4b79      	ldr	r3, [pc, #484]	; (8002294 <HAL_RCC_OscConfig+0x4b0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d118      	bne.n	80020ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ba:	4b76      	ldr	r3, [pc, #472]	; (8002294 <HAL_RCC_OscConfig+0x4b0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a75      	ldr	r2, [pc, #468]	; (8002294 <HAL_RCC_OscConfig+0x4b0>)
 80020c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c6:	f7ff f8f5 	bl	80012b4 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ce:	f7ff f8f1 	bl	80012b4 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e118      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	4b6c      	ldr	r3, [pc, #432]	; (8002294 <HAL_RCC_OscConfig+0x4b0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x31e>
 80020f4:	4b66      	ldr	r3, [pc, #408]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	4a65      	ldr	r2, [pc, #404]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002100:	e01c      	b.n	800213c <HAL_RCC_OscConfig+0x358>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b05      	cmp	r3, #5
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x340>
 800210a:	4b61      	ldr	r3, [pc, #388]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	4a60      	ldr	r2, [pc, #384]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	6713      	str	r3, [r2, #112]	; 0x70
 8002116:	4b5e      	ldr	r3, [pc, #376]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	4a5d      	ldr	r2, [pc, #372]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6713      	str	r3, [r2, #112]	; 0x70
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0x358>
 8002124:	4b5a      	ldr	r3, [pc, #360]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	4a59      	ldr	r2, [pc, #356]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 800212a:	f023 0301 	bic.w	r3, r3, #1
 800212e:	6713      	str	r3, [r2, #112]	; 0x70
 8002130:	4b57      	ldr	r3, [pc, #348]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	4a56      	ldr	r2, [pc, #344]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 8002136:	f023 0304 	bic.w	r3, r3, #4
 800213a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d015      	beq.n	8002170 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7ff f8b6 	bl	80012b4 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214a:	e00a      	b.n	8002162 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214c:	f7ff f8b2 	bl	80012b4 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e0d7      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002162:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0ee      	beq.n	800214c <HAL_RCC_OscConfig+0x368>
 800216e:	e014      	b.n	800219a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002170:	f7ff f8a0 	bl	80012b4 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002176:	e00a      	b.n	800218e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002178:	f7ff f89c 	bl	80012b4 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e0c1      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218e:	4b40      	ldr	r3, [pc, #256]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1ee      	bne.n	8002178 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800219a:	7dfb      	ldrb	r3, [r7, #23]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d105      	bne.n	80021ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a0:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	4a3a      	ldr	r2, [pc, #232]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 80021a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80ad 	beq.w	8002310 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021b6:	4b36      	ldr	r3, [pc, #216]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d060      	beq.n	8002284 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d145      	bne.n	8002256 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ca:	4b33      	ldr	r3, [pc, #204]	; (8002298 <HAL_RCC_OscConfig+0x4b4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff f870 	bl	80012b4 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d8:	f7ff f86c 	bl	80012b4 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e093      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	4b29      	ldr	r3, [pc, #164]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69da      	ldr	r2, [r3, #28]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	019b      	lsls	r3, r3, #6
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	085b      	lsrs	r3, r3, #1
 800220e:	3b01      	subs	r3, #1
 8002210:	041b      	lsls	r3, r3, #16
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	061b      	lsls	r3, r3, #24
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	071b      	lsls	r3, r3, #28
 8002222:	491b      	ldr	r1, [pc, #108]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_RCC_OscConfig+0x4b4>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7ff f841 	bl	80012b4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002236:	f7ff f83d 	bl	80012b4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e064      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x452>
 8002254:	e05c      	b.n	8002310 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_RCC_OscConfig+0x4b4>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff f82a 	bl	80012b4 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff f826 	bl	80012b4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e04d      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_OscConfig+0x4ac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x480>
 8002282:	e045      	b.n	8002310 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d107      	bne.n	800229c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e040      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
 8002290:	40023800 	.word	0x40023800
 8002294:	40007000 	.word	0x40007000
 8002298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <HAL_RCC_OscConfig+0x538>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d030      	beq.n	800230c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d129      	bne.n	800230c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d122      	bne.n	800230c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022cc:	4013      	ands	r3, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d119      	bne.n	800230c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	3b01      	subs	r3, #1
 80022e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d10f      	bne.n	800230c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d107      	bne.n	800230c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800

08002320 <clock>:
 8002320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <clock+0x24>)
 8002324:	4669      	mov	r1, sp
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	f000 f8ac 	bl	8002484 <_times_r>
 800232c:	1c43      	adds	r3, r0, #1
 800232e:	d006      	beq.n	800233e <clock+0x1e>
 8002330:	e9dd 0300 	ldrd	r0, r3, [sp]
 8002334:	4418      	add	r0, r3
 8002336:	9b02      	ldr	r3, [sp, #8]
 8002338:	4418      	add	r0, r3
 800233a:	9b03      	ldr	r3, [sp, #12]
 800233c:	4418      	add	r0, r3
 800233e:	b005      	add	sp, #20
 8002340:	f85d fb04 	ldr.w	pc, [sp], #4
 8002344:	20000174 	.word	0x20000174

08002348 <__errno>:
 8002348:	4b01      	ldr	r3, [pc, #4]	; (8002350 <__errno+0x8>)
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000174 	.word	0x20000174

08002354 <__libc_init_array>:
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	4d0d      	ldr	r5, [pc, #52]	; (800238c <__libc_init_array+0x38>)
 8002358:	4c0d      	ldr	r4, [pc, #52]	; (8002390 <__libc_init_array+0x3c>)
 800235a:	1b64      	subs	r4, r4, r5
 800235c:	10a4      	asrs	r4, r4, #2
 800235e:	2600      	movs	r6, #0
 8002360:	42a6      	cmp	r6, r4
 8002362:	d109      	bne.n	8002378 <__libc_init_array+0x24>
 8002364:	4d0b      	ldr	r5, [pc, #44]	; (8002394 <__libc_init_array+0x40>)
 8002366:	4c0c      	ldr	r4, [pc, #48]	; (8002398 <__libc_init_array+0x44>)
 8002368:	f001 f88a 	bl	8003480 <_init>
 800236c:	1b64      	subs	r4, r4, r5
 800236e:	10a4      	asrs	r4, r4, #2
 8002370:	2600      	movs	r6, #0
 8002372:	42a6      	cmp	r6, r4
 8002374:	d105      	bne.n	8002382 <__libc_init_array+0x2e>
 8002376:	bd70      	pop	{r4, r5, r6, pc}
 8002378:	f855 3b04 	ldr.w	r3, [r5], #4
 800237c:	4798      	blx	r3
 800237e:	3601      	adds	r6, #1
 8002380:	e7ee      	b.n	8002360 <__libc_init_array+0xc>
 8002382:	f855 3b04 	ldr.w	r3, [r5], #4
 8002386:	4798      	blx	r3
 8002388:	3601      	adds	r6, #1
 800238a:	e7f2      	b.n	8002372 <__libc_init_array+0x1e>
 800238c:	08003638 	.word	0x08003638
 8002390:	08003638 	.word	0x08003638
 8002394:	08003638 	.word	0x08003638
 8002398:	0800363c 	.word	0x0800363c

0800239c <memset>:
 800239c:	4402      	add	r2, r0
 800239e:	4603      	mov	r3, r0
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d100      	bne.n	80023a6 <memset+0xa>
 80023a4:	4770      	bx	lr
 80023a6:	f803 1b01 	strb.w	r1, [r3], #1
 80023aa:	e7f9      	b.n	80023a0 <memset+0x4>

080023ac <srand>:
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <srand+0x44>)
 80023b0:	681d      	ldr	r5, [r3, #0]
 80023b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80023b4:	4604      	mov	r4, r0
 80023b6:	b9b3      	cbnz	r3, 80023e6 <srand+0x3a>
 80023b8:	2018      	movs	r0, #24
 80023ba:	f000 f897 	bl	80024ec <malloc>
 80023be:	4602      	mov	r2, r0
 80023c0:	63a8      	str	r0, [r5, #56]	; 0x38
 80023c2:	b920      	cbnz	r0, 80023ce <srand+0x22>
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <srand+0x48>)
 80023c6:	480c      	ldr	r0, [pc, #48]	; (80023f8 <srand+0x4c>)
 80023c8:	2142      	movs	r1, #66	; 0x42
 80023ca:	f000 f85f 	bl	800248c <__assert_func>
 80023ce:	490b      	ldr	r1, [pc, #44]	; (80023fc <srand+0x50>)
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <srand+0x54>)
 80023d2:	e9c0 1300 	strd	r1, r3, [r0]
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <srand+0x58>)
 80023d8:	6083      	str	r3, [r0, #8]
 80023da:	230b      	movs	r3, #11
 80023dc:	8183      	strh	r3, [r0, #12]
 80023de:	2100      	movs	r1, #0
 80023e0:	2001      	movs	r0, #1
 80023e2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80023e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80023e8:	2200      	movs	r2, #0
 80023ea:	611c      	str	r4, [r3, #16]
 80023ec:	615a      	str	r2, [r3, #20]
 80023ee:	bd38      	pop	{r3, r4, r5, pc}
 80023f0:	20000174 	.word	0x20000174
 80023f4:	080034ec 	.word	0x080034ec
 80023f8:	08003503 	.word	0x08003503
 80023fc:	abcd330e 	.word	0xabcd330e
 8002400:	e66d1234 	.word	0xe66d1234
 8002404:	0005deec 	.word	0x0005deec

08002408 <rand>:
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <rand+0x5c>)
 800240a:	b510      	push	{r4, lr}
 800240c:	681c      	ldr	r4, [r3, #0]
 800240e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002410:	b9b3      	cbnz	r3, 8002440 <rand+0x38>
 8002412:	2018      	movs	r0, #24
 8002414:	f000 f86a 	bl	80024ec <malloc>
 8002418:	63a0      	str	r0, [r4, #56]	; 0x38
 800241a:	b928      	cbnz	r0, 8002428 <rand+0x20>
 800241c:	4602      	mov	r2, r0
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <rand+0x60>)
 8002420:	4812      	ldr	r0, [pc, #72]	; (800246c <rand+0x64>)
 8002422:	214e      	movs	r1, #78	; 0x4e
 8002424:	f000 f832 	bl	800248c <__assert_func>
 8002428:	4a11      	ldr	r2, [pc, #68]	; (8002470 <rand+0x68>)
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <rand+0x6c>)
 800242c:	e9c0 2300 	strd	r2, r3, [r0]
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <rand+0x70>)
 8002432:	6083      	str	r3, [r0, #8]
 8002434:	230b      	movs	r3, #11
 8002436:	8183      	strh	r3, [r0, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	2300      	movs	r3, #0
 800243c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002440:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002442:	4a0e      	ldr	r2, [pc, #56]	; (800247c <rand+0x74>)
 8002444:	6920      	ldr	r0, [r4, #16]
 8002446:	6963      	ldr	r3, [r4, #20]
 8002448:	490d      	ldr	r1, [pc, #52]	; (8002480 <rand+0x78>)
 800244a:	4342      	muls	r2, r0
 800244c:	fb01 2203 	mla	r2, r1, r3, r2
 8002450:	fba0 0101 	umull	r0, r1, r0, r1
 8002454:	1c43      	adds	r3, r0, #1
 8002456:	eb42 0001 	adc.w	r0, r2, r1
 800245a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800245e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002462:	bd10      	pop	{r4, pc}
 8002464:	20000174 	.word	0x20000174
 8002468:	080034ec 	.word	0x080034ec
 800246c:	08003503 	.word	0x08003503
 8002470:	abcd330e 	.word	0xabcd330e
 8002474:	e66d1234 	.word	0xe66d1234
 8002478:	0005deec 	.word	0x0005deec
 800247c:	5851f42d 	.word	0x5851f42d
 8002480:	4c957f2d 	.word	0x4c957f2d

08002484 <_times_r>:
 8002484:	4608      	mov	r0, r1
 8002486:	f7fe be30 	b.w	80010ea <_times>
	...

0800248c <__assert_func>:
 800248c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800248e:	4614      	mov	r4, r2
 8002490:	461a      	mov	r2, r3
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <__assert_func+0x2c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4605      	mov	r5, r0
 8002498:	68d8      	ldr	r0, [r3, #12]
 800249a:	b14c      	cbz	r4, 80024b0 <__assert_func+0x24>
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <__assert_func+0x30>)
 800249e:	9100      	str	r1, [sp, #0]
 80024a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80024a4:	4906      	ldr	r1, [pc, #24]	; (80024c0 <__assert_func+0x34>)
 80024a6:	462b      	mov	r3, r5
 80024a8:	f000 f80e 	bl	80024c8 <fiprintf>
 80024ac:	f000 fcc4 	bl	8002e38 <abort>
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <__assert_func+0x38>)
 80024b2:	461c      	mov	r4, r3
 80024b4:	e7f3      	b.n	800249e <__assert_func+0x12>
 80024b6:	bf00      	nop
 80024b8:	20000174 	.word	0x20000174
 80024bc:	0800355e 	.word	0x0800355e
 80024c0:	0800356b 	.word	0x0800356b
 80024c4:	08003599 	.word	0x08003599

080024c8 <fiprintf>:
 80024c8:	b40e      	push	{r1, r2, r3}
 80024ca:	b503      	push	{r0, r1, lr}
 80024cc:	4601      	mov	r1, r0
 80024ce:	ab03      	add	r3, sp, #12
 80024d0:	4805      	ldr	r0, [pc, #20]	; (80024e8 <fiprintf+0x20>)
 80024d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80024d6:	6800      	ldr	r0, [r0, #0]
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	f000 f919 	bl	8002710 <_vfiprintf_r>
 80024de:	b002      	add	sp, #8
 80024e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80024e4:	b003      	add	sp, #12
 80024e6:	4770      	bx	lr
 80024e8:	20000174 	.word	0x20000174

080024ec <malloc>:
 80024ec:	4b02      	ldr	r3, [pc, #8]	; (80024f8 <malloc+0xc>)
 80024ee:	4601      	mov	r1, r0
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	f000 b86f 	b.w	80025d4 <_malloc_r>
 80024f6:	bf00      	nop
 80024f8:	20000174 	.word	0x20000174

080024fc <_free_r>:
 80024fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024fe:	2900      	cmp	r1, #0
 8002500:	d044      	beq.n	800258c <_free_r+0x90>
 8002502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002506:	9001      	str	r0, [sp, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	f1a1 0404 	sub.w	r4, r1, #4
 800250e:	bfb8      	it	lt
 8002510:	18e4      	addlt	r4, r4, r3
 8002512:	f000 feb9 	bl	8003288 <__malloc_lock>
 8002516:	4a1e      	ldr	r2, [pc, #120]	; (8002590 <_free_r+0x94>)
 8002518:	9801      	ldr	r0, [sp, #4]
 800251a:	6813      	ldr	r3, [r2, #0]
 800251c:	b933      	cbnz	r3, 800252c <_free_r+0x30>
 800251e:	6063      	str	r3, [r4, #4]
 8002520:	6014      	str	r4, [r2, #0]
 8002522:	b003      	add	sp, #12
 8002524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002528:	f000 beb4 	b.w	8003294 <__malloc_unlock>
 800252c:	42a3      	cmp	r3, r4
 800252e:	d908      	bls.n	8002542 <_free_r+0x46>
 8002530:	6825      	ldr	r5, [r4, #0]
 8002532:	1961      	adds	r1, r4, r5
 8002534:	428b      	cmp	r3, r1
 8002536:	bf01      	itttt	eq
 8002538:	6819      	ldreq	r1, [r3, #0]
 800253a:	685b      	ldreq	r3, [r3, #4]
 800253c:	1949      	addeq	r1, r1, r5
 800253e:	6021      	streq	r1, [r4, #0]
 8002540:	e7ed      	b.n	800251e <_free_r+0x22>
 8002542:	461a      	mov	r2, r3
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	b10b      	cbz	r3, 800254c <_free_r+0x50>
 8002548:	42a3      	cmp	r3, r4
 800254a:	d9fa      	bls.n	8002542 <_free_r+0x46>
 800254c:	6811      	ldr	r1, [r2, #0]
 800254e:	1855      	adds	r5, r2, r1
 8002550:	42a5      	cmp	r5, r4
 8002552:	d10b      	bne.n	800256c <_free_r+0x70>
 8002554:	6824      	ldr	r4, [r4, #0]
 8002556:	4421      	add	r1, r4
 8002558:	1854      	adds	r4, r2, r1
 800255a:	42a3      	cmp	r3, r4
 800255c:	6011      	str	r1, [r2, #0]
 800255e:	d1e0      	bne.n	8002522 <_free_r+0x26>
 8002560:	681c      	ldr	r4, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	6053      	str	r3, [r2, #4]
 8002566:	4421      	add	r1, r4
 8002568:	6011      	str	r1, [r2, #0]
 800256a:	e7da      	b.n	8002522 <_free_r+0x26>
 800256c:	d902      	bls.n	8002574 <_free_r+0x78>
 800256e:	230c      	movs	r3, #12
 8002570:	6003      	str	r3, [r0, #0]
 8002572:	e7d6      	b.n	8002522 <_free_r+0x26>
 8002574:	6825      	ldr	r5, [r4, #0]
 8002576:	1961      	adds	r1, r4, r5
 8002578:	428b      	cmp	r3, r1
 800257a:	bf04      	itt	eq
 800257c:	6819      	ldreq	r1, [r3, #0]
 800257e:	685b      	ldreq	r3, [r3, #4]
 8002580:	6063      	str	r3, [r4, #4]
 8002582:	bf04      	itt	eq
 8002584:	1949      	addeq	r1, r1, r5
 8002586:	6021      	streq	r1, [r4, #0]
 8002588:	6054      	str	r4, [r2, #4]
 800258a:	e7ca      	b.n	8002522 <_free_r+0x26>
 800258c:	b003      	add	sp, #12
 800258e:	bd30      	pop	{r4, r5, pc}
 8002590:	20000200 	.word	0x20000200

08002594 <sbrk_aligned>:
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	4e0e      	ldr	r6, [pc, #56]	; (80025d0 <sbrk_aligned+0x3c>)
 8002598:	460c      	mov	r4, r1
 800259a:	6831      	ldr	r1, [r6, #0]
 800259c:	4605      	mov	r5, r0
 800259e:	b911      	cbnz	r1, 80025a6 <sbrk_aligned+0x12>
 80025a0:	f000 fb7a 	bl	8002c98 <_sbrk_r>
 80025a4:	6030      	str	r0, [r6, #0]
 80025a6:	4621      	mov	r1, r4
 80025a8:	4628      	mov	r0, r5
 80025aa:	f000 fb75 	bl	8002c98 <_sbrk_r>
 80025ae:	1c43      	adds	r3, r0, #1
 80025b0:	d00a      	beq.n	80025c8 <sbrk_aligned+0x34>
 80025b2:	1cc4      	adds	r4, r0, #3
 80025b4:	f024 0403 	bic.w	r4, r4, #3
 80025b8:	42a0      	cmp	r0, r4
 80025ba:	d007      	beq.n	80025cc <sbrk_aligned+0x38>
 80025bc:	1a21      	subs	r1, r4, r0
 80025be:	4628      	mov	r0, r5
 80025c0:	f000 fb6a 	bl	8002c98 <_sbrk_r>
 80025c4:	3001      	adds	r0, #1
 80025c6:	d101      	bne.n	80025cc <sbrk_aligned+0x38>
 80025c8:	f04f 34ff 	mov.w	r4, #4294967295
 80025cc:	4620      	mov	r0, r4
 80025ce:	bd70      	pop	{r4, r5, r6, pc}
 80025d0:	20000204 	.word	0x20000204

080025d4 <_malloc_r>:
 80025d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025d8:	1ccd      	adds	r5, r1, #3
 80025da:	f025 0503 	bic.w	r5, r5, #3
 80025de:	3508      	adds	r5, #8
 80025e0:	2d0c      	cmp	r5, #12
 80025e2:	bf38      	it	cc
 80025e4:	250c      	movcc	r5, #12
 80025e6:	2d00      	cmp	r5, #0
 80025e8:	4607      	mov	r7, r0
 80025ea:	db01      	blt.n	80025f0 <_malloc_r+0x1c>
 80025ec:	42a9      	cmp	r1, r5
 80025ee:	d905      	bls.n	80025fc <_malloc_r+0x28>
 80025f0:	230c      	movs	r3, #12
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	2600      	movs	r6, #0
 80025f6:	4630      	mov	r0, r6
 80025f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025fc:	4e2e      	ldr	r6, [pc, #184]	; (80026b8 <_malloc_r+0xe4>)
 80025fe:	f000 fe43 	bl	8003288 <__malloc_lock>
 8002602:	6833      	ldr	r3, [r6, #0]
 8002604:	461c      	mov	r4, r3
 8002606:	bb34      	cbnz	r4, 8002656 <_malloc_r+0x82>
 8002608:	4629      	mov	r1, r5
 800260a:	4638      	mov	r0, r7
 800260c:	f7ff ffc2 	bl	8002594 <sbrk_aligned>
 8002610:	1c43      	adds	r3, r0, #1
 8002612:	4604      	mov	r4, r0
 8002614:	d14d      	bne.n	80026b2 <_malloc_r+0xde>
 8002616:	6834      	ldr	r4, [r6, #0]
 8002618:	4626      	mov	r6, r4
 800261a:	2e00      	cmp	r6, #0
 800261c:	d140      	bne.n	80026a0 <_malloc_r+0xcc>
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	4631      	mov	r1, r6
 8002622:	4638      	mov	r0, r7
 8002624:	eb04 0803 	add.w	r8, r4, r3
 8002628:	f000 fb36 	bl	8002c98 <_sbrk_r>
 800262c:	4580      	cmp	r8, r0
 800262e:	d13a      	bne.n	80026a6 <_malloc_r+0xd2>
 8002630:	6821      	ldr	r1, [r4, #0]
 8002632:	3503      	adds	r5, #3
 8002634:	1a6d      	subs	r5, r5, r1
 8002636:	f025 0503 	bic.w	r5, r5, #3
 800263a:	3508      	adds	r5, #8
 800263c:	2d0c      	cmp	r5, #12
 800263e:	bf38      	it	cc
 8002640:	250c      	movcc	r5, #12
 8002642:	4629      	mov	r1, r5
 8002644:	4638      	mov	r0, r7
 8002646:	f7ff ffa5 	bl	8002594 <sbrk_aligned>
 800264a:	3001      	adds	r0, #1
 800264c:	d02b      	beq.n	80026a6 <_malloc_r+0xd2>
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	442b      	add	r3, r5
 8002652:	6023      	str	r3, [r4, #0]
 8002654:	e00e      	b.n	8002674 <_malloc_r+0xa0>
 8002656:	6822      	ldr	r2, [r4, #0]
 8002658:	1b52      	subs	r2, r2, r5
 800265a:	d41e      	bmi.n	800269a <_malloc_r+0xc6>
 800265c:	2a0b      	cmp	r2, #11
 800265e:	d916      	bls.n	800268e <_malloc_r+0xba>
 8002660:	1961      	adds	r1, r4, r5
 8002662:	42a3      	cmp	r3, r4
 8002664:	6025      	str	r5, [r4, #0]
 8002666:	bf18      	it	ne
 8002668:	6059      	strne	r1, [r3, #4]
 800266a:	6863      	ldr	r3, [r4, #4]
 800266c:	bf08      	it	eq
 800266e:	6031      	streq	r1, [r6, #0]
 8002670:	5162      	str	r2, [r4, r5]
 8002672:	604b      	str	r3, [r1, #4]
 8002674:	4638      	mov	r0, r7
 8002676:	f104 060b 	add.w	r6, r4, #11
 800267a:	f000 fe0b 	bl	8003294 <__malloc_unlock>
 800267e:	f026 0607 	bic.w	r6, r6, #7
 8002682:	1d23      	adds	r3, r4, #4
 8002684:	1af2      	subs	r2, r6, r3
 8002686:	d0b6      	beq.n	80025f6 <_malloc_r+0x22>
 8002688:	1b9b      	subs	r3, r3, r6
 800268a:	50a3      	str	r3, [r4, r2]
 800268c:	e7b3      	b.n	80025f6 <_malloc_r+0x22>
 800268e:	6862      	ldr	r2, [r4, #4]
 8002690:	42a3      	cmp	r3, r4
 8002692:	bf0c      	ite	eq
 8002694:	6032      	streq	r2, [r6, #0]
 8002696:	605a      	strne	r2, [r3, #4]
 8002698:	e7ec      	b.n	8002674 <_malloc_r+0xa0>
 800269a:	4623      	mov	r3, r4
 800269c:	6864      	ldr	r4, [r4, #4]
 800269e:	e7b2      	b.n	8002606 <_malloc_r+0x32>
 80026a0:	4634      	mov	r4, r6
 80026a2:	6876      	ldr	r6, [r6, #4]
 80026a4:	e7b9      	b.n	800261a <_malloc_r+0x46>
 80026a6:	230c      	movs	r3, #12
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	4638      	mov	r0, r7
 80026ac:	f000 fdf2 	bl	8003294 <__malloc_unlock>
 80026b0:	e7a1      	b.n	80025f6 <_malloc_r+0x22>
 80026b2:	6025      	str	r5, [r4, #0]
 80026b4:	e7de      	b.n	8002674 <_malloc_r+0xa0>
 80026b6:	bf00      	nop
 80026b8:	20000200 	.word	0x20000200

080026bc <__sfputc_r>:
 80026bc:	6893      	ldr	r3, [r2, #8]
 80026be:	3b01      	subs	r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	b410      	push	{r4}
 80026c4:	6093      	str	r3, [r2, #8]
 80026c6:	da08      	bge.n	80026da <__sfputc_r+0x1e>
 80026c8:	6994      	ldr	r4, [r2, #24]
 80026ca:	42a3      	cmp	r3, r4
 80026cc:	db01      	blt.n	80026d2 <__sfputc_r+0x16>
 80026ce:	290a      	cmp	r1, #10
 80026d0:	d103      	bne.n	80026da <__sfputc_r+0x1e>
 80026d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026d6:	f000 baef 	b.w	8002cb8 <__swbuf_r>
 80026da:	6813      	ldr	r3, [r2, #0]
 80026dc:	1c58      	adds	r0, r3, #1
 80026de:	6010      	str	r0, [r2, #0]
 80026e0:	7019      	strb	r1, [r3, #0]
 80026e2:	4608      	mov	r0, r1
 80026e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <__sfputs_r>:
 80026ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ec:	4606      	mov	r6, r0
 80026ee:	460f      	mov	r7, r1
 80026f0:	4614      	mov	r4, r2
 80026f2:	18d5      	adds	r5, r2, r3
 80026f4:	42ac      	cmp	r4, r5
 80026f6:	d101      	bne.n	80026fc <__sfputs_r+0x12>
 80026f8:	2000      	movs	r0, #0
 80026fa:	e007      	b.n	800270c <__sfputs_r+0x22>
 80026fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002700:	463a      	mov	r2, r7
 8002702:	4630      	mov	r0, r6
 8002704:	f7ff ffda 	bl	80026bc <__sfputc_r>
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	d1f3      	bne.n	80026f4 <__sfputs_r+0xa>
 800270c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002710 <_vfiprintf_r>:
 8002710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002714:	460d      	mov	r5, r1
 8002716:	b09d      	sub	sp, #116	; 0x74
 8002718:	4614      	mov	r4, r2
 800271a:	4698      	mov	r8, r3
 800271c:	4606      	mov	r6, r0
 800271e:	b118      	cbz	r0, 8002728 <_vfiprintf_r+0x18>
 8002720:	6983      	ldr	r3, [r0, #24]
 8002722:	b90b      	cbnz	r3, 8002728 <_vfiprintf_r+0x18>
 8002724:	f000 fcaa 	bl	800307c <__sinit>
 8002728:	4b89      	ldr	r3, [pc, #548]	; (8002950 <_vfiprintf_r+0x240>)
 800272a:	429d      	cmp	r5, r3
 800272c:	d11b      	bne.n	8002766 <_vfiprintf_r+0x56>
 800272e:	6875      	ldr	r5, [r6, #4]
 8002730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002732:	07d9      	lsls	r1, r3, #31
 8002734:	d405      	bmi.n	8002742 <_vfiprintf_r+0x32>
 8002736:	89ab      	ldrh	r3, [r5, #12]
 8002738:	059a      	lsls	r2, r3, #22
 800273a:	d402      	bmi.n	8002742 <_vfiprintf_r+0x32>
 800273c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800273e:	f000 fd3b 	bl	80031b8 <__retarget_lock_acquire_recursive>
 8002742:	89ab      	ldrh	r3, [r5, #12]
 8002744:	071b      	lsls	r3, r3, #28
 8002746:	d501      	bpl.n	800274c <_vfiprintf_r+0x3c>
 8002748:	692b      	ldr	r3, [r5, #16]
 800274a:	b9eb      	cbnz	r3, 8002788 <_vfiprintf_r+0x78>
 800274c:	4629      	mov	r1, r5
 800274e:	4630      	mov	r0, r6
 8002750:	f000 fb04 	bl	8002d5c <__swsetup_r>
 8002754:	b1c0      	cbz	r0, 8002788 <_vfiprintf_r+0x78>
 8002756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002758:	07dc      	lsls	r4, r3, #31
 800275a:	d50e      	bpl.n	800277a <_vfiprintf_r+0x6a>
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	b01d      	add	sp, #116	; 0x74
 8002762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002766:	4b7b      	ldr	r3, [pc, #492]	; (8002954 <_vfiprintf_r+0x244>)
 8002768:	429d      	cmp	r5, r3
 800276a:	d101      	bne.n	8002770 <_vfiprintf_r+0x60>
 800276c:	68b5      	ldr	r5, [r6, #8]
 800276e:	e7df      	b.n	8002730 <_vfiprintf_r+0x20>
 8002770:	4b79      	ldr	r3, [pc, #484]	; (8002958 <_vfiprintf_r+0x248>)
 8002772:	429d      	cmp	r5, r3
 8002774:	bf08      	it	eq
 8002776:	68f5      	ldreq	r5, [r6, #12]
 8002778:	e7da      	b.n	8002730 <_vfiprintf_r+0x20>
 800277a:	89ab      	ldrh	r3, [r5, #12]
 800277c:	0598      	lsls	r0, r3, #22
 800277e:	d4ed      	bmi.n	800275c <_vfiprintf_r+0x4c>
 8002780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002782:	f000 fd1a 	bl	80031ba <__retarget_lock_release_recursive>
 8002786:	e7e9      	b.n	800275c <_vfiprintf_r+0x4c>
 8002788:	2300      	movs	r3, #0
 800278a:	9309      	str	r3, [sp, #36]	; 0x24
 800278c:	2320      	movs	r3, #32
 800278e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002792:	f8cd 800c 	str.w	r8, [sp, #12]
 8002796:	2330      	movs	r3, #48	; 0x30
 8002798:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800295c <_vfiprintf_r+0x24c>
 800279c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027a0:	f04f 0901 	mov.w	r9, #1
 80027a4:	4623      	mov	r3, r4
 80027a6:	469a      	mov	sl, r3
 80027a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027ac:	b10a      	cbz	r2, 80027b2 <_vfiprintf_r+0xa2>
 80027ae:	2a25      	cmp	r2, #37	; 0x25
 80027b0:	d1f9      	bne.n	80027a6 <_vfiprintf_r+0x96>
 80027b2:	ebba 0b04 	subs.w	fp, sl, r4
 80027b6:	d00b      	beq.n	80027d0 <_vfiprintf_r+0xc0>
 80027b8:	465b      	mov	r3, fp
 80027ba:	4622      	mov	r2, r4
 80027bc:	4629      	mov	r1, r5
 80027be:	4630      	mov	r0, r6
 80027c0:	f7ff ff93 	bl	80026ea <__sfputs_r>
 80027c4:	3001      	adds	r0, #1
 80027c6:	f000 80aa 	beq.w	800291e <_vfiprintf_r+0x20e>
 80027ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027cc:	445a      	add	r2, fp
 80027ce:	9209      	str	r2, [sp, #36]	; 0x24
 80027d0:	f89a 3000 	ldrb.w	r3, [sl]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80a2 	beq.w	800291e <_vfiprintf_r+0x20e>
 80027da:	2300      	movs	r3, #0
 80027dc:	f04f 32ff 	mov.w	r2, #4294967295
 80027e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027e4:	f10a 0a01 	add.w	sl, sl, #1
 80027e8:	9304      	str	r3, [sp, #16]
 80027ea:	9307      	str	r3, [sp, #28]
 80027ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027f0:	931a      	str	r3, [sp, #104]	; 0x68
 80027f2:	4654      	mov	r4, sl
 80027f4:	2205      	movs	r2, #5
 80027f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027fa:	4858      	ldr	r0, [pc, #352]	; (800295c <_vfiprintf_r+0x24c>)
 80027fc:	f7fd fd08 	bl	8000210 <memchr>
 8002800:	9a04      	ldr	r2, [sp, #16]
 8002802:	b9d8      	cbnz	r0, 800283c <_vfiprintf_r+0x12c>
 8002804:	06d1      	lsls	r1, r2, #27
 8002806:	bf44      	itt	mi
 8002808:	2320      	movmi	r3, #32
 800280a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800280e:	0713      	lsls	r3, r2, #28
 8002810:	bf44      	itt	mi
 8002812:	232b      	movmi	r3, #43	; 0x2b
 8002814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002818:	f89a 3000 	ldrb.w	r3, [sl]
 800281c:	2b2a      	cmp	r3, #42	; 0x2a
 800281e:	d015      	beq.n	800284c <_vfiprintf_r+0x13c>
 8002820:	9a07      	ldr	r2, [sp, #28]
 8002822:	4654      	mov	r4, sl
 8002824:	2000      	movs	r0, #0
 8002826:	f04f 0c0a 	mov.w	ip, #10
 800282a:	4621      	mov	r1, r4
 800282c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002830:	3b30      	subs	r3, #48	; 0x30
 8002832:	2b09      	cmp	r3, #9
 8002834:	d94e      	bls.n	80028d4 <_vfiprintf_r+0x1c4>
 8002836:	b1b0      	cbz	r0, 8002866 <_vfiprintf_r+0x156>
 8002838:	9207      	str	r2, [sp, #28]
 800283a:	e014      	b.n	8002866 <_vfiprintf_r+0x156>
 800283c:	eba0 0308 	sub.w	r3, r0, r8
 8002840:	fa09 f303 	lsl.w	r3, r9, r3
 8002844:	4313      	orrs	r3, r2
 8002846:	9304      	str	r3, [sp, #16]
 8002848:	46a2      	mov	sl, r4
 800284a:	e7d2      	b.n	80027f2 <_vfiprintf_r+0xe2>
 800284c:	9b03      	ldr	r3, [sp, #12]
 800284e:	1d19      	adds	r1, r3, #4
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	9103      	str	r1, [sp, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	bfbb      	ittet	lt
 8002858:	425b      	neglt	r3, r3
 800285a:	f042 0202 	orrlt.w	r2, r2, #2
 800285e:	9307      	strge	r3, [sp, #28]
 8002860:	9307      	strlt	r3, [sp, #28]
 8002862:	bfb8      	it	lt
 8002864:	9204      	strlt	r2, [sp, #16]
 8002866:	7823      	ldrb	r3, [r4, #0]
 8002868:	2b2e      	cmp	r3, #46	; 0x2e
 800286a:	d10c      	bne.n	8002886 <_vfiprintf_r+0x176>
 800286c:	7863      	ldrb	r3, [r4, #1]
 800286e:	2b2a      	cmp	r3, #42	; 0x2a
 8002870:	d135      	bne.n	80028de <_vfiprintf_r+0x1ce>
 8002872:	9b03      	ldr	r3, [sp, #12]
 8002874:	1d1a      	adds	r2, r3, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	9203      	str	r2, [sp, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	bfb8      	it	lt
 800287e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002882:	3402      	adds	r4, #2
 8002884:	9305      	str	r3, [sp, #20]
 8002886:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800296c <_vfiprintf_r+0x25c>
 800288a:	7821      	ldrb	r1, [r4, #0]
 800288c:	2203      	movs	r2, #3
 800288e:	4650      	mov	r0, sl
 8002890:	f7fd fcbe 	bl	8000210 <memchr>
 8002894:	b140      	cbz	r0, 80028a8 <_vfiprintf_r+0x198>
 8002896:	2340      	movs	r3, #64	; 0x40
 8002898:	eba0 000a 	sub.w	r0, r0, sl
 800289c:	fa03 f000 	lsl.w	r0, r3, r0
 80028a0:	9b04      	ldr	r3, [sp, #16]
 80028a2:	4303      	orrs	r3, r0
 80028a4:	3401      	adds	r4, #1
 80028a6:	9304      	str	r3, [sp, #16]
 80028a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028ac:	482c      	ldr	r0, [pc, #176]	; (8002960 <_vfiprintf_r+0x250>)
 80028ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028b2:	2206      	movs	r2, #6
 80028b4:	f7fd fcac 	bl	8000210 <memchr>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d03f      	beq.n	800293c <_vfiprintf_r+0x22c>
 80028bc:	4b29      	ldr	r3, [pc, #164]	; (8002964 <_vfiprintf_r+0x254>)
 80028be:	bb1b      	cbnz	r3, 8002908 <_vfiprintf_r+0x1f8>
 80028c0:	9b03      	ldr	r3, [sp, #12]
 80028c2:	3307      	adds	r3, #7
 80028c4:	f023 0307 	bic.w	r3, r3, #7
 80028c8:	3308      	adds	r3, #8
 80028ca:	9303      	str	r3, [sp, #12]
 80028cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028ce:	443b      	add	r3, r7
 80028d0:	9309      	str	r3, [sp, #36]	; 0x24
 80028d2:	e767      	b.n	80027a4 <_vfiprintf_r+0x94>
 80028d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80028d8:	460c      	mov	r4, r1
 80028da:	2001      	movs	r0, #1
 80028dc:	e7a5      	b.n	800282a <_vfiprintf_r+0x11a>
 80028de:	2300      	movs	r3, #0
 80028e0:	3401      	adds	r4, #1
 80028e2:	9305      	str	r3, [sp, #20]
 80028e4:	4619      	mov	r1, r3
 80028e6:	f04f 0c0a 	mov.w	ip, #10
 80028ea:	4620      	mov	r0, r4
 80028ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028f0:	3a30      	subs	r2, #48	; 0x30
 80028f2:	2a09      	cmp	r2, #9
 80028f4:	d903      	bls.n	80028fe <_vfiprintf_r+0x1ee>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0c5      	beq.n	8002886 <_vfiprintf_r+0x176>
 80028fa:	9105      	str	r1, [sp, #20]
 80028fc:	e7c3      	b.n	8002886 <_vfiprintf_r+0x176>
 80028fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8002902:	4604      	mov	r4, r0
 8002904:	2301      	movs	r3, #1
 8002906:	e7f0      	b.n	80028ea <_vfiprintf_r+0x1da>
 8002908:	ab03      	add	r3, sp, #12
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	462a      	mov	r2, r5
 800290e:	4b16      	ldr	r3, [pc, #88]	; (8002968 <_vfiprintf_r+0x258>)
 8002910:	a904      	add	r1, sp, #16
 8002912:	4630      	mov	r0, r6
 8002914:	f3af 8000 	nop.w
 8002918:	4607      	mov	r7, r0
 800291a:	1c78      	adds	r0, r7, #1
 800291c:	d1d6      	bne.n	80028cc <_vfiprintf_r+0x1bc>
 800291e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002920:	07d9      	lsls	r1, r3, #31
 8002922:	d405      	bmi.n	8002930 <_vfiprintf_r+0x220>
 8002924:	89ab      	ldrh	r3, [r5, #12]
 8002926:	059a      	lsls	r2, r3, #22
 8002928:	d402      	bmi.n	8002930 <_vfiprintf_r+0x220>
 800292a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800292c:	f000 fc45 	bl	80031ba <__retarget_lock_release_recursive>
 8002930:	89ab      	ldrh	r3, [r5, #12]
 8002932:	065b      	lsls	r3, r3, #25
 8002934:	f53f af12 	bmi.w	800275c <_vfiprintf_r+0x4c>
 8002938:	9809      	ldr	r0, [sp, #36]	; 0x24
 800293a:	e711      	b.n	8002760 <_vfiprintf_r+0x50>
 800293c:	ab03      	add	r3, sp, #12
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	462a      	mov	r2, r5
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <_vfiprintf_r+0x258>)
 8002944:	a904      	add	r1, sp, #16
 8002946:	4630      	mov	r0, r6
 8002948:	f000 f880 	bl	8002a4c <_printf_i>
 800294c:	e7e4      	b.n	8002918 <_vfiprintf_r+0x208>
 800294e:	bf00      	nop
 8002950:	080035f0 	.word	0x080035f0
 8002954:	08003610 	.word	0x08003610
 8002958:	080035d0 	.word	0x080035d0
 800295c:	0800359a 	.word	0x0800359a
 8002960:	080035a4 	.word	0x080035a4
 8002964:	00000000 	.word	0x00000000
 8002968:	080026eb 	.word	0x080026eb
 800296c:	080035a0 	.word	0x080035a0

08002970 <_printf_common>:
 8002970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002974:	4616      	mov	r6, r2
 8002976:	4699      	mov	r9, r3
 8002978:	688a      	ldr	r2, [r1, #8]
 800297a:	690b      	ldr	r3, [r1, #16]
 800297c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002980:	4293      	cmp	r3, r2
 8002982:	bfb8      	it	lt
 8002984:	4613      	movlt	r3, r2
 8002986:	6033      	str	r3, [r6, #0]
 8002988:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800298c:	4607      	mov	r7, r0
 800298e:	460c      	mov	r4, r1
 8002990:	b10a      	cbz	r2, 8002996 <_printf_common+0x26>
 8002992:	3301      	adds	r3, #1
 8002994:	6033      	str	r3, [r6, #0]
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	0699      	lsls	r1, r3, #26
 800299a:	bf42      	ittt	mi
 800299c:	6833      	ldrmi	r3, [r6, #0]
 800299e:	3302      	addmi	r3, #2
 80029a0:	6033      	strmi	r3, [r6, #0]
 80029a2:	6825      	ldr	r5, [r4, #0]
 80029a4:	f015 0506 	ands.w	r5, r5, #6
 80029a8:	d106      	bne.n	80029b8 <_printf_common+0x48>
 80029aa:	f104 0a19 	add.w	sl, r4, #25
 80029ae:	68e3      	ldr	r3, [r4, #12]
 80029b0:	6832      	ldr	r2, [r6, #0]
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	42ab      	cmp	r3, r5
 80029b6:	dc26      	bgt.n	8002a06 <_printf_common+0x96>
 80029b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029bc:	1e13      	subs	r3, r2, #0
 80029be:	6822      	ldr	r2, [r4, #0]
 80029c0:	bf18      	it	ne
 80029c2:	2301      	movne	r3, #1
 80029c4:	0692      	lsls	r2, r2, #26
 80029c6:	d42b      	bmi.n	8002a20 <_printf_common+0xb0>
 80029c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029cc:	4649      	mov	r1, r9
 80029ce:	4638      	mov	r0, r7
 80029d0:	47c0      	blx	r8
 80029d2:	3001      	adds	r0, #1
 80029d4:	d01e      	beq.n	8002a14 <_printf_common+0xa4>
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	68e5      	ldr	r5, [r4, #12]
 80029da:	6832      	ldr	r2, [r6, #0]
 80029dc:	f003 0306 	and.w	r3, r3, #6
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	bf08      	it	eq
 80029e4:	1aad      	subeq	r5, r5, r2
 80029e6:	68a3      	ldr	r3, [r4, #8]
 80029e8:	6922      	ldr	r2, [r4, #16]
 80029ea:	bf0c      	ite	eq
 80029ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029f0:	2500      	movne	r5, #0
 80029f2:	4293      	cmp	r3, r2
 80029f4:	bfc4      	itt	gt
 80029f6:	1a9b      	subgt	r3, r3, r2
 80029f8:	18ed      	addgt	r5, r5, r3
 80029fa:	2600      	movs	r6, #0
 80029fc:	341a      	adds	r4, #26
 80029fe:	42b5      	cmp	r5, r6
 8002a00:	d11a      	bne.n	8002a38 <_printf_common+0xc8>
 8002a02:	2000      	movs	r0, #0
 8002a04:	e008      	b.n	8002a18 <_printf_common+0xa8>
 8002a06:	2301      	movs	r3, #1
 8002a08:	4652      	mov	r2, sl
 8002a0a:	4649      	mov	r1, r9
 8002a0c:	4638      	mov	r0, r7
 8002a0e:	47c0      	blx	r8
 8002a10:	3001      	adds	r0, #1
 8002a12:	d103      	bne.n	8002a1c <_printf_common+0xac>
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a1c:	3501      	adds	r5, #1
 8002a1e:	e7c6      	b.n	80029ae <_printf_common+0x3e>
 8002a20:	18e1      	adds	r1, r4, r3
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	2030      	movs	r0, #48	; 0x30
 8002a26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a2a:	4422      	add	r2, r4
 8002a2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a34:	3302      	adds	r3, #2
 8002a36:	e7c7      	b.n	80029c8 <_printf_common+0x58>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	4649      	mov	r1, r9
 8002a3e:	4638      	mov	r0, r7
 8002a40:	47c0      	blx	r8
 8002a42:	3001      	adds	r0, #1
 8002a44:	d0e6      	beq.n	8002a14 <_printf_common+0xa4>
 8002a46:	3601      	adds	r6, #1
 8002a48:	e7d9      	b.n	80029fe <_printf_common+0x8e>
	...

08002a4c <_printf_i>:
 8002a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a50:	7e0f      	ldrb	r7, [r1, #24]
 8002a52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a54:	2f78      	cmp	r7, #120	; 0x78
 8002a56:	4691      	mov	r9, r2
 8002a58:	4680      	mov	r8, r0
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	469a      	mov	sl, r3
 8002a5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a62:	d807      	bhi.n	8002a74 <_printf_i+0x28>
 8002a64:	2f62      	cmp	r7, #98	; 0x62
 8002a66:	d80a      	bhi.n	8002a7e <_printf_i+0x32>
 8002a68:	2f00      	cmp	r7, #0
 8002a6a:	f000 80d8 	beq.w	8002c1e <_printf_i+0x1d2>
 8002a6e:	2f58      	cmp	r7, #88	; 0x58
 8002a70:	f000 80a3 	beq.w	8002bba <_printf_i+0x16e>
 8002a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a7c:	e03a      	b.n	8002af4 <_printf_i+0xa8>
 8002a7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a82:	2b15      	cmp	r3, #21
 8002a84:	d8f6      	bhi.n	8002a74 <_printf_i+0x28>
 8002a86:	a101      	add	r1, pc, #4	; (adr r1, 8002a8c <_printf_i+0x40>)
 8002a88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a8c:	08002ae5 	.word	0x08002ae5
 8002a90:	08002af9 	.word	0x08002af9
 8002a94:	08002a75 	.word	0x08002a75
 8002a98:	08002a75 	.word	0x08002a75
 8002a9c:	08002a75 	.word	0x08002a75
 8002aa0:	08002a75 	.word	0x08002a75
 8002aa4:	08002af9 	.word	0x08002af9
 8002aa8:	08002a75 	.word	0x08002a75
 8002aac:	08002a75 	.word	0x08002a75
 8002ab0:	08002a75 	.word	0x08002a75
 8002ab4:	08002a75 	.word	0x08002a75
 8002ab8:	08002c05 	.word	0x08002c05
 8002abc:	08002b29 	.word	0x08002b29
 8002ac0:	08002be7 	.word	0x08002be7
 8002ac4:	08002a75 	.word	0x08002a75
 8002ac8:	08002a75 	.word	0x08002a75
 8002acc:	08002c27 	.word	0x08002c27
 8002ad0:	08002a75 	.word	0x08002a75
 8002ad4:	08002b29 	.word	0x08002b29
 8002ad8:	08002a75 	.word	0x08002a75
 8002adc:	08002a75 	.word	0x08002a75
 8002ae0:	08002bef 	.word	0x08002bef
 8002ae4:	682b      	ldr	r3, [r5, #0]
 8002ae6:	1d1a      	adds	r2, r3, #4
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	602a      	str	r2, [r5, #0]
 8002aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002af0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0a3      	b.n	8002c40 <_printf_i+0x1f4>
 8002af8:	6820      	ldr	r0, [r4, #0]
 8002afa:	6829      	ldr	r1, [r5, #0]
 8002afc:	0606      	lsls	r6, r0, #24
 8002afe:	f101 0304 	add.w	r3, r1, #4
 8002b02:	d50a      	bpl.n	8002b1a <_printf_i+0xce>
 8002b04:	680e      	ldr	r6, [r1, #0]
 8002b06:	602b      	str	r3, [r5, #0]
 8002b08:	2e00      	cmp	r6, #0
 8002b0a:	da03      	bge.n	8002b14 <_printf_i+0xc8>
 8002b0c:	232d      	movs	r3, #45	; 0x2d
 8002b0e:	4276      	negs	r6, r6
 8002b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b14:	485e      	ldr	r0, [pc, #376]	; (8002c90 <_printf_i+0x244>)
 8002b16:	230a      	movs	r3, #10
 8002b18:	e019      	b.n	8002b4e <_printf_i+0x102>
 8002b1a:	680e      	ldr	r6, [r1, #0]
 8002b1c:	602b      	str	r3, [r5, #0]
 8002b1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b22:	bf18      	it	ne
 8002b24:	b236      	sxthne	r6, r6
 8002b26:	e7ef      	b.n	8002b08 <_printf_i+0xbc>
 8002b28:	682b      	ldr	r3, [r5, #0]
 8002b2a:	6820      	ldr	r0, [r4, #0]
 8002b2c:	1d19      	adds	r1, r3, #4
 8002b2e:	6029      	str	r1, [r5, #0]
 8002b30:	0601      	lsls	r1, r0, #24
 8002b32:	d501      	bpl.n	8002b38 <_printf_i+0xec>
 8002b34:	681e      	ldr	r6, [r3, #0]
 8002b36:	e002      	b.n	8002b3e <_printf_i+0xf2>
 8002b38:	0646      	lsls	r6, r0, #25
 8002b3a:	d5fb      	bpl.n	8002b34 <_printf_i+0xe8>
 8002b3c:	881e      	ldrh	r6, [r3, #0]
 8002b3e:	4854      	ldr	r0, [pc, #336]	; (8002c90 <_printf_i+0x244>)
 8002b40:	2f6f      	cmp	r7, #111	; 0x6f
 8002b42:	bf0c      	ite	eq
 8002b44:	2308      	moveq	r3, #8
 8002b46:	230a      	movne	r3, #10
 8002b48:	2100      	movs	r1, #0
 8002b4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b4e:	6865      	ldr	r5, [r4, #4]
 8002b50:	60a5      	str	r5, [r4, #8]
 8002b52:	2d00      	cmp	r5, #0
 8002b54:	bfa2      	ittt	ge
 8002b56:	6821      	ldrge	r1, [r4, #0]
 8002b58:	f021 0104 	bicge.w	r1, r1, #4
 8002b5c:	6021      	strge	r1, [r4, #0]
 8002b5e:	b90e      	cbnz	r6, 8002b64 <_printf_i+0x118>
 8002b60:	2d00      	cmp	r5, #0
 8002b62:	d04d      	beq.n	8002c00 <_printf_i+0x1b4>
 8002b64:	4615      	mov	r5, r2
 8002b66:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b6a:	fb03 6711 	mls	r7, r3, r1, r6
 8002b6e:	5dc7      	ldrb	r7, [r0, r7]
 8002b70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b74:	4637      	mov	r7, r6
 8002b76:	42bb      	cmp	r3, r7
 8002b78:	460e      	mov	r6, r1
 8002b7a:	d9f4      	bls.n	8002b66 <_printf_i+0x11a>
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d10b      	bne.n	8002b98 <_printf_i+0x14c>
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	07de      	lsls	r6, r3, #31
 8002b84:	d508      	bpl.n	8002b98 <_printf_i+0x14c>
 8002b86:	6923      	ldr	r3, [r4, #16]
 8002b88:	6861      	ldr	r1, [r4, #4]
 8002b8a:	4299      	cmp	r1, r3
 8002b8c:	bfde      	ittt	le
 8002b8e:	2330      	movle	r3, #48	; 0x30
 8002b90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b98:	1b52      	subs	r2, r2, r5
 8002b9a:	6122      	str	r2, [r4, #16]
 8002b9c:	f8cd a000 	str.w	sl, [sp]
 8002ba0:	464b      	mov	r3, r9
 8002ba2:	aa03      	add	r2, sp, #12
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	4640      	mov	r0, r8
 8002ba8:	f7ff fee2 	bl	8002970 <_printf_common>
 8002bac:	3001      	adds	r0, #1
 8002bae:	d14c      	bne.n	8002c4a <_printf_i+0x1fe>
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	b004      	add	sp, #16
 8002bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bba:	4835      	ldr	r0, [pc, #212]	; (8002c90 <_printf_i+0x244>)
 8002bbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002bc0:	6829      	ldr	r1, [r5, #0]
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002bc8:	6029      	str	r1, [r5, #0]
 8002bca:	061d      	lsls	r5, r3, #24
 8002bcc:	d514      	bpl.n	8002bf8 <_printf_i+0x1ac>
 8002bce:	07df      	lsls	r7, r3, #31
 8002bd0:	bf44      	itt	mi
 8002bd2:	f043 0320 	orrmi.w	r3, r3, #32
 8002bd6:	6023      	strmi	r3, [r4, #0]
 8002bd8:	b91e      	cbnz	r6, 8002be2 <_printf_i+0x196>
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	f023 0320 	bic.w	r3, r3, #32
 8002be0:	6023      	str	r3, [r4, #0]
 8002be2:	2310      	movs	r3, #16
 8002be4:	e7b0      	b.n	8002b48 <_printf_i+0xfc>
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	f043 0320 	orr.w	r3, r3, #32
 8002bec:	6023      	str	r3, [r4, #0]
 8002bee:	2378      	movs	r3, #120	; 0x78
 8002bf0:	4828      	ldr	r0, [pc, #160]	; (8002c94 <_printf_i+0x248>)
 8002bf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bf6:	e7e3      	b.n	8002bc0 <_printf_i+0x174>
 8002bf8:	0659      	lsls	r1, r3, #25
 8002bfa:	bf48      	it	mi
 8002bfc:	b2b6      	uxthmi	r6, r6
 8002bfe:	e7e6      	b.n	8002bce <_printf_i+0x182>
 8002c00:	4615      	mov	r5, r2
 8002c02:	e7bb      	b.n	8002b7c <_printf_i+0x130>
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	6826      	ldr	r6, [r4, #0]
 8002c08:	6961      	ldr	r1, [r4, #20]
 8002c0a:	1d18      	adds	r0, r3, #4
 8002c0c:	6028      	str	r0, [r5, #0]
 8002c0e:	0635      	lsls	r5, r6, #24
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	d501      	bpl.n	8002c18 <_printf_i+0x1cc>
 8002c14:	6019      	str	r1, [r3, #0]
 8002c16:	e002      	b.n	8002c1e <_printf_i+0x1d2>
 8002c18:	0670      	lsls	r0, r6, #25
 8002c1a:	d5fb      	bpl.n	8002c14 <_printf_i+0x1c8>
 8002c1c:	8019      	strh	r1, [r3, #0]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	6123      	str	r3, [r4, #16]
 8002c22:	4615      	mov	r5, r2
 8002c24:	e7ba      	b.n	8002b9c <_printf_i+0x150>
 8002c26:	682b      	ldr	r3, [r5, #0]
 8002c28:	1d1a      	adds	r2, r3, #4
 8002c2a:	602a      	str	r2, [r5, #0]
 8002c2c:	681d      	ldr	r5, [r3, #0]
 8002c2e:	6862      	ldr	r2, [r4, #4]
 8002c30:	2100      	movs	r1, #0
 8002c32:	4628      	mov	r0, r5
 8002c34:	f7fd faec 	bl	8000210 <memchr>
 8002c38:	b108      	cbz	r0, 8002c3e <_printf_i+0x1f2>
 8002c3a:	1b40      	subs	r0, r0, r5
 8002c3c:	6060      	str	r0, [r4, #4]
 8002c3e:	6863      	ldr	r3, [r4, #4]
 8002c40:	6123      	str	r3, [r4, #16]
 8002c42:	2300      	movs	r3, #0
 8002c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c48:	e7a8      	b.n	8002b9c <_printf_i+0x150>
 8002c4a:	6923      	ldr	r3, [r4, #16]
 8002c4c:	462a      	mov	r2, r5
 8002c4e:	4649      	mov	r1, r9
 8002c50:	4640      	mov	r0, r8
 8002c52:	47d0      	blx	sl
 8002c54:	3001      	adds	r0, #1
 8002c56:	d0ab      	beq.n	8002bb0 <_printf_i+0x164>
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	079b      	lsls	r3, r3, #30
 8002c5c:	d413      	bmi.n	8002c86 <_printf_i+0x23a>
 8002c5e:	68e0      	ldr	r0, [r4, #12]
 8002c60:	9b03      	ldr	r3, [sp, #12]
 8002c62:	4298      	cmp	r0, r3
 8002c64:	bfb8      	it	lt
 8002c66:	4618      	movlt	r0, r3
 8002c68:	e7a4      	b.n	8002bb4 <_printf_i+0x168>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	4632      	mov	r2, r6
 8002c6e:	4649      	mov	r1, r9
 8002c70:	4640      	mov	r0, r8
 8002c72:	47d0      	blx	sl
 8002c74:	3001      	adds	r0, #1
 8002c76:	d09b      	beq.n	8002bb0 <_printf_i+0x164>
 8002c78:	3501      	adds	r5, #1
 8002c7a:	68e3      	ldr	r3, [r4, #12]
 8002c7c:	9903      	ldr	r1, [sp, #12]
 8002c7e:	1a5b      	subs	r3, r3, r1
 8002c80:	42ab      	cmp	r3, r5
 8002c82:	dcf2      	bgt.n	8002c6a <_printf_i+0x21e>
 8002c84:	e7eb      	b.n	8002c5e <_printf_i+0x212>
 8002c86:	2500      	movs	r5, #0
 8002c88:	f104 0619 	add.w	r6, r4, #25
 8002c8c:	e7f5      	b.n	8002c7a <_printf_i+0x22e>
 8002c8e:	bf00      	nop
 8002c90:	080035ab 	.word	0x080035ab
 8002c94:	080035bc 	.word	0x080035bc

08002c98 <_sbrk_r>:
 8002c98:	b538      	push	{r3, r4, r5, lr}
 8002c9a:	4d06      	ldr	r5, [pc, #24]	; (8002cb4 <_sbrk_r+0x1c>)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	4608      	mov	r0, r1
 8002ca2:	602b      	str	r3, [r5, #0]
 8002ca4:	f7fe fa2e 	bl	8001104 <_sbrk>
 8002ca8:	1c43      	adds	r3, r0, #1
 8002caa:	d102      	bne.n	8002cb2 <_sbrk_r+0x1a>
 8002cac:	682b      	ldr	r3, [r5, #0]
 8002cae:	b103      	cbz	r3, 8002cb2 <_sbrk_r+0x1a>
 8002cb0:	6023      	str	r3, [r4, #0]
 8002cb2:	bd38      	pop	{r3, r4, r5, pc}
 8002cb4:	2000020c 	.word	0x2000020c

08002cb8 <__swbuf_r>:
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	460e      	mov	r6, r1
 8002cbc:	4614      	mov	r4, r2
 8002cbe:	4605      	mov	r5, r0
 8002cc0:	b118      	cbz	r0, 8002cca <__swbuf_r+0x12>
 8002cc2:	6983      	ldr	r3, [r0, #24]
 8002cc4:	b90b      	cbnz	r3, 8002cca <__swbuf_r+0x12>
 8002cc6:	f000 f9d9 	bl	800307c <__sinit>
 8002cca:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <__swbuf_r+0x98>)
 8002ccc:	429c      	cmp	r4, r3
 8002cce:	d12b      	bne.n	8002d28 <__swbuf_r+0x70>
 8002cd0:	686c      	ldr	r4, [r5, #4]
 8002cd2:	69a3      	ldr	r3, [r4, #24]
 8002cd4:	60a3      	str	r3, [r4, #8]
 8002cd6:	89a3      	ldrh	r3, [r4, #12]
 8002cd8:	071a      	lsls	r2, r3, #28
 8002cda:	d52f      	bpl.n	8002d3c <__swbuf_r+0x84>
 8002cdc:	6923      	ldr	r3, [r4, #16]
 8002cde:	b36b      	cbz	r3, 8002d3c <__swbuf_r+0x84>
 8002ce0:	6923      	ldr	r3, [r4, #16]
 8002ce2:	6820      	ldr	r0, [r4, #0]
 8002ce4:	1ac0      	subs	r0, r0, r3
 8002ce6:	6963      	ldr	r3, [r4, #20]
 8002ce8:	b2f6      	uxtb	r6, r6
 8002cea:	4283      	cmp	r3, r0
 8002cec:	4637      	mov	r7, r6
 8002cee:	dc04      	bgt.n	8002cfa <__swbuf_r+0x42>
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	f000 f92e 	bl	8002f54 <_fflush_r>
 8002cf8:	bb30      	cbnz	r0, 8002d48 <__swbuf_r+0x90>
 8002cfa:	68a3      	ldr	r3, [r4, #8]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	60a3      	str	r3, [r4, #8]
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	6022      	str	r2, [r4, #0]
 8002d06:	701e      	strb	r6, [r3, #0]
 8002d08:	6963      	ldr	r3, [r4, #20]
 8002d0a:	3001      	adds	r0, #1
 8002d0c:	4283      	cmp	r3, r0
 8002d0e:	d004      	beq.n	8002d1a <__swbuf_r+0x62>
 8002d10:	89a3      	ldrh	r3, [r4, #12]
 8002d12:	07db      	lsls	r3, r3, #31
 8002d14:	d506      	bpl.n	8002d24 <__swbuf_r+0x6c>
 8002d16:	2e0a      	cmp	r6, #10
 8002d18:	d104      	bne.n	8002d24 <__swbuf_r+0x6c>
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	f000 f919 	bl	8002f54 <_fflush_r>
 8002d22:	b988      	cbnz	r0, 8002d48 <__swbuf_r+0x90>
 8002d24:	4638      	mov	r0, r7
 8002d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <__swbuf_r+0x9c>)
 8002d2a:	429c      	cmp	r4, r3
 8002d2c:	d101      	bne.n	8002d32 <__swbuf_r+0x7a>
 8002d2e:	68ac      	ldr	r4, [r5, #8]
 8002d30:	e7cf      	b.n	8002cd2 <__swbuf_r+0x1a>
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <__swbuf_r+0xa0>)
 8002d34:	429c      	cmp	r4, r3
 8002d36:	bf08      	it	eq
 8002d38:	68ec      	ldreq	r4, [r5, #12]
 8002d3a:	e7ca      	b.n	8002cd2 <__swbuf_r+0x1a>
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	4628      	mov	r0, r5
 8002d40:	f000 f80c 	bl	8002d5c <__swsetup_r>
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d0cb      	beq.n	8002ce0 <__swbuf_r+0x28>
 8002d48:	f04f 37ff 	mov.w	r7, #4294967295
 8002d4c:	e7ea      	b.n	8002d24 <__swbuf_r+0x6c>
 8002d4e:	bf00      	nop
 8002d50:	080035f0 	.word	0x080035f0
 8002d54:	08003610 	.word	0x08003610
 8002d58:	080035d0 	.word	0x080035d0

08002d5c <__swsetup_r>:
 8002d5c:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <__swsetup_r+0xcc>)
 8002d5e:	b570      	push	{r4, r5, r6, lr}
 8002d60:	681d      	ldr	r5, [r3, #0]
 8002d62:	4606      	mov	r6, r0
 8002d64:	460c      	mov	r4, r1
 8002d66:	b125      	cbz	r5, 8002d72 <__swsetup_r+0x16>
 8002d68:	69ab      	ldr	r3, [r5, #24]
 8002d6a:	b913      	cbnz	r3, 8002d72 <__swsetup_r+0x16>
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	f000 f985 	bl	800307c <__sinit>
 8002d72:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <__swsetup_r+0xd0>)
 8002d74:	429c      	cmp	r4, r3
 8002d76:	d10f      	bne.n	8002d98 <__swsetup_r+0x3c>
 8002d78:	686c      	ldr	r4, [r5, #4]
 8002d7a:	89a3      	ldrh	r3, [r4, #12]
 8002d7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d80:	0719      	lsls	r1, r3, #28
 8002d82:	d42c      	bmi.n	8002dde <__swsetup_r+0x82>
 8002d84:	06dd      	lsls	r5, r3, #27
 8002d86:	d411      	bmi.n	8002dac <__swsetup_r+0x50>
 8002d88:	2309      	movs	r3, #9
 8002d8a:	6033      	str	r3, [r6, #0]
 8002d8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d90:	81a3      	strh	r3, [r4, #12]
 8002d92:	f04f 30ff 	mov.w	r0, #4294967295
 8002d96:	e03e      	b.n	8002e16 <__swsetup_r+0xba>
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <__swsetup_r+0xd4>)
 8002d9a:	429c      	cmp	r4, r3
 8002d9c:	d101      	bne.n	8002da2 <__swsetup_r+0x46>
 8002d9e:	68ac      	ldr	r4, [r5, #8]
 8002da0:	e7eb      	b.n	8002d7a <__swsetup_r+0x1e>
 8002da2:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <__swsetup_r+0xd8>)
 8002da4:	429c      	cmp	r4, r3
 8002da6:	bf08      	it	eq
 8002da8:	68ec      	ldreq	r4, [r5, #12]
 8002daa:	e7e6      	b.n	8002d7a <__swsetup_r+0x1e>
 8002dac:	0758      	lsls	r0, r3, #29
 8002dae:	d512      	bpl.n	8002dd6 <__swsetup_r+0x7a>
 8002db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002db2:	b141      	cbz	r1, 8002dc6 <__swsetup_r+0x6a>
 8002db4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002db8:	4299      	cmp	r1, r3
 8002dba:	d002      	beq.n	8002dc2 <__swsetup_r+0x66>
 8002dbc:	4630      	mov	r0, r6
 8002dbe:	f7ff fb9d 	bl	80024fc <_free_r>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	6363      	str	r3, [r4, #52]	; 0x34
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002dcc:	81a3      	strh	r3, [r4, #12]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	6063      	str	r3, [r4, #4]
 8002dd2:	6923      	ldr	r3, [r4, #16]
 8002dd4:	6023      	str	r3, [r4, #0]
 8002dd6:	89a3      	ldrh	r3, [r4, #12]
 8002dd8:	f043 0308 	orr.w	r3, r3, #8
 8002ddc:	81a3      	strh	r3, [r4, #12]
 8002dde:	6923      	ldr	r3, [r4, #16]
 8002de0:	b94b      	cbnz	r3, 8002df6 <__swsetup_r+0x9a>
 8002de2:	89a3      	ldrh	r3, [r4, #12]
 8002de4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dec:	d003      	beq.n	8002df6 <__swsetup_r+0x9a>
 8002dee:	4621      	mov	r1, r4
 8002df0:	4630      	mov	r0, r6
 8002df2:	f000 fa09 	bl	8003208 <__smakebuf_r>
 8002df6:	89a0      	ldrh	r0, [r4, #12]
 8002df8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002dfc:	f010 0301 	ands.w	r3, r0, #1
 8002e00:	d00a      	beq.n	8002e18 <__swsetup_r+0xbc>
 8002e02:	2300      	movs	r3, #0
 8002e04:	60a3      	str	r3, [r4, #8]
 8002e06:	6963      	ldr	r3, [r4, #20]
 8002e08:	425b      	negs	r3, r3
 8002e0a:	61a3      	str	r3, [r4, #24]
 8002e0c:	6923      	ldr	r3, [r4, #16]
 8002e0e:	b943      	cbnz	r3, 8002e22 <__swsetup_r+0xc6>
 8002e10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e14:	d1ba      	bne.n	8002d8c <__swsetup_r+0x30>
 8002e16:	bd70      	pop	{r4, r5, r6, pc}
 8002e18:	0781      	lsls	r1, r0, #30
 8002e1a:	bf58      	it	pl
 8002e1c:	6963      	ldrpl	r3, [r4, #20]
 8002e1e:	60a3      	str	r3, [r4, #8]
 8002e20:	e7f4      	b.n	8002e0c <__swsetup_r+0xb0>
 8002e22:	2000      	movs	r0, #0
 8002e24:	e7f7      	b.n	8002e16 <__swsetup_r+0xba>
 8002e26:	bf00      	nop
 8002e28:	20000174 	.word	0x20000174
 8002e2c:	080035f0 	.word	0x080035f0
 8002e30:	08003610 	.word	0x08003610
 8002e34:	080035d0 	.word	0x080035d0

08002e38 <abort>:
 8002e38:	b508      	push	{r3, lr}
 8002e3a:	2006      	movs	r0, #6
 8002e3c:	f000 fa58 	bl	80032f0 <raise>
 8002e40:	2001      	movs	r0, #1
 8002e42:	f7fe f8db 	bl	8000ffc <_exit>
	...

08002e48 <__sflush_r>:
 8002e48:	898a      	ldrh	r2, [r1, #12]
 8002e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e4e:	4605      	mov	r5, r0
 8002e50:	0710      	lsls	r0, r2, #28
 8002e52:	460c      	mov	r4, r1
 8002e54:	d458      	bmi.n	8002f08 <__sflush_r+0xc0>
 8002e56:	684b      	ldr	r3, [r1, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	dc05      	bgt.n	8002e68 <__sflush_r+0x20>
 8002e5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	dc02      	bgt.n	8002e68 <__sflush_r+0x20>
 8002e62:	2000      	movs	r0, #0
 8002e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e6a:	2e00      	cmp	r6, #0
 8002e6c:	d0f9      	beq.n	8002e62 <__sflush_r+0x1a>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e74:	682f      	ldr	r7, [r5, #0]
 8002e76:	602b      	str	r3, [r5, #0]
 8002e78:	d032      	beq.n	8002ee0 <__sflush_r+0x98>
 8002e7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e7c:	89a3      	ldrh	r3, [r4, #12]
 8002e7e:	075a      	lsls	r2, r3, #29
 8002e80:	d505      	bpl.n	8002e8e <__sflush_r+0x46>
 8002e82:	6863      	ldr	r3, [r4, #4]
 8002e84:	1ac0      	subs	r0, r0, r3
 8002e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e88:	b10b      	cbz	r3, 8002e8e <__sflush_r+0x46>
 8002e8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e8c:	1ac0      	subs	r0, r0, r3
 8002e8e:	2300      	movs	r3, #0
 8002e90:	4602      	mov	r2, r0
 8002e92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e94:	6a21      	ldr	r1, [r4, #32]
 8002e96:	4628      	mov	r0, r5
 8002e98:	47b0      	blx	r6
 8002e9a:	1c43      	adds	r3, r0, #1
 8002e9c:	89a3      	ldrh	r3, [r4, #12]
 8002e9e:	d106      	bne.n	8002eae <__sflush_r+0x66>
 8002ea0:	6829      	ldr	r1, [r5, #0]
 8002ea2:	291d      	cmp	r1, #29
 8002ea4:	d82c      	bhi.n	8002f00 <__sflush_r+0xb8>
 8002ea6:	4a2a      	ldr	r2, [pc, #168]	; (8002f50 <__sflush_r+0x108>)
 8002ea8:	40ca      	lsrs	r2, r1
 8002eaa:	07d6      	lsls	r6, r2, #31
 8002eac:	d528      	bpl.n	8002f00 <__sflush_r+0xb8>
 8002eae:	2200      	movs	r2, #0
 8002eb0:	6062      	str	r2, [r4, #4]
 8002eb2:	04d9      	lsls	r1, r3, #19
 8002eb4:	6922      	ldr	r2, [r4, #16]
 8002eb6:	6022      	str	r2, [r4, #0]
 8002eb8:	d504      	bpl.n	8002ec4 <__sflush_r+0x7c>
 8002eba:	1c42      	adds	r2, r0, #1
 8002ebc:	d101      	bne.n	8002ec2 <__sflush_r+0x7a>
 8002ebe:	682b      	ldr	r3, [r5, #0]
 8002ec0:	b903      	cbnz	r3, 8002ec4 <__sflush_r+0x7c>
 8002ec2:	6560      	str	r0, [r4, #84]	; 0x54
 8002ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ec6:	602f      	str	r7, [r5, #0]
 8002ec8:	2900      	cmp	r1, #0
 8002eca:	d0ca      	beq.n	8002e62 <__sflush_r+0x1a>
 8002ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ed0:	4299      	cmp	r1, r3
 8002ed2:	d002      	beq.n	8002eda <__sflush_r+0x92>
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	f7ff fb11 	bl	80024fc <_free_r>
 8002eda:	2000      	movs	r0, #0
 8002edc:	6360      	str	r0, [r4, #52]	; 0x34
 8002ede:	e7c1      	b.n	8002e64 <__sflush_r+0x1c>
 8002ee0:	6a21      	ldr	r1, [r4, #32]
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	47b0      	blx	r6
 8002ee8:	1c41      	adds	r1, r0, #1
 8002eea:	d1c7      	bne.n	8002e7c <__sflush_r+0x34>
 8002eec:	682b      	ldr	r3, [r5, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0c4      	beq.n	8002e7c <__sflush_r+0x34>
 8002ef2:	2b1d      	cmp	r3, #29
 8002ef4:	d001      	beq.n	8002efa <__sflush_r+0xb2>
 8002ef6:	2b16      	cmp	r3, #22
 8002ef8:	d101      	bne.n	8002efe <__sflush_r+0xb6>
 8002efa:	602f      	str	r7, [r5, #0]
 8002efc:	e7b1      	b.n	8002e62 <__sflush_r+0x1a>
 8002efe:	89a3      	ldrh	r3, [r4, #12]
 8002f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f04:	81a3      	strh	r3, [r4, #12]
 8002f06:	e7ad      	b.n	8002e64 <__sflush_r+0x1c>
 8002f08:	690f      	ldr	r7, [r1, #16]
 8002f0a:	2f00      	cmp	r7, #0
 8002f0c:	d0a9      	beq.n	8002e62 <__sflush_r+0x1a>
 8002f0e:	0793      	lsls	r3, r2, #30
 8002f10:	680e      	ldr	r6, [r1, #0]
 8002f12:	bf08      	it	eq
 8002f14:	694b      	ldreq	r3, [r1, #20]
 8002f16:	600f      	str	r7, [r1, #0]
 8002f18:	bf18      	it	ne
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	eba6 0807 	sub.w	r8, r6, r7
 8002f20:	608b      	str	r3, [r1, #8]
 8002f22:	f1b8 0f00 	cmp.w	r8, #0
 8002f26:	dd9c      	ble.n	8002e62 <__sflush_r+0x1a>
 8002f28:	6a21      	ldr	r1, [r4, #32]
 8002f2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f2c:	4643      	mov	r3, r8
 8002f2e:	463a      	mov	r2, r7
 8002f30:	4628      	mov	r0, r5
 8002f32:	47b0      	blx	r6
 8002f34:	2800      	cmp	r0, #0
 8002f36:	dc06      	bgt.n	8002f46 <__sflush_r+0xfe>
 8002f38:	89a3      	ldrh	r3, [r4, #12]
 8002f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f3e:	81a3      	strh	r3, [r4, #12]
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	e78e      	b.n	8002e64 <__sflush_r+0x1c>
 8002f46:	4407      	add	r7, r0
 8002f48:	eba8 0800 	sub.w	r8, r8, r0
 8002f4c:	e7e9      	b.n	8002f22 <__sflush_r+0xda>
 8002f4e:	bf00      	nop
 8002f50:	20400001 	.word	0x20400001

08002f54 <_fflush_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	690b      	ldr	r3, [r1, #16]
 8002f58:	4605      	mov	r5, r0
 8002f5a:	460c      	mov	r4, r1
 8002f5c:	b913      	cbnz	r3, 8002f64 <_fflush_r+0x10>
 8002f5e:	2500      	movs	r5, #0
 8002f60:	4628      	mov	r0, r5
 8002f62:	bd38      	pop	{r3, r4, r5, pc}
 8002f64:	b118      	cbz	r0, 8002f6e <_fflush_r+0x1a>
 8002f66:	6983      	ldr	r3, [r0, #24]
 8002f68:	b90b      	cbnz	r3, 8002f6e <_fflush_r+0x1a>
 8002f6a:	f000 f887 	bl	800307c <__sinit>
 8002f6e:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <_fflush_r+0x6c>)
 8002f70:	429c      	cmp	r4, r3
 8002f72:	d11b      	bne.n	8002fac <_fflush_r+0x58>
 8002f74:	686c      	ldr	r4, [r5, #4]
 8002f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0ef      	beq.n	8002f5e <_fflush_r+0xa>
 8002f7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f80:	07d0      	lsls	r0, r2, #31
 8002f82:	d404      	bmi.n	8002f8e <_fflush_r+0x3a>
 8002f84:	0599      	lsls	r1, r3, #22
 8002f86:	d402      	bmi.n	8002f8e <_fflush_r+0x3a>
 8002f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f8a:	f000 f915 	bl	80031b8 <__retarget_lock_acquire_recursive>
 8002f8e:	4628      	mov	r0, r5
 8002f90:	4621      	mov	r1, r4
 8002f92:	f7ff ff59 	bl	8002e48 <__sflush_r>
 8002f96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f98:	07da      	lsls	r2, r3, #31
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	d4e0      	bmi.n	8002f60 <_fflush_r+0xc>
 8002f9e:	89a3      	ldrh	r3, [r4, #12]
 8002fa0:	059b      	lsls	r3, r3, #22
 8002fa2:	d4dd      	bmi.n	8002f60 <_fflush_r+0xc>
 8002fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fa6:	f000 f908 	bl	80031ba <__retarget_lock_release_recursive>
 8002faa:	e7d9      	b.n	8002f60 <_fflush_r+0xc>
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <_fflush_r+0x70>)
 8002fae:	429c      	cmp	r4, r3
 8002fb0:	d101      	bne.n	8002fb6 <_fflush_r+0x62>
 8002fb2:	68ac      	ldr	r4, [r5, #8]
 8002fb4:	e7df      	b.n	8002f76 <_fflush_r+0x22>
 8002fb6:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <_fflush_r+0x74>)
 8002fb8:	429c      	cmp	r4, r3
 8002fba:	bf08      	it	eq
 8002fbc:	68ec      	ldreq	r4, [r5, #12]
 8002fbe:	e7da      	b.n	8002f76 <_fflush_r+0x22>
 8002fc0:	080035f0 	.word	0x080035f0
 8002fc4:	08003610 	.word	0x08003610
 8002fc8:	080035d0 	.word	0x080035d0

08002fcc <std>:
 8002fcc:	2300      	movs	r3, #0
 8002fce:	b510      	push	{r4, lr}
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8002fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fda:	6083      	str	r3, [r0, #8]
 8002fdc:	8181      	strh	r1, [r0, #12]
 8002fde:	6643      	str	r3, [r0, #100]	; 0x64
 8002fe0:	81c2      	strh	r2, [r0, #14]
 8002fe2:	6183      	str	r3, [r0, #24]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	305c      	adds	r0, #92	; 0x5c
 8002fea:	f7ff f9d7 	bl	800239c <memset>
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <std+0x38>)
 8002ff0:	6263      	str	r3, [r4, #36]	; 0x24
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <std+0x3c>)
 8002ff4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <std+0x40>)
 8002ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <std+0x44>)
 8002ffc:	6224      	str	r4, [r4, #32]
 8002ffe:	6323      	str	r3, [r4, #48]	; 0x30
 8003000:	bd10      	pop	{r4, pc}
 8003002:	bf00      	nop
 8003004:	08003329 	.word	0x08003329
 8003008:	0800334b 	.word	0x0800334b
 800300c:	08003383 	.word	0x08003383
 8003010:	080033a7 	.word	0x080033a7

08003014 <_cleanup_r>:
 8003014:	4901      	ldr	r1, [pc, #4]	; (800301c <_cleanup_r+0x8>)
 8003016:	f000 b8af 	b.w	8003178 <_fwalk_reent>
 800301a:	bf00      	nop
 800301c:	08002f55 	.word	0x08002f55

08003020 <__sfmoreglue>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	2268      	movs	r2, #104	; 0x68
 8003024:	1e4d      	subs	r5, r1, #1
 8003026:	4355      	muls	r5, r2
 8003028:	460e      	mov	r6, r1
 800302a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800302e:	f7ff fad1 	bl	80025d4 <_malloc_r>
 8003032:	4604      	mov	r4, r0
 8003034:	b140      	cbz	r0, 8003048 <__sfmoreglue+0x28>
 8003036:	2100      	movs	r1, #0
 8003038:	e9c0 1600 	strd	r1, r6, [r0]
 800303c:	300c      	adds	r0, #12
 800303e:	60a0      	str	r0, [r4, #8]
 8003040:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003044:	f7ff f9aa 	bl	800239c <memset>
 8003048:	4620      	mov	r0, r4
 800304a:	bd70      	pop	{r4, r5, r6, pc}

0800304c <__sfp_lock_acquire>:
 800304c:	4801      	ldr	r0, [pc, #4]	; (8003054 <__sfp_lock_acquire+0x8>)
 800304e:	f000 b8b3 	b.w	80031b8 <__retarget_lock_acquire_recursive>
 8003052:	bf00      	nop
 8003054:	20000209 	.word	0x20000209

08003058 <__sfp_lock_release>:
 8003058:	4801      	ldr	r0, [pc, #4]	; (8003060 <__sfp_lock_release+0x8>)
 800305a:	f000 b8ae 	b.w	80031ba <__retarget_lock_release_recursive>
 800305e:	bf00      	nop
 8003060:	20000209 	.word	0x20000209

08003064 <__sinit_lock_acquire>:
 8003064:	4801      	ldr	r0, [pc, #4]	; (800306c <__sinit_lock_acquire+0x8>)
 8003066:	f000 b8a7 	b.w	80031b8 <__retarget_lock_acquire_recursive>
 800306a:	bf00      	nop
 800306c:	2000020a 	.word	0x2000020a

08003070 <__sinit_lock_release>:
 8003070:	4801      	ldr	r0, [pc, #4]	; (8003078 <__sinit_lock_release+0x8>)
 8003072:	f000 b8a2 	b.w	80031ba <__retarget_lock_release_recursive>
 8003076:	bf00      	nop
 8003078:	2000020a 	.word	0x2000020a

0800307c <__sinit>:
 800307c:	b510      	push	{r4, lr}
 800307e:	4604      	mov	r4, r0
 8003080:	f7ff fff0 	bl	8003064 <__sinit_lock_acquire>
 8003084:	69a3      	ldr	r3, [r4, #24]
 8003086:	b11b      	cbz	r3, 8003090 <__sinit+0x14>
 8003088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800308c:	f7ff bff0 	b.w	8003070 <__sinit_lock_release>
 8003090:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003094:	6523      	str	r3, [r4, #80]	; 0x50
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <__sinit+0x68>)
 8003098:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <__sinit+0x6c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	62a2      	str	r2, [r4, #40]	; 0x28
 800309e:	42a3      	cmp	r3, r4
 80030a0:	bf04      	itt	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	61a3      	streq	r3, [r4, #24]
 80030a6:	4620      	mov	r0, r4
 80030a8:	f000 f820 	bl	80030ec <__sfp>
 80030ac:	6060      	str	r0, [r4, #4]
 80030ae:	4620      	mov	r0, r4
 80030b0:	f000 f81c 	bl	80030ec <__sfp>
 80030b4:	60a0      	str	r0, [r4, #8]
 80030b6:	4620      	mov	r0, r4
 80030b8:	f000 f818 	bl	80030ec <__sfp>
 80030bc:	2200      	movs	r2, #0
 80030be:	60e0      	str	r0, [r4, #12]
 80030c0:	2104      	movs	r1, #4
 80030c2:	6860      	ldr	r0, [r4, #4]
 80030c4:	f7ff ff82 	bl	8002fcc <std>
 80030c8:	68a0      	ldr	r0, [r4, #8]
 80030ca:	2201      	movs	r2, #1
 80030cc:	2109      	movs	r1, #9
 80030ce:	f7ff ff7d 	bl	8002fcc <std>
 80030d2:	68e0      	ldr	r0, [r4, #12]
 80030d4:	2202      	movs	r2, #2
 80030d6:	2112      	movs	r1, #18
 80030d8:	f7ff ff78 	bl	8002fcc <std>
 80030dc:	2301      	movs	r3, #1
 80030de:	61a3      	str	r3, [r4, #24]
 80030e0:	e7d2      	b.n	8003088 <__sinit+0xc>
 80030e2:	bf00      	nop
 80030e4:	080034e8 	.word	0x080034e8
 80030e8:	08003015 	.word	0x08003015

080030ec <__sfp>:
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ee:	4607      	mov	r7, r0
 80030f0:	f7ff ffac 	bl	800304c <__sfp_lock_acquire>
 80030f4:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <__sfp+0x84>)
 80030f6:	681e      	ldr	r6, [r3, #0]
 80030f8:	69b3      	ldr	r3, [r6, #24]
 80030fa:	b913      	cbnz	r3, 8003102 <__sfp+0x16>
 80030fc:	4630      	mov	r0, r6
 80030fe:	f7ff ffbd 	bl	800307c <__sinit>
 8003102:	3648      	adds	r6, #72	; 0x48
 8003104:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003108:	3b01      	subs	r3, #1
 800310a:	d503      	bpl.n	8003114 <__sfp+0x28>
 800310c:	6833      	ldr	r3, [r6, #0]
 800310e:	b30b      	cbz	r3, 8003154 <__sfp+0x68>
 8003110:	6836      	ldr	r6, [r6, #0]
 8003112:	e7f7      	b.n	8003104 <__sfp+0x18>
 8003114:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003118:	b9d5      	cbnz	r5, 8003150 <__sfp+0x64>
 800311a:	4b16      	ldr	r3, [pc, #88]	; (8003174 <__sfp+0x88>)
 800311c:	60e3      	str	r3, [r4, #12]
 800311e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003122:	6665      	str	r5, [r4, #100]	; 0x64
 8003124:	f000 f847 	bl	80031b6 <__retarget_lock_init_recursive>
 8003128:	f7ff ff96 	bl	8003058 <__sfp_lock_release>
 800312c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003130:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003134:	6025      	str	r5, [r4, #0]
 8003136:	61a5      	str	r5, [r4, #24]
 8003138:	2208      	movs	r2, #8
 800313a:	4629      	mov	r1, r5
 800313c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003140:	f7ff f92c 	bl	800239c <memset>
 8003144:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003148:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800314c:	4620      	mov	r0, r4
 800314e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003150:	3468      	adds	r4, #104	; 0x68
 8003152:	e7d9      	b.n	8003108 <__sfp+0x1c>
 8003154:	2104      	movs	r1, #4
 8003156:	4638      	mov	r0, r7
 8003158:	f7ff ff62 	bl	8003020 <__sfmoreglue>
 800315c:	4604      	mov	r4, r0
 800315e:	6030      	str	r0, [r6, #0]
 8003160:	2800      	cmp	r0, #0
 8003162:	d1d5      	bne.n	8003110 <__sfp+0x24>
 8003164:	f7ff ff78 	bl	8003058 <__sfp_lock_release>
 8003168:	230c      	movs	r3, #12
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	e7ee      	b.n	800314c <__sfp+0x60>
 800316e:	bf00      	nop
 8003170:	080034e8 	.word	0x080034e8
 8003174:	ffff0001 	.word	0xffff0001

08003178 <_fwalk_reent>:
 8003178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800317c:	4606      	mov	r6, r0
 800317e:	4688      	mov	r8, r1
 8003180:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003184:	2700      	movs	r7, #0
 8003186:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800318a:	f1b9 0901 	subs.w	r9, r9, #1
 800318e:	d505      	bpl.n	800319c <_fwalk_reent+0x24>
 8003190:	6824      	ldr	r4, [r4, #0]
 8003192:	2c00      	cmp	r4, #0
 8003194:	d1f7      	bne.n	8003186 <_fwalk_reent+0xe>
 8003196:	4638      	mov	r0, r7
 8003198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800319c:	89ab      	ldrh	r3, [r5, #12]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d907      	bls.n	80031b2 <_fwalk_reent+0x3a>
 80031a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031a6:	3301      	adds	r3, #1
 80031a8:	d003      	beq.n	80031b2 <_fwalk_reent+0x3a>
 80031aa:	4629      	mov	r1, r5
 80031ac:	4630      	mov	r0, r6
 80031ae:	47c0      	blx	r8
 80031b0:	4307      	orrs	r7, r0
 80031b2:	3568      	adds	r5, #104	; 0x68
 80031b4:	e7e9      	b.n	800318a <_fwalk_reent+0x12>

080031b6 <__retarget_lock_init_recursive>:
 80031b6:	4770      	bx	lr

080031b8 <__retarget_lock_acquire_recursive>:
 80031b8:	4770      	bx	lr

080031ba <__retarget_lock_release_recursive>:
 80031ba:	4770      	bx	lr

080031bc <__swhatbuf_r>:
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	460e      	mov	r6, r1
 80031c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031c4:	2900      	cmp	r1, #0
 80031c6:	b096      	sub	sp, #88	; 0x58
 80031c8:	4614      	mov	r4, r2
 80031ca:	461d      	mov	r5, r3
 80031cc:	da08      	bge.n	80031e0 <__swhatbuf_r+0x24>
 80031ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	602a      	str	r2, [r5, #0]
 80031d6:	061a      	lsls	r2, r3, #24
 80031d8:	d410      	bmi.n	80031fc <__swhatbuf_r+0x40>
 80031da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031de:	e00e      	b.n	80031fe <__swhatbuf_r+0x42>
 80031e0:	466a      	mov	r2, sp
 80031e2:	f000 f907 	bl	80033f4 <_fstat_r>
 80031e6:	2800      	cmp	r0, #0
 80031e8:	dbf1      	blt.n	80031ce <__swhatbuf_r+0x12>
 80031ea:	9a01      	ldr	r2, [sp, #4]
 80031ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80031f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80031f4:	425a      	negs	r2, r3
 80031f6:	415a      	adcs	r2, r3
 80031f8:	602a      	str	r2, [r5, #0]
 80031fa:	e7ee      	b.n	80031da <__swhatbuf_r+0x1e>
 80031fc:	2340      	movs	r3, #64	; 0x40
 80031fe:	2000      	movs	r0, #0
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	b016      	add	sp, #88	; 0x58
 8003204:	bd70      	pop	{r4, r5, r6, pc}
	...

08003208 <__smakebuf_r>:
 8003208:	898b      	ldrh	r3, [r1, #12]
 800320a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800320c:	079d      	lsls	r5, r3, #30
 800320e:	4606      	mov	r6, r0
 8003210:	460c      	mov	r4, r1
 8003212:	d507      	bpl.n	8003224 <__smakebuf_r+0x1c>
 8003214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	6123      	str	r3, [r4, #16]
 800321c:	2301      	movs	r3, #1
 800321e:	6163      	str	r3, [r4, #20]
 8003220:	b002      	add	sp, #8
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	ab01      	add	r3, sp, #4
 8003226:	466a      	mov	r2, sp
 8003228:	f7ff ffc8 	bl	80031bc <__swhatbuf_r>
 800322c:	9900      	ldr	r1, [sp, #0]
 800322e:	4605      	mov	r5, r0
 8003230:	4630      	mov	r0, r6
 8003232:	f7ff f9cf 	bl	80025d4 <_malloc_r>
 8003236:	b948      	cbnz	r0, 800324c <__smakebuf_r+0x44>
 8003238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800323c:	059a      	lsls	r2, r3, #22
 800323e:	d4ef      	bmi.n	8003220 <__smakebuf_r+0x18>
 8003240:	f023 0303 	bic.w	r3, r3, #3
 8003244:	f043 0302 	orr.w	r3, r3, #2
 8003248:	81a3      	strh	r3, [r4, #12]
 800324a:	e7e3      	b.n	8003214 <__smakebuf_r+0xc>
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <__smakebuf_r+0x7c>)
 800324e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003250:	89a3      	ldrh	r3, [r4, #12]
 8003252:	6020      	str	r0, [r4, #0]
 8003254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003258:	81a3      	strh	r3, [r4, #12]
 800325a:	9b00      	ldr	r3, [sp, #0]
 800325c:	6163      	str	r3, [r4, #20]
 800325e:	9b01      	ldr	r3, [sp, #4]
 8003260:	6120      	str	r0, [r4, #16]
 8003262:	b15b      	cbz	r3, 800327c <__smakebuf_r+0x74>
 8003264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003268:	4630      	mov	r0, r6
 800326a:	f000 f8d5 	bl	8003418 <_isatty_r>
 800326e:	b128      	cbz	r0, 800327c <__smakebuf_r+0x74>
 8003270:	89a3      	ldrh	r3, [r4, #12]
 8003272:	f023 0303 	bic.w	r3, r3, #3
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	81a3      	strh	r3, [r4, #12]
 800327c:	89a0      	ldrh	r0, [r4, #12]
 800327e:	4305      	orrs	r5, r0
 8003280:	81a5      	strh	r5, [r4, #12]
 8003282:	e7cd      	b.n	8003220 <__smakebuf_r+0x18>
 8003284:	08003015 	.word	0x08003015

08003288 <__malloc_lock>:
 8003288:	4801      	ldr	r0, [pc, #4]	; (8003290 <__malloc_lock+0x8>)
 800328a:	f7ff bf95 	b.w	80031b8 <__retarget_lock_acquire_recursive>
 800328e:	bf00      	nop
 8003290:	20000208 	.word	0x20000208

08003294 <__malloc_unlock>:
 8003294:	4801      	ldr	r0, [pc, #4]	; (800329c <__malloc_unlock+0x8>)
 8003296:	f7ff bf90 	b.w	80031ba <__retarget_lock_release_recursive>
 800329a:	bf00      	nop
 800329c:	20000208 	.word	0x20000208

080032a0 <_raise_r>:
 80032a0:	291f      	cmp	r1, #31
 80032a2:	b538      	push	{r3, r4, r5, lr}
 80032a4:	4604      	mov	r4, r0
 80032a6:	460d      	mov	r5, r1
 80032a8:	d904      	bls.n	80032b4 <_raise_r+0x14>
 80032aa:	2316      	movs	r3, #22
 80032ac:	6003      	str	r3, [r0, #0]
 80032ae:	f04f 30ff 	mov.w	r0, #4294967295
 80032b2:	bd38      	pop	{r3, r4, r5, pc}
 80032b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80032b6:	b112      	cbz	r2, 80032be <_raise_r+0x1e>
 80032b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80032bc:	b94b      	cbnz	r3, 80032d2 <_raise_r+0x32>
 80032be:	4620      	mov	r0, r4
 80032c0:	f000 f830 	bl	8003324 <_getpid_r>
 80032c4:	462a      	mov	r2, r5
 80032c6:	4601      	mov	r1, r0
 80032c8:	4620      	mov	r0, r4
 80032ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032ce:	f000 b817 	b.w	8003300 <_kill_r>
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d00a      	beq.n	80032ec <_raise_r+0x4c>
 80032d6:	1c59      	adds	r1, r3, #1
 80032d8:	d103      	bne.n	80032e2 <_raise_r+0x42>
 80032da:	2316      	movs	r3, #22
 80032dc:	6003      	str	r3, [r0, #0]
 80032de:	2001      	movs	r0, #1
 80032e0:	e7e7      	b.n	80032b2 <_raise_r+0x12>
 80032e2:	2400      	movs	r4, #0
 80032e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80032e8:	4628      	mov	r0, r5
 80032ea:	4798      	blx	r3
 80032ec:	2000      	movs	r0, #0
 80032ee:	e7e0      	b.n	80032b2 <_raise_r+0x12>

080032f0 <raise>:
 80032f0:	4b02      	ldr	r3, [pc, #8]	; (80032fc <raise+0xc>)
 80032f2:	4601      	mov	r1, r0
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	f7ff bfd3 	b.w	80032a0 <_raise_r>
 80032fa:	bf00      	nop
 80032fc:	20000174 	.word	0x20000174

08003300 <_kill_r>:
 8003300:	b538      	push	{r3, r4, r5, lr}
 8003302:	4d07      	ldr	r5, [pc, #28]	; (8003320 <_kill_r+0x20>)
 8003304:	2300      	movs	r3, #0
 8003306:	4604      	mov	r4, r0
 8003308:	4608      	mov	r0, r1
 800330a:	4611      	mov	r1, r2
 800330c:	602b      	str	r3, [r5, #0]
 800330e:	f7fd fe65 	bl	8000fdc <_kill>
 8003312:	1c43      	adds	r3, r0, #1
 8003314:	d102      	bne.n	800331c <_kill_r+0x1c>
 8003316:	682b      	ldr	r3, [r5, #0]
 8003318:	b103      	cbz	r3, 800331c <_kill_r+0x1c>
 800331a:	6023      	str	r3, [r4, #0]
 800331c:	bd38      	pop	{r3, r4, r5, pc}
 800331e:	bf00      	nop
 8003320:	2000020c 	.word	0x2000020c

08003324 <_getpid_r>:
 8003324:	f7fd be52 	b.w	8000fcc <_getpid>

08003328 <__sread>:
 8003328:	b510      	push	{r4, lr}
 800332a:	460c      	mov	r4, r1
 800332c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003330:	f000 f894 	bl	800345c <_read_r>
 8003334:	2800      	cmp	r0, #0
 8003336:	bfab      	itete	ge
 8003338:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800333a:	89a3      	ldrhlt	r3, [r4, #12]
 800333c:	181b      	addge	r3, r3, r0
 800333e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003342:	bfac      	ite	ge
 8003344:	6563      	strge	r3, [r4, #84]	; 0x54
 8003346:	81a3      	strhlt	r3, [r4, #12]
 8003348:	bd10      	pop	{r4, pc}

0800334a <__swrite>:
 800334a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800334e:	461f      	mov	r7, r3
 8003350:	898b      	ldrh	r3, [r1, #12]
 8003352:	05db      	lsls	r3, r3, #23
 8003354:	4605      	mov	r5, r0
 8003356:	460c      	mov	r4, r1
 8003358:	4616      	mov	r6, r2
 800335a:	d505      	bpl.n	8003368 <__swrite+0x1e>
 800335c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003360:	2302      	movs	r3, #2
 8003362:	2200      	movs	r2, #0
 8003364:	f000 f868 	bl	8003438 <_lseek_r>
 8003368:	89a3      	ldrh	r3, [r4, #12]
 800336a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800336e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003372:	81a3      	strh	r3, [r4, #12]
 8003374:	4632      	mov	r2, r6
 8003376:	463b      	mov	r3, r7
 8003378:	4628      	mov	r0, r5
 800337a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800337e:	f000 b817 	b.w	80033b0 <_write_r>

08003382 <__sseek>:
 8003382:	b510      	push	{r4, lr}
 8003384:	460c      	mov	r4, r1
 8003386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800338a:	f000 f855 	bl	8003438 <_lseek_r>
 800338e:	1c43      	adds	r3, r0, #1
 8003390:	89a3      	ldrh	r3, [r4, #12]
 8003392:	bf15      	itete	ne
 8003394:	6560      	strne	r0, [r4, #84]	; 0x54
 8003396:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800339a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800339e:	81a3      	strheq	r3, [r4, #12]
 80033a0:	bf18      	it	ne
 80033a2:	81a3      	strhne	r3, [r4, #12]
 80033a4:	bd10      	pop	{r4, pc}

080033a6 <__sclose>:
 80033a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033aa:	f000 b813 	b.w	80033d4 <_close_r>
	...

080033b0 <_write_r>:
 80033b0:	b538      	push	{r3, r4, r5, lr}
 80033b2:	4d07      	ldr	r5, [pc, #28]	; (80033d0 <_write_r+0x20>)
 80033b4:	4604      	mov	r4, r0
 80033b6:	4608      	mov	r0, r1
 80033b8:	4611      	mov	r1, r2
 80033ba:	2200      	movs	r2, #0
 80033bc:	602a      	str	r2, [r5, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	f7fd fe43 	bl	800104a <_write>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d102      	bne.n	80033ce <_write_r+0x1e>
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	b103      	cbz	r3, 80033ce <_write_r+0x1e>
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
 80033d0:	2000020c 	.word	0x2000020c

080033d4 <_close_r>:
 80033d4:	b538      	push	{r3, r4, r5, lr}
 80033d6:	4d06      	ldr	r5, [pc, #24]	; (80033f0 <_close_r+0x1c>)
 80033d8:	2300      	movs	r3, #0
 80033da:	4604      	mov	r4, r0
 80033dc:	4608      	mov	r0, r1
 80033de:	602b      	str	r3, [r5, #0]
 80033e0:	f7fd fe4f 	bl	8001082 <_close>
 80033e4:	1c43      	adds	r3, r0, #1
 80033e6:	d102      	bne.n	80033ee <_close_r+0x1a>
 80033e8:	682b      	ldr	r3, [r5, #0]
 80033ea:	b103      	cbz	r3, 80033ee <_close_r+0x1a>
 80033ec:	6023      	str	r3, [r4, #0]
 80033ee:	bd38      	pop	{r3, r4, r5, pc}
 80033f0:	2000020c 	.word	0x2000020c

080033f4 <_fstat_r>:
 80033f4:	b538      	push	{r3, r4, r5, lr}
 80033f6:	4d07      	ldr	r5, [pc, #28]	; (8003414 <_fstat_r+0x20>)
 80033f8:	2300      	movs	r3, #0
 80033fa:	4604      	mov	r4, r0
 80033fc:	4608      	mov	r0, r1
 80033fe:	4611      	mov	r1, r2
 8003400:	602b      	str	r3, [r5, #0]
 8003402:	f7fd fe4a 	bl	800109a <_fstat>
 8003406:	1c43      	adds	r3, r0, #1
 8003408:	d102      	bne.n	8003410 <_fstat_r+0x1c>
 800340a:	682b      	ldr	r3, [r5, #0]
 800340c:	b103      	cbz	r3, 8003410 <_fstat_r+0x1c>
 800340e:	6023      	str	r3, [r4, #0]
 8003410:	bd38      	pop	{r3, r4, r5, pc}
 8003412:	bf00      	nop
 8003414:	2000020c 	.word	0x2000020c

08003418 <_isatty_r>:
 8003418:	b538      	push	{r3, r4, r5, lr}
 800341a:	4d06      	ldr	r5, [pc, #24]	; (8003434 <_isatty_r+0x1c>)
 800341c:	2300      	movs	r3, #0
 800341e:	4604      	mov	r4, r0
 8003420:	4608      	mov	r0, r1
 8003422:	602b      	str	r3, [r5, #0]
 8003424:	f7fd fe49 	bl	80010ba <_isatty>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d102      	bne.n	8003432 <_isatty_r+0x1a>
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	b103      	cbz	r3, 8003432 <_isatty_r+0x1a>
 8003430:	6023      	str	r3, [r4, #0]
 8003432:	bd38      	pop	{r3, r4, r5, pc}
 8003434:	2000020c 	.word	0x2000020c

08003438 <_lseek_r>:
 8003438:	b538      	push	{r3, r4, r5, lr}
 800343a:	4d07      	ldr	r5, [pc, #28]	; (8003458 <_lseek_r+0x20>)
 800343c:	4604      	mov	r4, r0
 800343e:	4608      	mov	r0, r1
 8003440:	4611      	mov	r1, r2
 8003442:	2200      	movs	r2, #0
 8003444:	602a      	str	r2, [r5, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	f7fd fe42 	bl	80010d0 <_lseek>
 800344c:	1c43      	adds	r3, r0, #1
 800344e:	d102      	bne.n	8003456 <_lseek_r+0x1e>
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	b103      	cbz	r3, 8003456 <_lseek_r+0x1e>
 8003454:	6023      	str	r3, [r4, #0]
 8003456:	bd38      	pop	{r3, r4, r5, pc}
 8003458:	2000020c 	.word	0x2000020c

0800345c <_read_r>:
 800345c:	b538      	push	{r3, r4, r5, lr}
 800345e:	4d07      	ldr	r5, [pc, #28]	; (800347c <_read_r+0x20>)
 8003460:	4604      	mov	r4, r0
 8003462:	4608      	mov	r0, r1
 8003464:	4611      	mov	r1, r2
 8003466:	2200      	movs	r2, #0
 8003468:	602a      	str	r2, [r5, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	f7fd fdd0 	bl	8001010 <_read>
 8003470:	1c43      	adds	r3, r0, #1
 8003472:	d102      	bne.n	800347a <_read_r+0x1e>
 8003474:	682b      	ldr	r3, [r5, #0]
 8003476:	b103      	cbz	r3, 800347a <_read_r+0x1e>
 8003478:	6023      	str	r3, [r4, #0]
 800347a:	bd38      	pop	{r3, r4, r5, pc}
 800347c:	2000020c 	.word	0x2000020c

08003480 <_init>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	bf00      	nop
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr

0800348c <_fini>:
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	bf00      	nop
 8003490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003492:	bc08      	pop	{r3}
 8003494:	469e      	mov	lr, r3
 8003496:	4770      	bx	lr
