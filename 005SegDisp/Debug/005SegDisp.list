
005SegDisp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ac  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003770  08003770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003788  08003788  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08003788  08003788  00013788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003790  08003790  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003794  08003794  00013794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08003798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200000a8  08003840  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003840  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e50e  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5b  00000000  00000000  0002e5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  00030448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00031100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212bd  00000000  00000000  00031d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1f4  00000000  00000000  00052fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccd60  00000000  00000000  000621b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ef11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003570  00000000  00000000  0012ef64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000a8 	.word	0x200000a8
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003758 	.word	0x08003758

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000ac 	.word	0x200000ac
 8000200:	08003758 	.word	0x08003758

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fc18 	bl	8000d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f818 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8ee 	bl	80006f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f8c2 	bl	80006a0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800051c:	f000 f872 	bl	8000604 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000520:	4806      	ldr	r0, [pc, #24]	; (800053c <main+0x34>)
 8000522:	f001 fda7 	bl	8002074 <HAL_TIM_Base_Start_IT>
  turn_off_display();
 8000526:	f000 f9a5 	bl	8000874 <turn_off_display>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	display_time(cur_time/2 - 1);
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <main+0x38>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	085b      	lsrs	r3, r3, #1
 8000530:	3b01      	subs	r3, #1
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fa88 	bl	8000a48 <display_time>
 8000538:	e7f7      	b.n	800052a <main+0x22>
 800053a:	bf00      	nop
 800053c:	200000c4 	.word	0x200000c4
 8000540:	20000150 	.word	0x20000150

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	2234      	movs	r2, #52	; 0x34
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f003 f8f8 	bl	8003748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b23      	ldr	r3, [pc, #140]	; (80005fc <SystemClock_Config+0xb8>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a22      	ldr	r2, [pc, #136]	; (80005fc <SystemClock_Config+0xb8>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b20      	ldr	r3, [pc, #128]	; (80005fc <SystemClock_Config+0xb8>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000584:	2300      	movs	r3, #0
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <SystemClock_Config+0xbc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000590:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <SystemClock_Config+0xbc>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <SystemClock_Config+0xbc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2310      	movs	r3, #16
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fa6d 	bl	8001a98 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005c4:	f000 f950 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 ff94 	bl	8001510 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ee:	f000 f93b 	bl	8000868 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	; 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_TIM3_Init+0x94>)
 8000622:	4a1e      	ldr	r2, [pc, #120]	; (800069c <MX_TIM3_Init+0x98>)
 8000624:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_TIM3_Init+0x94>)
 8000628:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800062c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_TIM3_Init+0x94>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_TIM3_Init+0x94>)
 8000636:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800063a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_TIM3_Init+0x94>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_TIM3_Init+0x94>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000648:	4813      	ldr	r0, [pc, #76]	; (8000698 <MX_TIM3_Init+0x94>)
 800064a:	f001 fcc3 	bl	8001fd4 <HAL_TIM_Base_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000654:	f000 f908 	bl	8000868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	4619      	mov	r1, r3
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <MX_TIM3_Init+0x94>)
 8000666:	f001 fe7d 	bl	8002364 <HAL_TIM_ConfigClockSource>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000670:	f000 f8fa 	bl	8000868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_TIM3_Init+0x94>)
 8000682:	f002 f899 	bl	80027b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800068c:	f000 f8ec 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000c4 	.word	0x200000c4
 800069c:	40000400 	.word	0x40000400

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART2_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c6:	2204      	movs	r2, #4
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d8:	f002 f8fe 	bl	80028d8 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f8c1 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000010c 	.word	0x2000010c
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b45      	ldr	r3, [pc, #276]	; (8000824 <MX_GPIO_Init+0x130>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a44      	ldr	r2, [pc, #272]	; (8000824 <MX_GPIO_Init+0x130>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b42      	ldr	r3, [pc, #264]	; (8000824 <MX_GPIO_Init+0x130>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b3e      	ldr	r3, [pc, #248]	; (8000824 <MX_GPIO_Init+0x130>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a3d      	ldr	r2, [pc, #244]	; (8000824 <MX_GPIO_Init+0x130>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <MX_GPIO_Init+0x130>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b37      	ldr	r3, [pc, #220]	; (8000824 <MX_GPIO_Init+0x130>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a36      	ldr	r2, [pc, #216]	; (8000824 <MX_GPIO_Init+0x130>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b34      	ldr	r3, [pc, #208]	; (8000824 <MX_GPIO_Init+0x130>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b30      	ldr	r3, [pc, #192]	; (8000824 <MX_GPIO_Init+0x130>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a2f      	ldr	r2, [pc, #188]	; (8000824 <MX_GPIO_Init+0x130>)
 8000768:	f043 0308 	orr.w	r3, r3, #8
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <MX_GPIO_Init+0x130>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0308 	and.w	r3, r3, #8
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, F_Pin|DP_Pin|G_Pin|A_Pin
 800077a:	2200      	movs	r2, #0
 800077c:	f643 0103 	movw	r1, #14339	; 0x3803
 8000780:	4829      	ldr	r0, [pc, #164]	; (8000828 <MX_GPIO_Init+0x134>)
 8000782:	f000 feab 	bl	80014dc <HAL_GPIO_WritePin>
                          |C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D1_Pin|D2_Pin|D3_Pin|D_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f248 0113 	movw	r1, #32787	; 0x8013
 800078c:	4827      	ldr	r0, [pc, #156]	; (800082c <MX_GPIO_Init+0x138>)
 800078e:	f000 fea5 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|E_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2181      	movs	r1, #129	; 0x81
 8000796:	4826      	ldr	r0, [pc, #152]	; (8000830 <MX_GPIO_Init+0x13c>)
 8000798:	f000 fea0 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2104      	movs	r1, #4
 80007a0:	4824      	ldr	r0, [pc, #144]	; (8000834 <MX_GPIO_Init+0x140>)
 80007a2:	f000 fe9b 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : F_Pin DP_Pin G_Pin A_Pin
                           C_Pin */
  GPIO_InitStruct.Pin = F_Pin|DP_Pin|G_Pin|A_Pin
 80007a6:	f643 0303 	movw	r3, #14339	; 0x3803
 80007aa:	617b      	str	r3, [r7, #20]
                          |C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	481a      	ldr	r0, [pc, #104]	; (8000828 <MX_GPIO_Init+0x134>)
 80007c0:	f000 fcf8 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D2_Pin D3_Pin D_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D3_Pin|D_Pin;
 80007c4:	f248 0313 	movw	r3, #32787	; 0x8013
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <MX_GPIO_Init+0x138>)
 80007de:	f000 fce9 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin E_Pin */
  GPIO_InitStruct.Pin = D4_Pin|E_Pin;
 80007e2:	2381      	movs	r3, #129	; 0x81
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <MX_GPIO_Init+0x13c>)
 80007fa:	f000 fcdb 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_Pin */
  GPIO_InitStruct.Pin = B_Pin;
 80007fe:	2304      	movs	r3, #4
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(B_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <MX_GPIO_Init+0x140>)
 8000816:	f000 fccd 	bl	80011b4 <HAL_GPIO_Init>

}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40020800 	.word	0x40020800
 800082c:	40020000 	.word	0x40020000
 8000830:	40020400 	.word	0x40020400
 8000834:	40020c00 	.word	0x40020c00

08000838 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d104      	bne.n	8000854 <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
        cur_time += 1;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	3301      	adds	r3, #1
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000852:	6013      	str	r3, [r2, #0]
        //display_big_num(1111);
    }
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40000400 	.word	0x40000400
 8000864:	20000150 	.word	0x20000150

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>
	...

08000874 <turn_off_display>:
  {1, 1, 1, 1, 1, 1, 1, 0},
  {1, 1, 1, 1, 0, 1, 1, 0}};

uint8_t n_seg = 8, n_disp = 4; // number of display segments

void turn_off_display() {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
	// HIGH на все дисплеи, LOW на все сегменты
	for (uint8_t i = 0; i < n_disp; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	71fb      	strb	r3, [r7, #7]
 800087e:	e00e      	b.n	800089e <turn_off_display+0x2a>
			HAL_GPIO_WritePin(display_ports[i], display_pins[i], GPIO_PIN_SET);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <turn_off_display+0x6c>)
 8000884:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <turn_off_display+0x70>)
 800088c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000890:	2201      	movs	r2, #1
 8000892:	4619      	mov	r1, r3
 8000894:	f000 fe22 	bl	80014dc <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < n_disp; i++) {
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	3301      	adds	r3, #1
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <turn_off_display+0x74>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d3eb      	bcc.n	8000880 <turn_off_display+0xc>
	}
	for (uint8_t i = 0; i < n_seg; i++) {
 80008a8:	2300      	movs	r3, #0
 80008aa:	71bb      	strb	r3, [r7, #6]
 80008ac:	e00e      	b.n	80008cc <turn_off_display+0x58>
		HAL_GPIO_WritePin(segment_ports[i], segment_pins[i], GPIO_PIN_RESET);
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <turn_off_display+0x78>)
 80008b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <turn_off_display+0x7c>)
 80008ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008be:	2200      	movs	r2, #0
 80008c0:	4619      	mov	r1, r3
 80008c2:	f000 fe0b 	bl	80014dc <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < n_seg; i++) {
 80008c6:	79bb      	ldrb	r3, [r7, #6]
 80008c8:	3301      	adds	r3, #1
 80008ca:	71bb      	strb	r3, [r7, #6]
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <turn_off_display+0x80>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	79ba      	ldrb	r2, [r7, #6]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d3eb      	bcc.n	80008ae <turn_off_display+0x3a>
	}
}
 80008d6:	bf00      	nop
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000038 	.word	0x20000038
 80008e4:	20000030 	.word	0x20000030
 80008e8:	20000099 	.word	0x20000099
 80008ec:	20000010 	.word	0x20000010
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000098 	.word	0x20000098

080008f8 <display_num>:

/* Number -- число от 0 до 9, digit -- номер дисплея от 0 до 3.
 */
void display_num(uint8_t number, uint8_t digit) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
	if (number > 9 || digit >= n_disp) return;
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b09      	cmp	r3, #9
 800090c:	d841      	bhi.n	8000992 <display_num+0x9a>
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <display_num+0xa4>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	429a      	cmp	r2, r3
 8000916:	d23c      	bcs.n	8000992 <display_num+0x9a>
	turn_off_display();
 8000918:	f7ff ffac 	bl	8000874 <turn_off_display>
	// LOW на номер дисплея
	HAL_GPIO_WritePin(display_ports[digit], display_pins[digit], GPIO_PIN_RESET);
 800091c:	79bb      	ldrb	r3, [r7, #6]
 800091e:	4a20      	ldr	r2, [pc, #128]	; (80009a0 <display_num+0xa8>)
 8000920:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000924:	79bb      	ldrb	r3, [r7, #6]
 8000926:	4a1f      	ldr	r2, [pc, #124]	; (80009a4 <display_num+0xac>)
 8000928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092c:	2200      	movs	r2, #0
 800092e:	4619      	mov	r1, r3
 8000930:	f000 fdd4 	bl	80014dc <HAL_GPIO_WritePin>
	// HIGH на сегменты дисплея
	for (uint8_t i = 0; i < n_seg; i++) {
 8000934:	2300      	movs	r3, #0
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	e017      	b.n	800096a <display_num+0x72>
		if (num[number][i]) {
 800093a:	79fa      	ldrb	r2, [r7, #7]
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	491a      	ldr	r1, [pc, #104]	; (80009a8 <display_num+0xb0>)
 8000940:	00d2      	lsls	r2, r2, #3
 8000942:	440a      	add	r2, r1
 8000944:	4413      	add	r3, r2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d00b      	beq.n	8000964 <display_num+0x6c>
			HAL_GPIO_WritePin(segment_ports[i], segment_pins[i], GPIO_PIN_SET);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <display_num+0xb4>)
 8000950:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <display_num+0xb8>)
 8000958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800095c:	2201      	movs	r2, #1
 800095e:	4619      	mov	r1, r3
 8000960:	f000 fdbc 	bl	80014dc <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < n_seg; i++) {
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	3301      	adds	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <display_num+0xbc>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	7bfa      	ldrb	r2, [r7, #15]
 8000970:	429a      	cmp	r2, r3
 8000972:	d3e2      	bcc.n	800093a <display_num+0x42>
		}
	}
	if (digit == 1) HAL_GPIO_WritePin(segment_ports[7], segment_pins[7], GPIO_PIN_SET);
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d107      	bne.n	800098a <display_num+0x92>
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <display_num+0xb4>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	4a0c      	ldr	r2, [pc, #48]	; (80009b0 <display_num+0xb8>)
 8000980:	89d1      	ldrh	r1, [r2, #14]
 8000982:	2201      	movs	r2, #1
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fda9 	bl	80014dc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800098a:	2001      	movs	r0, #1
 800098c:	f000 fa4a 	bl	8000e24 <HAL_Delay>
 8000990:	e000      	b.n	8000994 <display_num+0x9c>
	if (number > 9 || digit >= n_disp) return;
 8000992:	bf00      	nop
}
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000099 	.word	0x20000099
 80009a0:	20000038 	.word	0x20000038
 80009a4:	20000030 	.word	0x20000030
 80009a8:	20000048 	.word	0x20000048
 80009ac:	20000010 	.word	0x20000010
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000098 	.word	0x20000098

080009b8 <sec_to_time>:
struct time {
  uint8_t h, m, s;
};

// перевод секунд в часы минуты секунды
struct time sec_to_time(uint32_t sec) {
 80009b8:	b480      	push	{r7}
 80009ba:	b087      	sub	sp, #28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t minutes = sec / 60,
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <sec_to_time+0x8c>)
 80009c4:	fba2 2303 	umull	r2, r3, r2, r3
 80009c8:	095b      	lsrs	r3, r3, #5
 80009ca:	617b      	str	r3, [r7, #20]
           hours = minutes / 60;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	4a1d      	ldr	r2, [pc, #116]	; (8000a44 <sec_to_time+0x8c>)
 80009d0:	fba2 2303 	umull	r2, r3, r2, r3
 80009d4:	095b      	lsrs	r3, r3, #5
 80009d6:	613b      	str	r3, [r7, #16]
  struct time t;
  t.s = sec % 60;
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <sec_to_time+0x8c>)
 80009dc:	fba3 2301 	umull	r2, r3, r3, r1
 80009e0:	095a      	lsrs	r2, r3, #5
 80009e2:	4613      	mov	r3, r2
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	1a9b      	subs	r3, r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	1aca      	subs	r2, r1, r3
 80009ec:	b2d3      	uxtb	r3, r2
 80009ee:	72bb      	strb	r3, [r7, #10]
  t.m = minutes % 60;
 80009f0:	6979      	ldr	r1, [r7, #20]
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <sec_to_time+0x8c>)
 80009f4:	fba3 2301 	umull	r2, r3, r3, r1
 80009f8:	095a      	lsrs	r2, r3, #5
 80009fa:	4613      	mov	r3, r2
 80009fc:	011b      	lsls	r3, r3, #4
 80009fe:	1a9b      	subs	r3, r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	1aca      	subs	r2, r1, r3
 8000a04:	b2d3      	uxtb	r3, r2
 8000a06:	727b      	strb	r3, [r7, #9]
  t.h = hours;
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	723b      	strb	r3, [r7, #8]
  return t;
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	f107 0208 	add.w	r2, r7, #8
 8000a16:	6812      	ldr	r2, [r2, #0]
 8000a18:	4611      	mov	r1, r2
 8000a1a:	8019      	strh	r1, [r3, #0]
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	0c12      	lsrs	r2, r2, #16
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	2300      	movs	r3, #0
 8000a24:	7b3a      	ldrb	r2, [r7, #12]
 8000a26:	f362 0307 	bfi	r3, r2, #0, #8
 8000a2a:	7b7a      	ldrb	r2, [r7, #13]
 8000a2c:	f362 230f 	bfi	r3, r2, #8, #8
 8000a30:	7bba      	ldrb	r2, [r7, #14]
 8000a32:	f362 4317 	bfi	r3, r2, #16, #8
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	371c      	adds	r7, #28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	88888889 	.word	0x88888889

08000a48 <display_time>:

void display_time(uint32_t sec) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	struct time t = sec_to_time(sec);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ffb1 	bl	80009b8 <sec_to_time>
 8000a56:	4603      	mov	r3, r0
 8000a58:	461a      	mov	r2, r3
 8000a5a:	723a      	strb	r2, [r7, #8]
 8000a5c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000a60:	727a      	strb	r2, [r7, #9]
 8000a62:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000a66:	72bb      	strb	r3, [r7, #10]
	uint8_t a = (t.m / 10) % 10,
 8000a68:	7a7b      	ldrb	r3, [r7, #9]
 8000a6a:	4a26      	ldr	r2, [pc, #152]	; (8000b04 <display_time+0xbc>)
 8000a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a70:	08db      	lsrs	r3, r3, #3
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <display_time+0xbc>)
 8000a76:	fba3 1302 	umull	r1, r3, r3, r2
 8000a7a:	08d9      	lsrs	r1, r3, #3
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	440b      	add	r3, r1
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	73fb      	strb	r3, [r7, #15]
				b = t.m % 10,
 8000a88:	7a7a      	ldrb	r2, [r7, #9]
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <display_time+0xbc>)
 8000a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8000a90:	08d9      	lsrs	r1, r3, #3
 8000a92:	460b      	mov	r3, r1
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	440b      	add	r3, r1
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	73bb      	strb	r3, [r7, #14]
				c = (t.s / 10) % 10,
 8000a9e:	7abb      	ldrb	r3, [r7, #10]
 8000aa0:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <display_time+0xbc>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <display_time+0xbc>)
 8000aac:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab0:	08d9      	lsrs	r1, r3, #3
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	737b      	strb	r3, [r7, #13]
				d = t.s % 10;
 8000abe:	7aba      	ldrb	r2, [r7, #10]
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <display_time+0xbc>)
 8000ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ac6:	08d9      	lsrs	r1, r3, #3
 8000ac8:	460b      	mov	r3, r1
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	440b      	add	r3, r1
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	733b      	strb	r3, [r7, #12]
		display_num(a, 0);
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff0d 	bl	80008f8 <display_num>
		display_num(b, 1);
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff08 	bl	80008f8 <display_num>
		display_num(c, 2);
 8000ae8:	7b7b      	ldrb	r3, [r7, #13]
 8000aea:	2102      	movs	r1, #2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff03 	bl	80008f8 <display_num>
		display_num(d, 3);
 8000af2:	7b3b      	ldrb	r3, [r7, #12]
 8000af4:	2103      	movs	r1, #3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fefe 	bl	80008f8 <display_num>
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	cccccccd 	.word	0xcccccccd

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_TIM_Base_MspInit+0x48>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d115      	bne.n	8000b96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_TIM_Base_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a0c      	ldr	r2, [pc, #48]	; (8000ba4 <HAL_TIM_Base_MspInit+0x4c>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_TIM_Base_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	201d      	movs	r0, #29
 8000b8c:	f000 fa49 	bl	8001022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b90:	201d      	movs	r0, #29
 8000b92:	f000 fa62 	bl	800105a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40000400 	.word	0x40000400
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <HAL_UART_MspInit+0x94>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d133      	bne.n	8000c32 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c02:	230c      	movs	r3, #12
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c12:	2307      	movs	r3, #7
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4809      	ldr	r0, [pc, #36]	; (8000c44 <HAL_UART_MspInit+0x9c>)
 8000c1e:	f000 fac9 	bl	80011b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2026      	movs	r0, #38	; 0x26
 8000c28:	f000 f9fb 	bl	8001022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c2c:	2026      	movs	r0, #38	; 0x26
 8000c2e:	f000 fa14 	bl	800105a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f8a6 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <TIM3_IRQHandler+0x14>)
 8000ca2:	f001 fa57 	bl	8002154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_TIM_PeriodElapsedCallback(&htim3);
 8000ca6:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <TIM3_IRQHandler+0x14>)
 8000ca8:	f7ff fdc6 	bl	8000838 <HAL_TIM_PeriodElapsedCallback>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000c4 	.word	0x200000c4

08000cb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <USART2_IRQHandler+0x10>)
 8000cba:	f001 fe5b 	bl	8002974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000010c 	.word	0x2000010c

08000cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <SystemInit+0x20>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <SystemInit+0x20>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cf2:	490e      	ldr	r1, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d08:	4c0b      	ldr	r4, [pc, #44]	; (8000d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d16:	f7ff ffd7 	bl	8000cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f002 fcf1 	bl	8003700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1e:	f7ff fbf3 	bl	8000508 <main>
  bx  lr    
 8000d22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000d30:	08003798 	.word	0x08003798
  ldr r2, =_sbss
 8000d34:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000d38:	20000158 	.word	0x20000158

08000d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC_IRQHandler>
	...

08000d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <HAL_Init+0x40>)
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_Init+0x40>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_Init+0x40>)
 8000d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f94f 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	200f      	movs	r0, #15
 8000d70:	f000 f808 	bl	8000d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f7ff fec8 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x54>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_InitTick+0x58>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f967 	bl	8001076 <HAL_SYSTICK_Config>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00e      	b.n	8000dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d80a      	bhi.n	8000dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	2200      	movs	r2, #0
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f000 f92f 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <HAL_InitTick+0x5c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e000      	b.n	8000dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2000009c 	.word	0x2000009c
 8000ddc:	200000a4 	.word	0x200000a4
 8000de0:	200000a0 	.word	0x200000a0

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200000a4 	.word	0x200000a4
 8000e08:	20000154 	.word	0x20000154

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000154 	.word	0x20000154

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff ffee 	bl	8000e0c <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffde 	bl	8000e0c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000a4 	.word	0x200000a4

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4907      	ldr	r1, [pc, #28]	; (8000f08 <__NVIC_EnableIRQ+0x38>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff29 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff3e 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff8e 	bl	8000f60 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff31 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffa2 	bl	8000fc8 <SysTick_Config>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff feb6 	bl	8000e0c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d008      	beq.n	80010c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e052      	b.n	8001166 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0216 	bic.w	r2, r2, #22
 80010ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	695a      	ldr	r2, [r3, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d103      	bne.n	80010f0 <HAL_DMA_Abort+0x62>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d007      	beq.n	8001100 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0208 	bic.w	r2, r2, #8
 80010fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0201 	bic.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001110:	e013      	b.n	800113a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001112:	f7ff fe7b 	bl	8000e0c <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b05      	cmp	r3, #5
 800111e:	d90c      	bls.n	800113a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2220      	movs	r2, #32
 8001124:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2203      	movs	r2, #3
 800112a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e015      	b.n	8001166 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1e4      	bne.n	8001112 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114c:	223f      	movs	r2, #63	; 0x3f
 800114e:	409a      	lsls	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d004      	beq.n	800118c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e00c      	b.n	80011a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2205      	movs	r2, #5
 8001190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	e165      	b.n	800149c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	f040 8154 	bne.w	8001496 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d005      	beq.n	8001206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001202:	2b02      	cmp	r3, #2
 8001204:	d130      	bne.n	8001268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800123c:	2201      	movs	r2, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	f003 0201 	and.w	r2, r3, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b03      	cmp	r3, #3
 8001272:	d017      	beq.n	80012a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d123      	bne.n	80012f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0203 	and.w	r2, r3, #3
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80ae 	beq.w	8001496 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b5d      	ldr	r3, [pc, #372]	; (80014b4 <HAL_GPIO_Init+0x300>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a5c      	ldr	r2, [pc, #368]	; (80014b4 <HAL_GPIO_Init+0x300>)
 8001344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b5a      	ldr	r3, [pc, #360]	; (80014b4 <HAL_GPIO_Init+0x300>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001356:	4a58      	ldr	r2, [pc, #352]	; (80014b8 <HAL_GPIO_Init+0x304>)
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	220f      	movs	r2, #15
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4f      	ldr	r2, [pc, #316]	; (80014bc <HAL_GPIO_Init+0x308>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d025      	beq.n	80013ce <HAL_GPIO_Init+0x21a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4e      	ldr	r2, [pc, #312]	; (80014c0 <HAL_GPIO_Init+0x30c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01f      	beq.n	80013ca <HAL_GPIO_Init+0x216>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4d      	ldr	r2, [pc, #308]	; (80014c4 <HAL_GPIO_Init+0x310>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d019      	beq.n	80013c6 <HAL_GPIO_Init+0x212>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4c      	ldr	r2, [pc, #304]	; (80014c8 <HAL_GPIO_Init+0x314>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0x20e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4b      	ldr	r2, [pc, #300]	; (80014cc <HAL_GPIO_Init+0x318>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d00d      	beq.n	80013be <HAL_GPIO_Init+0x20a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4a      	ldr	r2, [pc, #296]	; (80014d0 <HAL_GPIO_Init+0x31c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d007      	beq.n	80013ba <HAL_GPIO_Init+0x206>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a49      	ldr	r2, [pc, #292]	; (80014d4 <HAL_GPIO_Init+0x320>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d101      	bne.n	80013b6 <HAL_GPIO_Init+0x202>
 80013b2:	2306      	movs	r3, #6
 80013b4:	e00c      	b.n	80013d0 <HAL_GPIO_Init+0x21c>
 80013b6:	2307      	movs	r3, #7
 80013b8:	e00a      	b.n	80013d0 <HAL_GPIO_Init+0x21c>
 80013ba:	2305      	movs	r3, #5
 80013bc:	e008      	b.n	80013d0 <HAL_GPIO_Init+0x21c>
 80013be:	2304      	movs	r3, #4
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x21c>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e004      	b.n	80013d0 <HAL_GPIO_Init+0x21c>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_Init+0x21c>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_GPIO_Init+0x21c>
 80013ce:	2300      	movs	r3, #0
 80013d0:	69fa      	ldr	r2, [r7, #28]
 80013d2:	f002 0203 	and.w	r2, r2, #3
 80013d6:	0092      	lsls	r2, r2, #2
 80013d8:	4093      	lsls	r3, r2
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e0:	4935      	ldr	r1, [pc, #212]	; (80014b8 <HAL_GPIO_Init+0x304>)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <HAL_GPIO_Init+0x324>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001412:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <HAL_GPIO_Init+0x324>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001418:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <HAL_GPIO_Init+0x324>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800143c:	4a26      	ldr	r2, [pc, #152]	; (80014d8 <HAL_GPIO_Init+0x324>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <HAL_GPIO_Init+0x324>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001466:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <HAL_GPIO_Init+0x324>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <HAL_GPIO_Init+0x324>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <HAL_GPIO_Init+0x324>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	2b0f      	cmp	r3, #15
 80014a0:	f67f ae96 	bls.w	80011d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40013800 	.word	0x40013800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40021400 	.word	0x40021400
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40013c00 	.word	0x40013c00

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f8:	e003      	b.n	8001502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	619a      	str	r2, [r3, #24]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0cc      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001524:	4b68      	ldr	r3, [pc, #416]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 030f 	and.w	r3, r3, #15
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d90c      	bls.n	800154c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001532:	4b65      	ldr	r3, [pc, #404]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0b8      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d020      	beq.n	800159a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001564:	4b59      	ldr	r3, [pc, #356]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4a58      	ldr	r2, [pc, #352]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800156e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800157c:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4a52      	ldr	r2, [pc, #328]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001588:	4b50      	ldr	r3, [pc, #320]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	494d      	ldr	r1, [pc, #308]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d044      	beq.n	8001630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d119      	bne.n	80015ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e07f      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d003      	beq.n	80015ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ce:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e06f      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e067      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ee:	4b37      	ldr	r3, [pc, #220]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f023 0203 	bic.w	r2, r3, #3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4934      	ldr	r1, [pc, #208]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001600:	f7ff fc04 	bl	8000e0c <HAL_GetTick>
 8001604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001606:	e00a      	b.n	800161e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001608:	f7ff fc00 	bl	8000e0c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	; 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e04f      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 020c 	and.w	r2, r3, #12
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	429a      	cmp	r2, r3
 800162e:	d1eb      	bne.n	8001608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 030f 	and.w	r3, r3, #15
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d20c      	bcs.n	8001658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e032      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	4916      	ldr	r1, [pc, #88]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	490e      	ldr	r1, [pc, #56]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	4313      	orrs	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001696:	f000 f855 	bl	8001744 <HAL_RCC_GetSysClockFreq>
 800169a:	4602      	mov	r2, r0
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	490a      	ldr	r1, [pc, #40]	; (80016d0 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	5ccb      	ldrb	r3, [r1, r3]
 80016aa:	fa22 f303 	lsr.w	r3, r2, r3
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1c8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fb64 	bl	8000d84 <HAL_InitTick>

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023c00 	.word	0x40023c00
 80016cc:	40023800 	.word	0x40023800
 80016d0:	08003770 	.word	0x08003770
 80016d4:	2000009c 	.word	0x2000009c
 80016d8:	200000a0 	.word	0x200000a0

080016dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	2000009c 	.word	0x2000009c

080016f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016f8:	f7ff fff0 	bl	80016dc <HAL_RCC_GetHCLKFreq>
 80016fc:	4602      	mov	r2, r0
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	0a9b      	lsrs	r3, r3, #10
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	4903      	ldr	r1, [pc, #12]	; (8001718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800170a:	5ccb      	ldrb	r3, [r1, r3]
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001710:	4618      	mov	r0, r3
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40023800 	.word	0x40023800
 8001718:	08003780 	.word	0x08003780

0800171c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001720:	f7ff ffdc 	bl	80016dc <HAL_RCC_GetHCLKFreq>
 8001724:	4602      	mov	r2, r0
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	0b5b      	lsrs	r3, r3, #13
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	4903      	ldr	r1, [pc, #12]	; (8001740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	08003780 	.word	0x08003780

08001744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001748:	b0a6      	sub	sp, #152	; 0x98
 800174a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800176a:	4bc8      	ldr	r3, [pc, #800]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x348>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b0c      	cmp	r3, #12
 8001774:	f200 817e 	bhi.w	8001a74 <HAL_RCC_GetSysClockFreq+0x330>
 8001778:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <HAL_RCC_GetSysClockFreq+0x3c>)
 800177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177e:	bf00      	nop
 8001780:	080017b5 	.word	0x080017b5
 8001784:	08001a75 	.word	0x08001a75
 8001788:	08001a75 	.word	0x08001a75
 800178c:	08001a75 	.word	0x08001a75
 8001790:	080017bd 	.word	0x080017bd
 8001794:	08001a75 	.word	0x08001a75
 8001798:	08001a75 	.word	0x08001a75
 800179c:	08001a75 	.word	0x08001a75
 80017a0:	080017c5 	.word	0x080017c5
 80017a4:	08001a75 	.word	0x08001a75
 80017a8:	08001a75 	.word	0x08001a75
 80017ac:	08001a75 	.word	0x08001a75
 80017b0:	0800192f 	.word	0x0800192f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b4:	4bb6      	ldr	r3, [pc, #728]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x34c>)
 80017b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80017ba:	e15f      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017bc:	4bb5      	ldr	r3, [pc, #724]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x350>)
 80017be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80017c2:	e15b      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c4:	4bb1      	ldr	r3, [pc, #708]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x348>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d0:	4bae      	ldr	r3, [pc, #696]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x348>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d031      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017dc:	4bab      	ldr	r3, [pc, #684]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x348>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	2200      	movs	r2, #0
 80017e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80017e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80017e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ee:	663b      	str	r3, [r7, #96]	; 0x60
 80017f0:	2300      	movs	r3, #0
 80017f2:	667b      	str	r3, [r7, #100]	; 0x64
 80017f4:	4ba7      	ldr	r3, [pc, #668]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x350>)
 80017f6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80017fa:	462a      	mov	r2, r5
 80017fc:	fb03 f202 	mul.w	r2, r3, r2
 8001800:	2300      	movs	r3, #0
 8001802:	4621      	mov	r1, r4
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	4413      	add	r3, r2
 800180a:	4aa2      	ldr	r2, [pc, #648]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x350>)
 800180c:	4621      	mov	r1, r4
 800180e:	fba1 1202 	umull	r1, r2, r1, r2
 8001812:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001814:	460a      	mov	r2, r1
 8001816:	67ba      	str	r2, [r7, #120]	; 0x78
 8001818:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800181a:	4413      	add	r3, r2
 800181c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800181e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001822:	2200      	movs	r2, #0
 8001824:	65bb      	str	r3, [r7, #88]	; 0x58
 8001826:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001828:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800182c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001830:	f7fe fce8 	bl	8000204 <__aeabi_uldivmod>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4613      	mov	r3, r2
 800183a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800183e:	e064      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001840:	4b92      	ldr	r3, [pc, #584]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	099b      	lsrs	r3, r3, #6
 8001846:	2200      	movs	r2, #0
 8001848:	653b      	str	r3, [r7, #80]	; 0x50
 800184a:	657a      	str	r2, [r7, #84]	; 0x54
 800184c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800184e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001852:	64bb      	str	r3, [r7, #72]	; 0x48
 8001854:	2300      	movs	r3, #0
 8001856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001858:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800185c:	4622      	mov	r2, r4
 800185e:	462b      	mov	r3, r5
 8001860:	f04f 0000 	mov.w	r0, #0
 8001864:	f04f 0100 	mov.w	r1, #0
 8001868:	0159      	lsls	r1, r3, #5
 800186a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800186e:	0150      	lsls	r0, r2, #5
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4621      	mov	r1, r4
 8001876:	1a51      	subs	r1, r2, r1
 8001878:	6139      	str	r1, [r7, #16]
 800187a:	4629      	mov	r1, r5
 800187c:	eb63 0301 	sbc.w	r3, r3, r1
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800188e:	4659      	mov	r1, fp
 8001890:	018b      	lsls	r3, r1, #6
 8001892:	4651      	mov	r1, sl
 8001894:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001898:	4651      	mov	r1, sl
 800189a:	018a      	lsls	r2, r1, #6
 800189c:	4651      	mov	r1, sl
 800189e:	ebb2 0801 	subs.w	r8, r2, r1
 80018a2:	4659      	mov	r1, fp
 80018a4:	eb63 0901 	sbc.w	r9, r3, r1
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018bc:	4690      	mov	r8, r2
 80018be:	4699      	mov	r9, r3
 80018c0:	4623      	mov	r3, r4
 80018c2:	eb18 0303 	adds.w	r3, r8, r3
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	462b      	mov	r3, r5
 80018ca:	eb49 0303 	adc.w	r3, r9, r3
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018dc:	4629      	mov	r1, r5
 80018de:	028b      	lsls	r3, r1, #10
 80018e0:	4621      	mov	r1, r4
 80018e2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018e6:	4621      	mov	r1, r4
 80018e8:	028a      	lsls	r2, r1, #10
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018f2:	2200      	movs	r2, #0
 80018f4:	643b      	str	r3, [r7, #64]	; 0x40
 80018f6:	647a      	str	r2, [r7, #68]	; 0x44
 80018f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018fc:	f7fe fc82 	bl	8000204 <__aeabi_uldivmod>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4613      	mov	r3, r2
 8001906:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800190a:	4b60      	ldr	r3, [pc, #384]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x348>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	0c1b      	lsrs	r3, r3, #16
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	3301      	adds	r3, #1
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800191c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001920:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001924:	fbb2 f3f3 	udiv	r3, r2, r3
 8001928:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800192c:	e0a6      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192e:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001936:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193a:	4b54      	ldr	r3, [pc, #336]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x348>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d02a      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001946:	4b51      	ldr	r3, [pc, #324]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	099b      	lsrs	r3, r3, #6
 800194c:	2200      	movs	r2, #0
 800194e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001950:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001958:	2100      	movs	r1, #0
 800195a:	4b4e      	ldr	r3, [pc, #312]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x350>)
 800195c:	fb03 f201 	mul.w	r2, r3, r1
 8001960:	2300      	movs	r3, #0
 8001962:	fb00 f303 	mul.w	r3, r0, r3
 8001966:	4413      	add	r3, r2
 8001968:	4a4a      	ldr	r2, [pc, #296]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x350>)
 800196a:	fba0 1202 	umull	r1, r2, r0, r2
 800196e:	677a      	str	r2, [r7, #116]	; 0x74
 8001970:	460a      	mov	r2, r1
 8001972:	673a      	str	r2, [r7, #112]	; 0x70
 8001974:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001976:	4413      	add	r3, r2
 8001978:	677b      	str	r3, [r7, #116]	; 0x74
 800197a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800197e:	2200      	movs	r2, #0
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
 8001982:	637a      	str	r2, [r7, #52]	; 0x34
 8001984:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001988:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800198c:	f7fe fc3a 	bl	8000204 <__aeabi_uldivmod>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4613      	mov	r3, r2
 8001996:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800199a:	e05b      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199c:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x348>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	2200      	movs	r2, #0
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ae:	623b      	str	r3, [r7, #32]
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
 80019b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019b8:	4642      	mov	r2, r8
 80019ba:	464b      	mov	r3, r9
 80019bc:	f04f 0000 	mov.w	r0, #0
 80019c0:	f04f 0100 	mov.w	r1, #0
 80019c4:	0159      	lsls	r1, r3, #5
 80019c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ca:	0150      	lsls	r0, r2, #5
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4641      	mov	r1, r8
 80019d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80019d6:	4649      	mov	r1, r9
 80019d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019f0:	ebb2 040a 	subs.w	r4, r2, sl
 80019f4:	eb63 050b 	sbc.w	r5, r3, fp
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	00eb      	lsls	r3, r5, #3
 8001a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a06:	00e2      	lsls	r2, r4, #3
 8001a08:	4614      	mov	r4, r2
 8001a0a:	461d      	mov	r5, r3
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	18e3      	adds	r3, r4, r3
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	464b      	mov	r3, r9
 8001a14:	eb45 0303 	adc.w	r3, r5, r3
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a26:	4629      	mov	r1, r5
 8001a28:	028b      	lsls	r3, r1, #10
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a30:	4621      	mov	r1, r4
 8001a32:	028a      	lsls	r2, r1, #10
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	61fa      	str	r2, [r7, #28]
 8001a42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a46:	f7fe fbdd 	bl	8000204 <__aeabi_uldivmod>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4613      	mov	r3, r2
 8001a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	0f1b      	lsrs	r3, r3, #28
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001a62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001a72:	e003      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001a7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3798      	adds	r7, #152	; 0x98
 8001a84:	46bd      	mov	sp, r7
 8001a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	00f42400 	.word	0x00f42400
 8001a94:	017d7840 	.word	0x017d7840

08001a98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e28d      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8083 	beq.w	8001bbe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ab8:	4b94      	ldr	r3, [pc, #592]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d019      	beq.n	8001af8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ac4:	4b91      	ldr	r3, [pc, #580]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ad0:	4b8e      	ldr	r3, [pc, #568]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001adc:	d00c      	beq.n	8001af8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ade:	4b8b      	ldr	r3, [pc, #556]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d112      	bne.n	8001b10 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aea:	4b88      	ldr	r3, [pc, #544]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001af6:	d10b      	bne.n	8001b10 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	4b84      	ldr	r3, [pc, #528]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d05b      	beq.n	8001bbc <HAL_RCC_OscConfig+0x124>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d157      	bne.n	8001bbc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e25a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b18:	d106      	bne.n	8001b28 <HAL_RCC_OscConfig+0x90>
 8001b1a:	4b7c      	ldr	r3, [pc, #496]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a7b      	ldr	r2, [pc, #492]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e01d      	b.n	8001b64 <HAL_RCC_OscConfig+0xcc>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0xb4>
 8001b32:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a75      	ldr	r2, [pc, #468]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b73      	ldr	r3, [pc, #460]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a72      	ldr	r2, [pc, #456]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e00b      	b.n	8001b64 <HAL_RCC_OscConfig+0xcc>
 8001b4c:	4b6f      	ldr	r3, [pc, #444]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a6e      	ldr	r2, [pc, #440]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b6c      	ldr	r3, [pc, #432]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a6b      	ldr	r2, [pc, #428]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d013      	beq.n	8001b94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f94e 	bl	8000e0c <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff f94a 	bl	8000e0c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	; 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e21f      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b61      	ldr	r3, [pc, #388]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0xdc>
 8001b92:	e014      	b.n	8001bbe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff f93a 	bl	8000e0c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff f936 	bl	8000e0c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e20b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bae:	4b57      	ldr	r3, [pc, #348]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x104>
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d06f      	beq.n	8001caa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bca:	4b50      	ldr	r3, [pc, #320]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d017      	beq.n	8001c06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bd6:	4b4d      	ldr	r3, [pc, #308]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d105      	bne.n	8001bee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001be2:	4b4a      	ldr	r3, [pc, #296]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00b      	beq.n	8001c06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bee:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d11c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfa:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d116      	bne.n	8001c34 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c06:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <HAL_RCC_OscConfig+0x186>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e1d3      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4937      	ldr	r1, [pc, #220]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c32:	e03a      	b.n	8001caa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c3c:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <HAL_RCC_OscConfig+0x278>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff f8e3 	bl	8000e0c <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4a:	f7ff f8df 	bl	8000e0c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e1b4      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c68:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4925      	ldr	r1, [pc, #148]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
 8001c7c:	e015      	b.n	8001caa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7e:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_RCC_OscConfig+0x278>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff f8c2 	bl	8000e0c <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8c:	f7ff f8be 	bl	8000e0c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e193      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d036      	beq.n	8001d24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d016      	beq.n	8001cec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7ff f8a2 	bl	8000e0c <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ccc:	f7ff f89e 	bl	8000e0c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e173      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x234>
 8001cea:	e01b      	b.n	8001d24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff f88b 	bl	8000e0c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	e00e      	b.n	8001d18 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff f887 	bl	8000e0c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d907      	bls.n	8001d18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e15c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	42470000 	.word	0x42470000
 8001d14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	4b8a      	ldr	r3, [pc, #552]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ea      	bne.n	8001cfa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 8097 	beq.w	8001e60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d36:	4b83      	ldr	r3, [pc, #524]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10f      	bne.n	8001d62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	4b7f      	ldr	r3, [pc, #508]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a7e      	ldr	r2, [pc, #504]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b7c      	ldr	r3, [pc, #496]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d62:	4b79      	ldr	r3, [pc, #484]	; (8001f48 <HAL_RCC_OscConfig+0x4b0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d118      	bne.n	8001da0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d6e:	4b76      	ldr	r3, [pc, #472]	; (8001f48 <HAL_RCC_OscConfig+0x4b0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a75      	ldr	r2, [pc, #468]	; (8001f48 <HAL_RCC_OscConfig+0x4b0>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff f847 	bl	8000e0c <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d82:	f7ff f843 	bl	8000e0c <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e118      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	4b6c      	ldr	r3, [pc, #432]	; (8001f48 <HAL_RCC_OscConfig+0x4b0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x31e>
 8001da8:	4b66      	ldr	r3, [pc, #408]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	4a65      	ldr	r2, [pc, #404]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6713      	str	r3, [r2, #112]	; 0x70
 8001db4:	e01c      	b.n	8001df0 <HAL_RCC_OscConfig+0x358>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b05      	cmp	r3, #5
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x340>
 8001dbe:	4b61      	ldr	r3, [pc, #388]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a60      	ldr	r2, [pc, #384]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	4b5e      	ldr	r3, [pc, #376]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	4a5d      	ldr	r2, [pc, #372]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0x358>
 8001dd8:	4b5a      	ldr	r3, [pc, #360]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a59      	ldr	r2, [pc, #356]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
 8001de4:	4b57      	ldr	r3, [pc, #348]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a56      	ldr	r2, [pc, #344]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001dea:	f023 0304 	bic.w	r3, r3, #4
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d015      	beq.n	8001e24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff f808 	bl	8000e0c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7ff f804 	bl	8000e0c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0d7      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e16:	4b4b      	ldr	r3, [pc, #300]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0ee      	beq.n	8001e00 <HAL_RCC_OscConfig+0x368>
 8001e22:	e014      	b.n	8001e4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7fe fff2 	bl	8000e0c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7fe ffee 	bl	8000e0c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e0c1      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e42:	4b40      	ldr	r3, [pc, #256]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1ee      	bne.n	8001e2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	4a3a      	ldr	r2, [pc, #232]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80ad 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e6a:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d060      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d145      	bne.n	8001f0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7e:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <HAL_RCC_OscConfig+0x4b4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7fe ffc2 	bl	8000e0c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7fe ffbe 	bl	8000e0c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e093      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69da      	ldr	r2, [r3, #28]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	019b      	lsls	r3, r3, #6
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	041b      	lsls	r3, r3, #16
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	071b      	lsls	r3, r3, #28
 8001ed6:	491b      	ldr	r1, [pc, #108]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_RCC_OscConfig+0x4b4>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7fe ff93 	bl	8000e0c <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eea:	f7fe ff8f 	bl	8000e0c <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e064      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x452>
 8001f08:	e05c      	b.n	8001fc4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_RCC_OscConfig+0x4b4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7fe ff7c 	bl	8000e0c <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f18:	f7fe ff78 	bl	8000e0c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e04d      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_RCC_OscConfig+0x4ac>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x480>
 8001f36:	e045      	b.n	8001fc4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e040      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40007000 	.word	0x40007000
 8001f4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <HAL_RCC_OscConfig+0x538>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d030      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d129      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d122      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f80:	4013      	ands	r3, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d119      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f96:	085b      	lsrs	r3, r3, #1
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d10f      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e041      	b.n	800206a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7fe fdac 	bl	8000b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3304      	adds	r3, #4
 8002010:	4619      	mov	r1, r3
 8002012:	4610      	mov	r0, r2
 8002014:	f000 fa96 	bl	8002544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d001      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e04e      	b.n	800212a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a23      	ldr	r2, [pc, #140]	; (8002138 <HAL_TIM_Base_Start_IT+0xc4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d022      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x80>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b6:	d01d      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x80>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1f      	ldr	r2, [pc, #124]	; (800213c <HAL_TIM_Base_Start_IT+0xc8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d018      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x80>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1e      	ldr	r2, [pc, #120]	; (8002140 <HAL_TIM_Base_Start_IT+0xcc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d013      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x80>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <HAL_TIM_Base_Start_IT+0xd0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00e      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x80>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1b      	ldr	r2, [pc, #108]	; (8002148 <HAL_TIM_Base_Start_IT+0xd4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d009      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x80>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a19      	ldr	r2, [pc, #100]	; (800214c <HAL_TIM_Base_Start_IT+0xd8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d004      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x80>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <HAL_TIM_Base_Start_IT+0xdc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d111      	bne.n	8002118 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b06      	cmp	r3, #6
 8002104:	d010      	beq.n	8002128 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002116:	e007      	b.n	8002128 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40010000 	.word	0x40010000
 800213c:	40000400 	.word	0x40000400
 8002140:	40000800 	.word	0x40000800
 8002144:	40000c00 	.word	0x40000c00
 8002148:	40010400 	.word	0x40010400
 800214c:	40014000 	.word	0x40014000
 8002150:	40001800 	.word	0x40001800

08002154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b02      	cmp	r3, #2
 8002168:	d122      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b02      	cmp	r3, #2
 8002176:	d11b      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0202 	mvn.w	r2, #2
 8002180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f9b5 	bl	8002506 <HAL_TIM_IC_CaptureCallback>
 800219c:	e005      	b.n	80021aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f9a7 	bl	80024f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f9b8 	bl	800251a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d122      	bne.n	8002204 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d11b      	bne.n	8002204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0204 	mvn.w	r2, #4
 80021d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2202      	movs	r2, #2
 80021da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f98b 	bl	8002506 <HAL_TIM_IC_CaptureCallback>
 80021f0:	e005      	b.n	80021fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f97d 	bl	80024f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f98e 	bl	800251a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b08      	cmp	r3, #8
 8002210:	d122      	bne.n	8002258 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b08      	cmp	r3, #8
 800221e:	d11b      	bne.n	8002258 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0208 	mvn.w	r2, #8
 8002228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2204      	movs	r2, #4
 800222e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f961 	bl	8002506 <HAL_TIM_IC_CaptureCallback>
 8002244:	e005      	b.n	8002252 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f953 	bl	80024f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f964 	bl	800251a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b10      	cmp	r3, #16
 8002264:	d122      	bne.n	80022ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b10      	cmp	r3, #16
 8002272:	d11b      	bne.n	80022ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0210 	mvn.w	r2, #16
 800227c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2208      	movs	r2, #8
 8002282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f937 	bl	8002506 <HAL_TIM_IC_CaptureCallback>
 8002298:	e005      	b.n	80022a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f929 	bl	80024f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f93a 	bl	800251a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d10e      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d107      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0201 	mvn.w	r2, #1
 80022d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fab0 	bl	8000838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e2:	2b80      	cmp	r3, #128	; 0x80
 80022e4:	d10e      	bne.n	8002304 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f0:	2b80      	cmp	r3, #128	; 0x80
 80022f2:	d107      	bne.n	8002304 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fae0 	bl	80028c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230e:	2b40      	cmp	r3, #64	; 0x40
 8002310:	d10e      	bne.n	8002330 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231c:	2b40      	cmp	r3, #64	; 0x40
 800231e:	d107      	bne.n	8002330 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f8ff 	bl	800252e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	2b20      	cmp	r3, #32
 800233c:	d10e      	bne.n	800235c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b20      	cmp	r3, #32
 800234a:	d107      	bne.n	800235c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0220 	mvn.w	r2, #32
 8002354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 faaa 	bl	80028b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_TIM_ConfigClockSource+0x1c>
 800237c:	2302      	movs	r3, #2
 800237e:	e0b4      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x186>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800239e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b8:	d03e      	beq.n	8002438 <HAL_TIM_ConfigClockSource+0xd4>
 80023ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023be:	f200 8087 	bhi.w	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c6:	f000 8086 	beq.w	80024d6 <HAL_TIM_ConfigClockSource+0x172>
 80023ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ce:	d87f      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023d0:	2b70      	cmp	r3, #112	; 0x70
 80023d2:	d01a      	beq.n	800240a <HAL_TIM_ConfigClockSource+0xa6>
 80023d4:	2b70      	cmp	r3, #112	; 0x70
 80023d6:	d87b      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023d8:	2b60      	cmp	r3, #96	; 0x60
 80023da:	d050      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x11a>
 80023dc:	2b60      	cmp	r3, #96	; 0x60
 80023de:	d877      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e0:	2b50      	cmp	r3, #80	; 0x50
 80023e2:	d03c      	beq.n	800245e <HAL_TIM_ConfigClockSource+0xfa>
 80023e4:	2b50      	cmp	r3, #80	; 0x50
 80023e6:	d873      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	d058      	beq.n	800249e <HAL_TIM_ConfigClockSource+0x13a>
 80023ec:	2b40      	cmp	r3, #64	; 0x40
 80023ee:	d86f      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023f0:	2b30      	cmp	r3, #48	; 0x30
 80023f2:	d064      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x15a>
 80023f4:	2b30      	cmp	r3, #48	; 0x30
 80023f6:	d86b      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d060      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x15a>
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d867      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002400:	2b00      	cmp	r3, #0
 8002402:	d05c      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x15a>
 8002404:	2b10      	cmp	r3, #16
 8002406:	d05a      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x15a>
 8002408:	e062      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6899      	ldr	r1, [r3, #8]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f000 f9ad 	bl	8002778 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800242c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	609a      	str	r2, [r3, #8]
      break;
 8002436:	e04f      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6899      	ldr	r1, [r3, #8]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f000 f996 	bl	8002778 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800245a:	609a      	str	r2, [r3, #8]
      break;
 800245c:	e03c      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	461a      	mov	r2, r3
 800246c:	f000 f90a 	bl	8002684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2150      	movs	r1, #80	; 0x50
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f963 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 800247c:	e02c      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6859      	ldr	r1, [r3, #4]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	461a      	mov	r2, r3
 800248c:	f000 f929 	bl	80026e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2160      	movs	r1, #96	; 0x60
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f953 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 800249c:	e01c      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6859      	ldr	r1, [r3, #4]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	461a      	mov	r2, r3
 80024ac:	f000 f8ea 	bl	8002684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2140      	movs	r1, #64	; 0x40
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f943 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 80024bc:	e00c      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4619      	mov	r1, r3
 80024c8:	4610      	mov	r0, r2
 80024ca:	f000 f93a 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 80024ce:	e003      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      break;
 80024d4:	e000      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a40      	ldr	r2, [pc, #256]	; (8002658 <TIM_Base_SetConfig+0x114>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d013      	beq.n	8002584 <TIM_Base_SetConfig+0x40>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002562:	d00f      	beq.n	8002584 <TIM_Base_SetConfig+0x40>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a3d      	ldr	r2, [pc, #244]	; (800265c <TIM_Base_SetConfig+0x118>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00b      	beq.n	8002584 <TIM_Base_SetConfig+0x40>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3c      	ldr	r2, [pc, #240]	; (8002660 <TIM_Base_SetConfig+0x11c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d007      	beq.n	8002584 <TIM_Base_SetConfig+0x40>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a3b      	ldr	r2, [pc, #236]	; (8002664 <TIM_Base_SetConfig+0x120>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d003      	beq.n	8002584 <TIM_Base_SetConfig+0x40>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a3a      	ldr	r2, [pc, #232]	; (8002668 <TIM_Base_SetConfig+0x124>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d108      	bne.n	8002596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a2f      	ldr	r2, [pc, #188]	; (8002658 <TIM_Base_SetConfig+0x114>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d02b      	beq.n	80025f6 <TIM_Base_SetConfig+0xb2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a4:	d027      	beq.n	80025f6 <TIM_Base_SetConfig+0xb2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a2c      	ldr	r2, [pc, #176]	; (800265c <TIM_Base_SetConfig+0x118>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d023      	beq.n	80025f6 <TIM_Base_SetConfig+0xb2>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a2b      	ldr	r2, [pc, #172]	; (8002660 <TIM_Base_SetConfig+0x11c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d01f      	beq.n	80025f6 <TIM_Base_SetConfig+0xb2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a2a      	ldr	r2, [pc, #168]	; (8002664 <TIM_Base_SetConfig+0x120>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d01b      	beq.n	80025f6 <TIM_Base_SetConfig+0xb2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a29      	ldr	r2, [pc, #164]	; (8002668 <TIM_Base_SetConfig+0x124>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d017      	beq.n	80025f6 <TIM_Base_SetConfig+0xb2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a28      	ldr	r2, [pc, #160]	; (800266c <TIM_Base_SetConfig+0x128>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <TIM_Base_SetConfig+0xb2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a27      	ldr	r2, [pc, #156]	; (8002670 <TIM_Base_SetConfig+0x12c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00f      	beq.n	80025f6 <TIM_Base_SetConfig+0xb2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a26      	ldr	r2, [pc, #152]	; (8002674 <TIM_Base_SetConfig+0x130>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00b      	beq.n	80025f6 <TIM_Base_SetConfig+0xb2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a25      	ldr	r2, [pc, #148]	; (8002678 <TIM_Base_SetConfig+0x134>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d007      	beq.n	80025f6 <TIM_Base_SetConfig+0xb2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a24      	ldr	r2, [pc, #144]	; (800267c <TIM_Base_SetConfig+0x138>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d003      	beq.n	80025f6 <TIM_Base_SetConfig+0xb2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a23      	ldr	r2, [pc, #140]	; (8002680 <TIM_Base_SetConfig+0x13c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d108      	bne.n	8002608 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <TIM_Base_SetConfig+0x114>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d003      	beq.n	800263c <TIM_Base_SetConfig+0xf8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <TIM_Base_SetConfig+0x124>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d103      	bne.n	8002644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	615a      	str	r2, [r3, #20]
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40010000 	.word	0x40010000
 800265c:	40000400 	.word	0x40000400
 8002660:	40000800 	.word	0x40000800
 8002664:	40000c00 	.word	0x40000c00
 8002668:	40010400 	.word	0x40010400
 800266c:	40014000 	.word	0x40014000
 8002670:	40014400 	.word	0x40014400
 8002674:	40014800 	.word	0x40014800
 8002678:	40001800 	.word	0x40001800
 800267c:	40001c00 	.word	0x40001c00
 8002680:	40002000 	.word	0x40002000

08002684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	f023 0201 	bic.w	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f023 030a 	bic.w	r3, r3, #10
 80026c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	621a      	str	r2, [r3, #32]
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b087      	sub	sp, #28
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	f023 0210 	bic.w	r2, r3, #16
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800270c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	031b      	lsls	r3, r3, #12
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800271e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	621a      	str	r2, [r3, #32]
}
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	f043 0307 	orr.w	r3, r3, #7
 8002764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	609a      	str	r2, [r3, #8]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	021a      	lsls	r2, r3, #8
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	431a      	orrs	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4313      	orrs	r3, r2
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	609a      	str	r2, [r3, #8]
}
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e05a      	b.n	8002886 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a21      	ldr	r2, [pc, #132]	; (8002894 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d022      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281c:	d01d      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d018      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1b      	ldr	r2, [pc, #108]	; (800289c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00e      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a18      	ldr	r2, [pc, #96]	; (80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d009      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a17      	ldr	r2, [pc, #92]	; (80028a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d004      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a15      	ldr	r2, [pc, #84]	; (80028ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10c      	bne.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	4313      	orrs	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40010000 	.word	0x40010000
 8002898:	40000400 	.word	0x40000400
 800289c:	40000800 	.word	0x40000800
 80028a0:	40000c00 	.word	0x40000c00
 80028a4:	40010400 	.word	0x40010400
 80028a8:	40014000 	.word	0x40014000
 80028ac:	40001800 	.word	0x40001800

080028b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e03f      	b.n	800296a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe f952 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	; 0x24
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800291a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fc7b 	bl	8003218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b0ba      	sub	sp, #232	; 0xe8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80029b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10f      	bne.n	80029da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_UART_IRQHandler+0x66>
 80029c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fb65 	bl	80030a2 <UART_Receive_IT>
      return;
 80029d8:	e256      	b.n	8002e88 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 80de 	beq.w	8002ba0 <HAL_UART_IRQHandler+0x22c>
 80029e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80d1 	beq.w	8002ba0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_UART_IRQHandler+0xae>
 8002a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f043 0201 	orr.w	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <HAL_UART_IRQHandler+0xd2>
 8002a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f043 0202 	orr.w	r2, r3, #2
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00b      	beq.n	8002a6a <HAL_UART_IRQHandler+0xf6>
 8002a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f043 0204 	orr.w	r2, r3, #4
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d011      	beq.n	8002a9a <HAL_UART_IRQHandler+0x126>
 8002a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d105      	bne.n	8002a8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f043 0208 	orr.w	r2, r3, #8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 81ed 	beq.w	8002e7e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x14e>
 8002ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 faf0 	bl	80030a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002acc:	2b40      	cmp	r3, #64	; 0x40
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <HAL_UART_IRQHandler+0x17a>
 8002ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d04f      	beq.n	8002b8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f9f8 	bl	8002ee4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d141      	bne.n	8002b86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3314      	adds	r3, #20
 8002b08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b10:	e853 3f00 	ldrex	r3, [r3]
 8002b14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3314      	adds	r3, #20
 8002b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b3e:	e841 2300 	strex	r3, r2, [r1]
 8002b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1d9      	bne.n	8002b02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d013      	beq.n	8002b7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	4a7d      	ldr	r2, [pc, #500]	; (8002d50 <HAL_UART_IRQHandler+0x3dc>)
 8002b5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe fb03 	bl	800116e <HAL_DMA_Abort_IT>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d016      	beq.n	8002b9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7c:	e00e      	b.n	8002b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f99a 	bl	8002eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b84:	e00a      	b.n	8002b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f996 	bl	8002eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8c:	e006      	b.n	8002b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f992 	bl	8002eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b9a:	e170      	b.n	8002e7e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9c:	bf00      	nop
    return;
 8002b9e:	e16e      	b.n	8002e7e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	f040 814a 	bne.w	8002e3e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8143 	beq.w	8002e3e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 813c 	beq.w	8002e3e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	f040 80b4 	bne.w	8002d54 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8140 	beq.w	8002e82 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	f080 8139 	bcs.w	8002e82 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c22:	f000 8088 	beq.w	8002d36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	330c      	adds	r3, #12
 8002c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c34:	e853 3f00 	ldrex	r3, [r3]
 8002c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c62:	e841 2300 	strex	r3, r2, [r1]
 8002c66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1d9      	bne.n	8002c26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3314      	adds	r3, #20
 8002c78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c7c:	e853 3f00 	ldrex	r3, [r3]
 8002c80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3314      	adds	r3, #20
 8002c92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ca2:	e841 2300 	strex	r3, r2, [r1]
 8002ca6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1e1      	bne.n	8002c72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3314      	adds	r3, #20
 8002cb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cb8:	e853 3f00 	ldrex	r3, [r3]
 8002cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3314      	adds	r3, #20
 8002cce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e3      	bne.n	8002cae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfe:	e853 3f00 	ldrex	r3, [r3]
 8002d02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d06:	f023 0310 	bic.w	r3, r3, #16
 8002d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	330c      	adds	r3, #12
 8002d14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d18:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d20:	e841 2300 	strex	r3, r2, [r1]
 8002d24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1e3      	bne.n	8002cf4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe f9ac 	bl	800108e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f8c0 	bl	8002ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d4c:	e099      	b.n	8002e82 <HAL_UART_IRQHandler+0x50e>
 8002d4e:	bf00      	nop
 8002d50:	08002fab 	.word	0x08002fab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 808b 	beq.w	8002e86 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8086 	beq.w	8002e86 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	330c      	adds	r3, #12
 8002d80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	e853 3f00 	ldrex	r3, [r3]
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d9e:	647a      	str	r2, [r7, #68]	; 0x44
 8002da0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002da4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002da6:	e841 2300 	strex	r3, r2, [r1]
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e3      	bne.n	8002d7a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3314      	adds	r3, #20
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3314      	adds	r3, #20
 8002dd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dd6:	633a      	str	r2, [r7, #48]	; 0x30
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dde:	e841 2300 	strex	r3, r2, [r1]
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1e3      	bne.n	8002db2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0310 	bic.w	r3, r3, #16
 8002e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	330c      	adds	r3, #12
 8002e18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e1c:	61fa      	str	r2, [r7, #28]
 8002e1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e20:	69b9      	ldr	r1, [r7, #24]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	e841 2300 	strex	r3, r2, [r1]
 8002e28:	617b      	str	r3, [r7, #20]
   return(result);
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e3      	bne.n	8002df8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f848 	bl	8002ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e3c:	e023      	b.n	8002e86 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_UART_IRQHandler+0x4ea>
 8002e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f8bb 	bl	8002fd2 <UART_Transmit_IT>
    return;
 8002e5c:	e014      	b.n	8002e88 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00e      	beq.n	8002e88 <HAL_UART_IRQHandler+0x514>
 8002e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f8fb 	bl	8003072 <UART_EndTransmit_IT>
    return;
 8002e7c:	e004      	b.n	8002e88 <HAL_UART_IRQHandler+0x514>
    return;
 8002e7e:	bf00      	nop
 8002e80:	e002      	b.n	8002e88 <HAL_UART_IRQHandler+0x514>
      return;
 8002e82:	bf00      	nop
 8002e84:	e000      	b.n	8002e88 <HAL_UART_IRQHandler+0x514>
      return;
 8002e86:	bf00      	nop
  }
}
 8002e88:	37e8      	adds	r7, #232	; 0xe8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop

08002e90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b095      	sub	sp, #84	; 0x54
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef6:	e853 3f00 	ldrex	r3, [r3]
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	330c      	adds	r3, #12
 8002f0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f0c:	643a      	str	r2, [r7, #64]	; 0x40
 8002f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f14:	e841 2300 	strex	r3, r2, [r1]
 8002f18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e5      	bne.n	8002eec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3314      	adds	r3, #20
 8002f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	e853 3f00 	ldrex	r3, [r3]
 8002f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3314      	adds	r3, #20
 8002f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f48:	e841 2300 	strex	r3, r2, [r1]
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e5      	bne.n	8002f20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d119      	bne.n	8002f90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	e853 3f00 	ldrex	r3, [r3]
 8002f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f023 0310 	bic.w	r3, r3, #16
 8002f72:	647b      	str	r3, [r7, #68]	; 0x44
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f7c:	61ba      	str	r2, [r7, #24]
 8002f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	6979      	ldr	r1, [r7, #20]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	613b      	str	r3, [r7, #16]
   return(result);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e5      	bne.n	8002f5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f9e:	bf00      	nop
 8002fa0:	3754      	adds	r7, #84	; 0x54
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff ff77 	bl	8002eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b085      	sub	sp, #20
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b21      	cmp	r3, #33	; 0x21
 8002fe4:	d13e      	bne.n	8003064 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fee:	d114      	bne.n	800301a <UART_Transmit_IT+0x48>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d110      	bne.n	800301a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800300c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	1c9a      	adds	r2, r3, #2
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	621a      	str	r2, [r3, #32]
 8003018:	e008      	b.n	800302c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6211      	str	r1, [r2, #32]
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29b      	uxth	r3, r3
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4619      	mov	r1, r3
 800303a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10f      	bne.n	8003060 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800304e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800305e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003088:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff fefc 	bl	8002e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b08c      	sub	sp, #48	; 0x30
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b22      	cmp	r3, #34	; 0x22
 80030b4:	f040 80ab 	bne.w	800320e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c0:	d117      	bne.n	80030f2 <UART_Receive_IT+0x50>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d113      	bne.n	80030f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	1c9a      	adds	r2, r3, #2
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	629a      	str	r2, [r3, #40]	; 0x28
 80030f0:	e026      	b.n	8003140 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003104:	d007      	beq.n	8003116 <UART_Receive_IT+0x74>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10a      	bne.n	8003124 <UART_Receive_IT+0x82>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e008      	b.n	8003136 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003130:	b2da      	uxtb	r2, r3
 8003132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003134:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29b      	uxth	r3, r3
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4619      	mov	r1, r3
 800314e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003150:	2b00      	cmp	r3, #0
 8003152:	d15a      	bne.n	800320a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0220 	bic.w	r2, r2, #32
 8003162:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003172:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	2b01      	cmp	r3, #1
 8003192:	d135      	bne.n	8003200 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	613b      	str	r3, [r7, #16]
   return(result);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f023 0310 	bic.w	r3, r3, #16
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	330c      	adds	r3, #12
 80031b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ba:	623a      	str	r2, [r7, #32]
 80031bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	69f9      	ldr	r1, [r7, #28]
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e5      	bne.n	800319a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d10a      	bne.n	80031f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031f6:	4619      	mov	r1, r3
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff fe67 	bl	8002ecc <HAL_UARTEx_RxEventCallback>
 80031fe:	e002      	b.n	8003206 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff fe4f 	bl	8002ea4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e002      	b.n	8003210 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	3730      	adds	r7, #48	; 0x30
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800321c:	b0c0      	sub	sp, #256	; 0x100
 800321e:	af00      	add	r7, sp, #0
 8003220:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003234:	68d9      	ldr	r1, [r3, #12]
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	ea40 0301 	orr.w	r3, r0, r1
 8003240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	431a      	orrs	r2, r3
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	431a      	orrs	r2, r3
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003270:	f021 010c 	bic.w	r1, r1, #12
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800327e:	430b      	orrs	r3, r1
 8003280:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800328e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003292:	6999      	ldr	r1, [r3, #24]
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	ea40 0301 	orr.w	r3, r0, r1
 800329e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4b8f      	ldr	r3, [pc, #572]	; (80034e4 <UART_SetConfig+0x2cc>)
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d005      	beq.n	80032b8 <UART_SetConfig+0xa0>
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4b8d      	ldr	r3, [pc, #564]	; (80034e8 <UART_SetConfig+0x2d0>)
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d104      	bne.n	80032c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032b8:	f7fe fa30 	bl	800171c <HAL_RCC_GetPCLK2Freq>
 80032bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032c0:	e003      	b.n	80032ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032c2:	f7fe fa17 	bl	80016f4 <HAL_RCC_GetPCLK1Freq>
 80032c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d4:	f040 810c 	bne.w	80034f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032dc:	2200      	movs	r2, #0
 80032de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032ea:	4622      	mov	r2, r4
 80032ec:	462b      	mov	r3, r5
 80032ee:	1891      	adds	r1, r2, r2
 80032f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80032f2:	415b      	adcs	r3, r3
 80032f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032fa:	4621      	mov	r1, r4
 80032fc:	eb12 0801 	adds.w	r8, r2, r1
 8003300:	4629      	mov	r1, r5
 8003302:	eb43 0901 	adc.w	r9, r3, r1
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800331a:	4690      	mov	r8, r2
 800331c:	4699      	mov	r9, r3
 800331e:	4623      	mov	r3, r4
 8003320:	eb18 0303 	adds.w	r3, r8, r3
 8003324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003328:	462b      	mov	r3, r5
 800332a:	eb49 0303 	adc.w	r3, r9, r3
 800332e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800333e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003342:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003346:	460b      	mov	r3, r1
 8003348:	18db      	adds	r3, r3, r3
 800334a:	653b      	str	r3, [r7, #80]	; 0x50
 800334c:	4613      	mov	r3, r2
 800334e:	eb42 0303 	adc.w	r3, r2, r3
 8003352:	657b      	str	r3, [r7, #84]	; 0x54
 8003354:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003358:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800335c:	f7fc ff52 	bl	8000204 <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4b61      	ldr	r3, [pc, #388]	; (80034ec <UART_SetConfig+0x2d4>)
 8003366:	fba3 2302 	umull	r2, r3, r3, r2
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	011c      	lsls	r4, r3, #4
 800336e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003372:	2200      	movs	r2, #0
 8003374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003378:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800337c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003380:	4642      	mov	r2, r8
 8003382:	464b      	mov	r3, r9
 8003384:	1891      	adds	r1, r2, r2
 8003386:	64b9      	str	r1, [r7, #72]	; 0x48
 8003388:	415b      	adcs	r3, r3
 800338a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800338c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003390:	4641      	mov	r1, r8
 8003392:	eb12 0a01 	adds.w	sl, r2, r1
 8003396:	4649      	mov	r1, r9
 8003398:	eb43 0b01 	adc.w	fp, r3, r1
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033b0:	4692      	mov	sl, r2
 80033b2:	469b      	mov	fp, r3
 80033b4:	4643      	mov	r3, r8
 80033b6:	eb1a 0303 	adds.w	r3, sl, r3
 80033ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033be:	464b      	mov	r3, r9
 80033c0:	eb4b 0303 	adc.w	r3, fp, r3
 80033c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033dc:	460b      	mov	r3, r1
 80033de:	18db      	adds	r3, r3, r3
 80033e0:	643b      	str	r3, [r7, #64]	; 0x40
 80033e2:	4613      	mov	r3, r2
 80033e4:	eb42 0303 	adc.w	r3, r2, r3
 80033e8:	647b      	str	r3, [r7, #68]	; 0x44
 80033ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033f2:	f7fc ff07 	bl	8000204 <__aeabi_uldivmod>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <UART_SetConfig+0x2d4>)
 80033fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	2264      	movs	r2, #100	; 0x64
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	1acb      	subs	r3, r1, r3
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003412:	4b36      	ldr	r3, [pc, #216]	; (80034ec <UART_SetConfig+0x2d4>)
 8003414:	fba3 2302 	umull	r2, r3, r3, r2
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003420:	441c      	add	r4, r3
 8003422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003426:	2200      	movs	r2, #0
 8003428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800342c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003430:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003434:	4642      	mov	r2, r8
 8003436:	464b      	mov	r3, r9
 8003438:	1891      	adds	r1, r2, r2
 800343a:	63b9      	str	r1, [r7, #56]	; 0x38
 800343c:	415b      	adcs	r3, r3
 800343e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003444:	4641      	mov	r1, r8
 8003446:	1851      	adds	r1, r2, r1
 8003448:	6339      	str	r1, [r7, #48]	; 0x30
 800344a:	4649      	mov	r1, r9
 800344c:	414b      	adcs	r3, r1
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800345c:	4659      	mov	r1, fp
 800345e:	00cb      	lsls	r3, r1, #3
 8003460:	4651      	mov	r1, sl
 8003462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003466:	4651      	mov	r1, sl
 8003468:	00ca      	lsls	r2, r1, #3
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	4603      	mov	r3, r0
 8003470:	4642      	mov	r2, r8
 8003472:	189b      	adds	r3, r3, r2
 8003474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003478:	464b      	mov	r3, r9
 800347a:	460a      	mov	r2, r1
 800347c:	eb42 0303 	adc.w	r3, r2, r3
 8003480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003490:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003494:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003498:	460b      	mov	r3, r1
 800349a:	18db      	adds	r3, r3, r3
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
 800349e:	4613      	mov	r3, r2
 80034a0:	eb42 0303 	adc.w	r3, r2, r3
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034ae:	f7fc fea9 	bl	8000204 <__aeabi_uldivmod>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <UART_SetConfig+0x2d4>)
 80034b8:	fba3 1302 	umull	r1, r3, r3, r2
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	2164      	movs	r1, #100	; 0x64
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	3332      	adds	r3, #50	; 0x32
 80034ca:	4a08      	ldr	r2, [pc, #32]	; (80034ec <UART_SetConfig+0x2d4>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	f003 0207 	and.w	r2, r3, #7
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4422      	add	r2, r4
 80034de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034e0:	e105      	b.n	80036ee <UART_SetConfig+0x4d6>
 80034e2:	bf00      	nop
 80034e4:	40011000 	.word	0x40011000
 80034e8:	40011400 	.word	0x40011400
 80034ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f4:	2200      	movs	r2, #0
 80034f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003502:	4642      	mov	r2, r8
 8003504:	464b      	mov	r3, r9
 8003506:	1891      	adds	r1, r2, r2
 8003508:	6239      	str	r1, [r7, #32]
 800350a:	415b      	adcs	r3, r3
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
 800350e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003512:	4641      	mov	r1, r8
 8003514:	1854      	adds	r4, r2, r1
 8003516:	4649      	mov	r1, r9
 8003518:	eb43 0501 	adc.w	r5, r3, r1
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	00eb      	lsls	r3, r5, #3
 8003526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800352a:	00e2      	lsls	r2, r4, #3
 800352c:	4614      	mov	r4, r2
 800352e:	461d      	mov	r5, r3
 8003530:	4643      	mov	r3, r8
 8003532:	18e3      	adds	r3, r4, r3
 8003534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003538:	464b      	mov	r3, r9
 800353a:	eb45 0303 	adc.w	r3, r5, r3
 800353e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800354e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800355e:	4629      	mov	r1, r5
 8003560:	008b      	lsls	r3, r1, #2
 8003562:	4621      	mov	r1, r4
 8003564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003568:	4621      	mov	r1, r4
 800356a:	008a      	lsls	r2, r1, #2
 800356c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003570:	f7fc fe48 	bl	8000204 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4b60      	ldr	r3, [pc, #384]	; (80036fc <UART_SetConfig+0x4e4>)
 800357a:	fba3 2302 	umull	r2, r3, r3, r2
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	011c      	lsls	r4, r3, #4
 8003582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003586:	2200      	movs	r2, #0
 8003588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800358c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003590:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003594:	4642      	mov	r2, r8
 8003596:	464b      	mov	r3, r9
 8003598:	1891      	adds	r1, r2, r2
 800359a:	61b9      	str	r1, [r7, #24]
 800359c:	415b      	adcs	r3, r3
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035a4:	4641      	mov	r1, r8
 80035a6:	1851      	adds	r1, r2, r1
 80035a8:	6139      	str	r1, [r7, #16]
 80035aa:	4649      	mov	r1, r9
 80035ac:	414b      	adcs	r3, r1
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035bc:	4659      	mov	r1, fp
 80035be:	00cb      	lsls	r3, r1, #3
 80035c0:	4651      	mov	r1, sl
 80035c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035c6:	4651      	mov	r1, sl
 80035c8:	00ca      	lsls	r2, r1, #3
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	4642      	mov	r2, r8
 80035d2:	189b      	adds	r3, r3, r2
 80035d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035d8:	464b      	mov	r3, r9
 80035da:	460a      	mov	r2, r1
 80035dc:	eb42 0303 	adc.w	r3, r2, r3
 80035e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80035ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035fc:	4649      	mov	r1, r9
 80035fe:	008b      	lsls	r3, r1, #2
 8003600:	4641      	mov	r1, r8
 8003602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003606:	4641      	mov	r1, r8
 8003608:	008a      	lsls	r2, r1, #2
 800360a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800360e:	f7fc fdf9 	bl	8000204 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4b39      	ldr	r3, [pc, #228]	; (80036fc <UART_SetConfig+0x4e4>)
 8003618:	fba3 1302 	umull	r1, r3, r3, r2
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	2164      	movs	r1, #100	; 0x64
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	3332      	adds	r3, #50	; 0x32
 800362a:	4a34      	ldr	r2, [pc, #208]	; (80036fc <UART_SetConfig+0x4e4>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003636:	441c      	add	r4, r3
 8003638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800363c:	2200      	movs	r2, #0
 800363e:	673b      	str	r3, [r7, #112]	; 0x70
 8003640:	677a      	str	r2, [r7, #116]	; 0x74
 8003642:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003646:	4642      	mov	r2, r8
 8003648:	464b      	mov	r3, r9
 800364a:	1891      	adds	r1, r2, r2
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	415b      	adcs	r3, r3
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003656:	4641      	mov	r1, r8
 8003658:	1851      	adds	r1, r2, r1
 800365a:	6039      	str	r1, [r7, #0]
 800365c:	4649      	mov	r1, r9
 800365e:	414b      	adcs	r3, r1
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800366e:	4659      	mov	r1, fp
 8003670:	00cb      	lsls	r3, r1, #3
 8003672:	4651      	mov	r1, sl
 8003674:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003678:	4651      	mov	r1, sl
 800367a:	00ca      	lsls	r2, r1, #3
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	4603      	mov	r3, r0
 8003682:	4642      	mov	r2, r8
 8003684:	189b      	adds	r3, r3, r2
 8003686:	66bb      	str	r3, [r7, #104]	; 0x68
 8003688:	464b      	mov	r3, r9
 800368a:	460a      	mov	r2, r1
 800368c:	eb42 0303 	adc.w	r3, r2, r3
 8003690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	663b      	str	r3, [r7, #96]	; 0x60
 800369c:	667a      	str	r2, [r7, #100]	; 0x64
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036aa:	4649      	mov	r1, r9
 80036ac:	008b      	lsls	r3, r1, #2
 80036ae:	4641      	mov	r1, r8
 80036b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b4:	4641      	mov	r1, r8
 80036b6:	008a      	lsls	r2, r1, #2
 80036b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036bc:	f7fc fda2 	bl	8000204 <__aeabi_uldivmod>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <UART_SetConfig+0x4e4>)
 80036c6:	fba3 1302 	umull	r1, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2164      	movs	r1, #100	; 0x64
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	3332      	adds	r3, #50	; 0x32
 80036d8:	4a08      	ldr	r2, [pc, #32]	; (80036fc <UART_SetConfig+0x4e4>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	f003 020f 	and.w	r2, r3, #15
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4422      	add	r2, r4
 80036ec:	609a      	str	r2, [r3, #8]
}
 80036ee:	bf00      	nop
 80036f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036f4:	46bd      	mov	sp, r7
 80036f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036fa:	bf00      	nop
 80036fc:	51eb851f 	.word	0x51eb851f

08003700 <__libc_init_array>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	4d0d      	ldr	r5, [pc, #52]	; (8003738 <__libc_init_array+0x38>)
 8003704:	4c0d      	ldr	r4, [pc, #52]	; (800373c <__libc_init_array+0x3c>)
 8003706:	1b64      	subs	r4, r4, r5
 8003708:	10a4      	asrs	r4, r4, #2
 800370a:	2600      	movs	r6, #0
 800370c:	42a6      	cmp	r6, r4
 800370e:	d109      	bne.n	8003724 <__libc_init_array+0x24>
 8003710:	4d0b      	ldr	r5, [pc, #44]	; (8003740 <__libc_init_array+0x40>)
 8003712:	4c0c      	ldr	r4, [pc, #48]	; (8003744 <__libc_init_array+0x44>)
 8003714:	f000 f820 	bl	8003758 <_init>
 8003718:	1b64      	subs	r4, r4, r5
 800371a:	10a4      	asrs	r4, r4, #2
 800371c:	2600      	movs	r6, #0
 800371e:	42a6      	cmp	r6, r4
 8003720:	d105      	bne.n	800372e <__libc_init_array+0x2e>
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	f855 3b04 	ldr.w	r3, [r5], #4
 8003728:	4798      	blx	r3
 800372a:	3601      	adds	r6, #1
 800372c:	e7ee      	b.n	800370c <__libc_init_array+0xc>
 800372e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003732:	4798      	blx	r3
 8003734:	3601      	adds	r6, #1
 8003736:	e7f2      	b.n	800371e <__libc_init_array+0x1e>
 8003738:	08003790 	.word	0x08003790
 800373c:	08003790 	.word	0x08003790
 8003740:	08003790 	.word	0x08003790
 8003744:	08003794 	.word	0x08003794

08003748 <memset>:
 8003748:	4402      	add	r2, r0
 800374a:	4603      	mov	r3, r0
 800374c:	4293      	cmp	r3, r2
 800374e:	d100      	bne.n	8003752 <memset+0xa>
 8003750:	4770      	bx	lr
 8003752:	f803 1b01 	strb.w	r1, [r3], #1
 8003756:	e7f9      	b.n	800374c <memset+0x4>

08003758 <_init>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	bf00      	nop
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr

08003764 <_fini>:
 8003764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003766:	bf00      	nop
 8003768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376a:	bc08      	pop	{r3}
 800376c:	469e      	mov	lr, r3
 800376e:	4770      	bx	lr
